

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Tue Aug 10 11:49:17 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F88
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,merge=1,delta=2
    14                           	psect	text7,local,class=CODE,merge=1,delta=2
    15                           	psect	text8,local,class=CODE,merge=1,delta=2
    16                           	psect	text9,local,class=CODE,merge=1,delta=2
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 2.20
    21                           ; Generated 12/02/2020 GMT
    22                           ; 
    23                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F88 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000D                     	;# 
    65  000E                     	;# 
    66  000E                     	;# 
    67  000F                     	;# 
    68  0010                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0013                     	;# 
    72  0014                     	;# 
    73  0015                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0017                     	;# 
    77  0018                     	;# 
    78  0019                     	;# 
    79  001A                     	;# 
    80  001E                     	;# 
    81  001F                     	;# 
    82  0081                     	;# 
    83  0085                     	;# 
    84  0086                     	;# 
    85  008C                     	;# 
    86  008D                     	;# 
    87  008E                     	;# 
    88  008F                     	;# 
    89  0090                     	;# 
    90  0092                     	;# 
    91  0093                     	;# 
    92  0094                     	;# 
    93  0098                     	;# 
    94  0099                     	;# 
    95  009B                     	;# 
    96  009C                     	;# 
    97  009D                     	;# 
    98  009E                     	;# 
    99  009F                     	;# 
   100  0105                     	;# 
   101  010C                     	;# 
   102  010D                     	;# 
   103  010E                     	;# 
   104  010F                     	;# 
   105  018C                     	;# 
   106  018D                     	;# 
   107  0000                     	;# 
   108  0001                     	;# 
   109  0002                     	;# 
   110  0003                     	;# 
   111  0004                     	;# 
   112  0005                     	;# 
   113  0006                     	;# 
   114  000A                     	;# 
   115  000B                     	;# 
   116  000C                     	;# 
   117  000D                     	;# 
   118  000E                     	;# 
   119  000E                     	;# 
   120  000F                     	;# 
   121  0010                     	;# 
   122  0011                     	;# 
   123  0012                     	;# 
   124  0013                     	;# 
   125  0014                     	;# 
   126  0015                     	;# 
   127  0015                     	;# 
   128  0016                     	;# 
   129  0017                     	;# 
   130  0018                     	;# 
   131  0019                     	;# 
   132  001A                     	;# 
   133  001E                     	;# 
   134  001F                     	;# 
   135  0081                     	;# 
   136  0085                     	;# 
   137  0086                     	;# 
   138  008C                     	;# 
   139  008D                     	;# 
   140  008E                     	;# 
   141  008F                     	;# 
   142  0090                     	;# 
   143  0092                     	;# 
   144  0093                     	;# 
   145  0094                     	;# 
   146  0098                     	;# 
   147  0099                     	;# 
   148  009B                     	;# 
   149  009C                     	;# 
   150  009D                     	;# 
   151  009E                     	;# 
   152  009F                     	;# 
   153  0105                     	;# 
   154  010C                     	;# 
   155  010D                     	;# 
   156  010E                     	;# 
   157  010F                     	;# 
   158  018C                     	;# 
   159  018D                     	;# 
   160  0006                     _PORTB	set	6
   161  0005                     _PORTA	set	5
   162  0032                     _RB2	set	50
   163  0031                     _RB1	set	49
   164  0036                     _RB6	set	54
   165  0035                     _RB5	set	53
   166  0034                     _RB4	set	52
   167  0033                     _RB3	set	51
   168  0086                     _TRISBbits	set	134
   169  0085                     _TRISAbits	set	133
   170  009B                     _ANSEL	set	155
   171  008F                     _OSCCONbits	set	143
   172                           
   173                           	psect	strings
   174  0002                     __pstrings:
   175  0002                     stringtab:
   176  0002                     __stringtab:
   177  0002                     stringcode:	
   178                           ;	String table - string pointers are 1 byte each
   179                           
   180  0002                     stringdir:
   181  0002  3000               	movlw	high stringdir
   182  0003  008A               	movwf	10
   183  0004  0804               	movf	4,w
   184  0005  0A84               	incf	4,f
   185  0006  0782               	addwf	2,f
   186  0007                     __stringbase:
   187  0007  3400               	retlw	0
   188  0008                     __end_of__stringtab:
   189  0008                     STR_1:
   190  0008  3448               	retlw	72	;'H'
   191  0009  346F               	retlw	111	;'o'
   192  000A  346C               	retlw	108	;'l'
   193  000B  3461               	retlw	97	;'a'
   194  000C  3420               	retlw	32	;' '
   195  000D  344D               	retlw	77	;'M'
   196  000E  3475               	retlw	117	;'u'
   197  000F  346E               	retlw	110	;'n'
   198  0010  3464               	retlw	100	;'d'
   199  0011  346F               	retlw	111	;'o'
   200  0012  3400               	retlw	0
   201  0013                     STR_2:
   202  0013  3453               	retlw	83	;'S'
   203  0014  346F               	retlw	111	;'o'
   204  0015  3479               	retlw	121	;'y'
   205  0016  3420               	retlw	32	;' '
   206  0017  344D               	retlw	77	;'M'
   207  0018  3461               	retlw	97	;'a'
   208  0019  3474               	retlw	116	;'t'
   209  001A  3469               	retlw	105	;'i'
   210  001B  3461               	retlw	97	;'a'
   211  001C  3473               	retlw	115	;'s'
   212  001D  3400               	retlw	0
   213                           
   214                           	psect	cinit
   215  07FD                     start_initialization:	
   216                           ; #config settings
   217                           
   218  07FD                     __initialization:
   219  07FD                     end_of_initialization:	
   220                           ;End of C runtime variable initialization code
   221                           
   222  07FD                     __end_of__initialization:
   223  07FD  0183               	clrf	3
   224  07FE  118A  2EE9         	ljmp	_main	;jump to C main() function
   225                           
   226                           	psect	cstackCOMMON
   227  0070                     __pcstackCOMMON:
   228  0070                     ?_Lcd_Port:
   229  0070                     ??_Lcd_Port:	
   230                           ; 1 bytes @ 0x0
   231                           
   232  0070                     ?_Lcd_Cmd:	
   233                           ; 1 bytes @ 0x0
   234                           
   235  0070                     ?_Lcd_Clear:	
   236                           ; 1 bytes @ 0x0
   237                           
   238  0070                     ?_Lcd_Init:	
   239                           ; 1 bytes @ 0x0
   240                           
   241  0070                     ?_Lcd_Write_Char:	
   242                           ; 1 bytes @ 0x0
   243                           
   244  0070                     ?_Lcd_Write_String:	
   245                           ; 1 bytes @ 0x0
   246                           
   247  0070                     ?_ConfigOscillator:	
   248                           ; 1 bytes @ 0x0
   249                           
   250  0070                     ??_ConfigOscillator:	
   251                           ; 1 bytes @ 0x0
   252                           
   253  0070                     ?_ConfigPorts:	
   254                           ; 1 bytes @ 0x0
   255                           
   256  0070                     ??_ConfigPorts:	
   257                           ; 1 bytes @ 0x0
   258                           
   259  0070                     ?_main:	
   260                           ; 1 bytes @ 0x0
   261                           
   262  0070                     Lcd_Port@a:	
   263                           ; 1 bytes @ 0x0
   264                           
   265                           
   266                           ; 1 bytes @ 0x0
   267  0070                     	ds	1
   268  0071                     ??_Lcd_Cmd:
   269  0071                     ??_Lcd_Write_Char:	
   270                           ; 1 bytes @ 0x1
   271                           
   272                           
   273                           ; 1 bytes @ 0x1
   274  0071                     	ds	1
   275  0072                     Lcd_Write_Char@temp:
   276                           
   277                           ; 1 bytes @ 0x2
   278  0072                     	ds	1
   279  0073                     Lcd_Cmd@a:
   280  0073                     Lcd_Write_Char@y:	
   281                           ; 1 bytes @ 0x3
   282                           
   283                           
   284                           ; 1 bytes @ 0x3
   285  0073                     	ds	1
   286  0074                     ??_Lcd_Clear:
   287  0074                     ?_Lcd_Set_Cursor:	
   288                           ; 1 bytes @ 0x4
   289                           
   290  0074                     ??_Lcd_Init:	
   291                           ; 1 bytes @ 0x4
   292                           
   293  0074                     Lcd_Set_Cursor@a:	
   294                           ; 1 bytes @ 0x4
   295                           
   296  0074                     Lcd_Write_Char@a:	
   297                           ; 1 bytes @ 0x4
   298                           
   299                           
   300                           ; 1 bytes @ 0x4
   301  0074                     	ds	1
   302  0075                     ??_Lcd_Set_Cursor:
   303  0075                     ??_Lcd_Write_String:	
   304                           ; 1 bytes @ 0x5
   305                           
   306  0075                     Lcd_Write_String@i:	
   307                           ; 1 bytes @ 0x5
   308                           
   309                           
   310                           ; 2 bytes @ 0x5
   311  0075                     	ds	2
   312  0077                     Lcd_Set_Cursor@b:
   313  0077                     Lcd_Write_String@a:	
   314                           ; 1 bytes @ 0x7
   315                           
   316                           
   317                           ; 1 bytes @ 0x7
   318  0077                     	ds	1
   319  0078                     Lcd_Set_Cursor@z:
   320                           
   321                           ; 1 bytes @ 0x8
   322  0078                     	ds	1
   323  0079                     Lcd_Set_Cursor@y:
   324                           
   325                           ; 1 bytes @ 0x9
   326  0079                     	ds	1
   327  007A                     Lcd_Set_Cursor@temp:
   328                           
   329                           ; 1 bytes @ 0xA
   330  007A                     	ds	1
   331  007B                     ??_main:
   332                           
   333                           ; 1 bytes @ 0xB
   334  007B                     	ds	3
   335                           
   336                           	psect	maintext
   337  06E9                     __pmaintext:	
   338 ;;
   339 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   340 ;;
   341 ;; *************** function _main *****************
   342 ;; Defined at:
   343 ;;		line 80 in file "main.c"
   344 ;; Parameters:    Size  Location     Type
   345 ;;		None
   346 ;; Auto vars:     Size  Location     Type
   347 ;;		None
   348 ;; Return value:  Size  Location     Type
   349 ;;                  1    wreg      void 
   350 ;; Registers used:
   351 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   352 ;; Tracked objects:
   353 ;;		On entry : B00/0
   354 ;;		On exit  : 0/0
   355 ;;		Unchanged: 0/0
   356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   357 ;;      Params:         0       0       0       0       0
   358 ;;      Locals:         0       0       0       0       0
   359 ;;      Temps:          3       0       0       0       0
   360 ;;      Totals:         3       0       0       0       0
   361 ;;Total ram usage:        3 bytes
   362 ;; Hardware stack levels required when called: 3
   363 ;; This function calls:
   364 ;;		_ConfigOscillator
   365 ;;		_ConfigPorts
   366 ;;		_Lcd_Clear
   367 ;;		_Lcd_Init
   368 ;;		_Lcd_Set_Cursor
   369 ;;		_Lcd_Write_String
   370 ;; This function is called by:
   371 ;;		Startup code after reset
   372 ;; This function uses a non-reentrant model
   373 ;;
   374                           
   375                           
   376                           ;psect for function _main
   377  06E9                     _main:
   378  06E9                     l883:	
   379                           ;incstack = 0
   380                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   381                           
   382                           
   383                           ;main.c: 82:     ConfigOscillator();
   384  06E9  118A  2631  118A   	fcall	_ConfigOscillator
   385  06EC                     l885:
   386                           
   387                           ;main.c: 83:     ConfigPorts();
   388  06EC  118A  2659  118A   	fcall	_ConfigPorts
   389  06EF                     l887:
   390                           
   391                           ;main.c: 84:     Lcd_Init();
   392  06EF  118A  2724  118A   	fcall	_Lcd_Init
   393  06F2                     l889:
   394                           
   395                           ;main.c: 85:     Lcd_Clear();
   396  06F2  118A  2638  118A   	fcall	_Lcd_Clear
   397  06F5                     l891:
   398                           
   399                           ;main.c: 87:     Lcd_Set_Cursor(1,1);
   400  06F5  01F4               	clrf	Lcd_Set_Cursor@a
   401  06F6  0AF4               	incf	Lcd_Set_Cursor@a,f
   402  06F7  3001               	movlw	1
   403  06F8  118A  2768  118A   	fcall	_Lcd_Set_Cursor
   404  06FB                     l893:
   405                           
   406                           ;main.c: 88:     Lcd_Write_String("Hola Mundo");
   407  06FB  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   408  06FC  118A  2673  118A   	fcall	_Lcd_Write_String
   409  06FF                     l895:
   410                           
   411                           ;main.c: 89:     _delay((unsigned long)((100)*(2000000/4000.0)));
   412  06FF  3041               	movlw	65
   413  0700  00FC               	movwf	??_main+1
   414  0701  30EE               	movlw	238
   415  0702  00FB               	movwf	??_main
   416  0703                     u247:
   417  0703  0BFB               	decfsz	??_main,f
   418  0704  2F03               	goto	u247
   419  0705  0BFC               	decfsz	??_main+1,f
   420  0706  2F03               	goto	u247
   421  0707  0000               	nop
   422  0708                     l897:
   423                           
   424                           ;main.c: 90:     Lcd_Set_Cursor(1,2);
   425  0708  3002               	movlw	2
   426  0709  00FB               	movwf	??_main
   427  070A  087B               	movf	??_main,w
   428  070B  00F4               	movwf	Lcd_Set_Cursor@a
   429  070C  3001               	movlw	1
   430  070D  118A  2768  118A   	fcall	_Lcd_Set_Cursor
   431                           
   432                           ;main.c: 91:     Lcd_Write_String("Soy Matias");
   433  0710  300C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   434  0711  118A  2673  118A   	fcall	_Lcd_Write_String
   435  0714                     l899:
   436                           
   437                           ;main.c: 92:     _delay((unsigned long)((1000)*(2000000/4000.0)));
   438  0714  3003               	movlw	3
   439  0715  00FD               	movwf	??_main+2
   440  0716  308A               	movlw	138
   441  0717  00FC               	movwf	??_main+1
   442  0718  3055               	movlw	85
   443  0719  00FB               	movwf	??_main
   444  071A                     u257:
   445  071A  0BFB               	decfsz	??_main,f
   446  071B  2F1A               	goto	u257
   447  071C  0BFC               	decfsz	??_main+1,f
   448  071D  2F1A               	goto	u257
   449  071E  0BFD               	decfsz	??_main+2,f
   450  071F  2F1A               	goto	u257
   451  0720  2F21               	nop2
   452  0721                     l82:	
   453                           ;main.c: 93:     while(1)
   454                           
   455  0721                     l83:	
   456                           ;main.c: 94:     {;main.c: 96:     }
   457                           
   458  0721  2F21               	goto	l82
   459  0722  118A  2800         	ljmp	start
   460  0724                     __end_of_main:
   461                           
   462                           	psect	text1
   463  0673                     __ptext1:	
   464 ;; *************** function _Lcd_Write_String *****************
   465 ;; Defined at:
   466 ;;		line 195 in file "./lcd_16x4.h"
   467 ;; Parameters:    Size  Location     Type
   468 ;;  a               1    wreg     PTR unsigned char 
   469 ;;		 -> STR_2(11), STR_1(11), 
   470 ;; Auto vars:     Size  Location     Type
   471 ;;  a               1    7[COMMON] PTR unsigned char 
   472 ;;		 -> STR_2(11), STR_1(11), 
   473 ;;  i               2    5[COMMON] int 
   474 ;; Return value:  Size  Location     Type
   475 ;;                  1    wreg      void 
   476 ;; Registers used:
   477 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   478 ;; Tracked objects:
   479 ;;		On entry : 0/0
   480 ;;		On exit  : 0/0
   481 ;;		Unchanged: 0/0
   482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   483 ;;      Params:         0       0       0       0       0
   484 ;;      Locals:         3       0       0       0       0
   485 ;;      Temps:          0       0       0       0       0
   486 ;;      Totals:         3       0       0       0       0
   487 ;;Total ram usage:        3 bytes
   488 ;; Hardware stack levels used: 1
   489 ;; Hardware stack levels required when called: 2
   490 ;; This function calls:
   491 ;;		_Lcd_Write_Char
   492 ;; This function is called by:
   493 ;;		_main
   494 ;; This function uses a non-reentrant model
   495 ;;
   496                           
   497                           
   498                           ;psect for function _Lcd_Write_String
   499  0673                     _Lcd_Write_String:
   500                           
   501                           ;incstack = 0
   502                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   503                           ;Lcd_Write_String@a stored from wreg
   504  0673  00F7               	movwf	Lcd_Write_String@a
   505  0674                     l875:
   506                           
   507                           ;./lcd_16x4.h: 195: void Lcd_Write_String(char *a);./lcd_16x4.h: 196: {;./lcd_16x4.h: 19
      +                          7:  int i;;./lcd_16x4.h: 198:  for(i=0;a[i]!='\0';i++)
   508  0674  01F5               	clrf	Lcd_Write_String@i
   509  0675  01F6               	clrf	Lcd_Write_String@i+1
   510  0676  2E86               	goto	l881
   511  0677                     l877:
   512                           
   513                           ;./lcd_16x4.h: 199:     Lcd_Write_Char(a[i]);
   514  0677  0875               	movf	Lcd_Write_String@i,w
   515  0678  0777               	addwf	Lcd_Write_String@a,w
   516  0679  0084               	movwf	4
   517  067A  118A  2002  118A   	fcall	stringdir
   518  067D  118A  26B4  118A   	fcall	_Lcd_Write_Char
   519  0680                     l879:
   520  0680  3001               	movlw	1
   521  0681  07F5               	addwf	Lcd_Write_String@i,f
   522  0682  1803               	skipnc
   523  0683  0AF6               	incf	Lcd_Write_String@i+1,f
   524  0684  3000               	movlw	0
   525  0685  07F6               	addwf	Lcd_Write_String@i+1,f
   526  0686                     l881:
   527  0686  0875               	movf	Lcd_Write_String@i,w
   528  0687  0777               	addwf	Lcd_Write_String@a,w
   529  0688  0084               	movwf	4
   530  0689  118A  2002  118A   	fcall	stringdir
   531  068C  3A00               	xorlw	0
   532  068D  1D03               	skipz
   533  068E  2E90               	goto	u231
   534  068F  2E91               	goto	u230
   535  0690                     u231:
   536  0690  2E77               	goto	l877
   537  0691                     u230:
   538  0691                     l65:
   539  0691  0008               	return
   540  0692                     __end_of_Lcd_Write_String:
   541                           
   542                           	psect	text2
   543  06B4                     __ptext2:	
   544 ;; *************** function _Lcd_Write_Char *****************
   545 ;; Defined at:
   546 ;;		line 176 in file "./lcd_16x4.h"
   547 ;; Parameters:    Size  Location     Type
   548 ;;  a               1    wreg     unsigned char 
   549 ;; Auto vars:     Size  Location     Type
   550 ;;  a               1    4[COMMON] unsigned char 
   551 ;;  y               1    3[COMMON] unsigned char 
   552 ;;  temp            1    2[COMMON] unsigned char 
   553 ;; Return value:  Size  Location     Type
   554 ;;                  1    wreg      void 
   555 ;; Registers used:
   556 ;;		wreg, status,2, status,0, pclath, cstack
   557 ;; Tracked objects:
   558 ;;		On entry : 0/0
   559 ;;		On exit  : 0/0
   560 ;;		Unchanged: 0/0
   561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   562 ;;      Params:         0       0       0       0       0
   563 ;;      Locals:         3       0       0       0       0
   564 ;;      Temps:          1       0       0       0       0
   565 ;;      Totals:         4       0       0       0       0
   566 ;;Total ram usage:        4 bytes
   567 ;; Hardware stack levels used: 1
   568 ;; Hardware stack levels required when called: 1
   569 ;; This function calls:
   570 ;;		_Lcd_Port
   571 ;; This function is called by:
   572 ;;		_Lcd_Write_String
   573 ;; This function uses a non-reentrant model
   574 ;;
   575                           
   576                           
   577                           ;psect for function _Lcd_Write_Char
   578  06B4                     _Lcd_Write_Char:
   579                           
   580                           ;incstack = 0
   581                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
   582                           ;Lcd_Write_Char@a stored from wreg
   583  06B4  00F4               	movwf	Lcd_Write_Char@a
   584  06B5                     l697:
   585                           
   586                           ;./lcd_16x4.h: 176: void Lcd_Write_Char(char a);./lcd_16x4.h: 180: {;./lcd_16x4.h: 181: 
      +                             char temp,y;;./lcd_16x4.h: 182:    temp = (char)(a&0x0F);
   587  06B5  0874               	movf	Lcd_Write_Char@a,w
   588  06B6  390F               	andlw	15
   589  06B7  00F1               	movwf	??_Lcd_Write_Char
   590  06B8  0871               	movf	??_Lcd_Write_Char,w
   591  06B9  00F2               	movwf	Lcd_Write_Char@temp
   592                           
   593                           ;./lcd_16x4.h: 183:    y = (char)(a&0xF0);
   594  06BA  0874               	movf	Lcd_Write_Char@a,w
   595  06BB  39F0               	andlw	240
   596  06BC  00F1               	movwf	??_Lcd_Write_Char
   597  06BD  0871               	movf	??_Lcd_Write_Char,w
   598  06BE  00F3               	movwf	Lcd_Write_Char@y
   599  06BF                     l699:
   600                           
   601                           ;./lcd_16x4.h: 184:    RB1 = 1;
   602  06BF  1283               	bcf	3,5	;RP0=0, select bank0
   603  06C0  1303               	bcf	3,6	;RP1=0, select bank0
   604  06C1  1486               	bsf	6,1	;volatile
   605  06C2                     l701:
   606                           
   607                           ;./lcd_16x4.h: 185:    Lcd_Port((char)(y>>4));
   608  06C2  0873               	movf	Lcd_Write_Char@y,w
   609  06C3  00F1               	movwf	??_Lcd_Write_Char
   610  06C4  3004               	movlw	4
   611  06C5                     u55:
   612  06C5  1003               	clrc
   613  06C6  0CF1               	rrf	??_Lcd_Write_Char,f
   614  06C7  3EFF               	addlw	-1
   615  06C8  1D03               	skipz
   616  06C9  2EC5               	goto	u55
   617  06CA  0871               	movf	??_Lcd_Write_Char,w
   618  06CB  118A  2692  118A   	fcall	_Lcd_Port
   619  06CE                     l703:
   620                           
   621                           ;./lcd_16x4.h: 186:    RB2 = 1;
   622  06CE  1283               	bcf	3,5	;RP0=0, select bank0
   623  06CF  1303               	bcf	3,6	;RP1=0, select bank0
   624  06D0  1506               	bsf	6,2	;volatile
   625  06D1                     l705:
   626                           
   627                           ;./lcd_16x4.h: 187:    _delay((unsigned long)((40)*(2000000/4000000.0)));
   628  06D1  3006               	movlw	6
   629  06D2  00F1               	movwf	??_Lcd_Write_Char
   630  06D3                     u267:
   631  06D3  0BF1               	decfsz	??_Lcd_Write_Char,f
   632  06D4  2ED3               	goto	u267
   633  06D5  0000               	nop
   634  06D6                     l707:
   635                           
   636                           ;./lcd_16x4.h: 188:    RB2 = 0;
   637  06D6  1283               	bcf	3,5	;RP0=0, select bank0
   638  06D7  1303               	bcf	3,6	;RP1=0, select bank0
   639  06D8  1106               	bcf	6,2	;volatile
   640  06D9                     l709:
   641                           
   642                           ;./lcd_16x4.h: 189:    Lcd_Port(temp);
   643  06D9  0872               	movf	Lcd_Write_Char@temp,w
   644  06DA  118A  2692  118A   	fcall	_Lcd_Port
   645  06DD                     l711:
   646                           
   647                           ;./lcd_16x4.h: 190:    RB2 = 1;
   648  06DD  1283               	bcf	3,5	;RP0=0, select bank0
   649  06DE  1303               	bcf	3,6	;RP1=0, select bank0
   650  06DF  1506               	bsf	6,2	;volatile
   651  06E0                     l713:
   652                           
   653                           ;./lcd_16x4.h: 191:    _delay((unsigned long)((40)*(2000000/4000000.0)));
   654  06E0  3006               	movlw	6
   655  06E1  00F1               	movwf	??_Lcd_Write_Char
   656  06E2                     u277:
   657  06E2  0BF1               	decfsz	??_Lcd_Write_Char,f
   658  06E3  2EE2               	goto	u277
   659  06E4  0000               	nop
   660  06E5                     l715:
   661                           
   662                           ;./lcd_16x4.h: 192:    RB2 = 0;
   663  06E5  1283               	bcf	3,5	;RP0=0, select bank0
   664  06E6  1303               	bcf	3,6	;RP1=0, select bank0
   665  06E7  1106               	bcf	6,2	;volatile
   666  06E8                     l59:
   667  06E8  0008               	return
   668  06E9                     __end_of_Lcd_Write_Char:
   669                           
   670                           	psect	text3
   671  0768                     __ptext3:	
   672 ;; *************** function _Lcd_Set_Cursor *****************
   673 ;; Defined at:
   674 ;;		line 77 in file "./lcd_16x4.h"
   675 ;; Parameters:    Size  Location     Type
   676 ;;  b               1    wreg     unsigned char 
   677 ;;  a               1    4[COMMON] unsigned char 
   678 ;; Auto vars:     Size  Location     Type
   679 ;;  b               1    7[COMMON] unsigned char 
   680 ;;  temp            1   10[COMMON] unsigned char 
   681 ;;  y               1    9[COMMON] unsigned char 
   682 ;;  z               1    8[COMMON] unsigned char 
   683 ;; Return value:  Size  Location     Type
   684 ;;                  1    wreg      void 
   685 ;; Registers used:
   686 ;;		wreg, status,2, status,0, pclath, cstack
   687 ;; Tracked objects:
   688 ;;		On entry : 0/0
   689 ;;		On exit  : 0/0
   690 ;;		Unchanged: 0/0
   691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   692 ;;      Params:         1       0       0       0       0
   693 ;;      Locals:         4       0       0       0       0
   694 ;;      Temps:          2       0       0       0       0
   695 ;;      Totals:         7       0       0       0       0
   696 ;;Total ram usage:        7 bytes
   697 ;; Hardware stack levels used: 1
   698 ;; Hardware stack levels required when called: 2
   699 ;; This function calls:
   700 ;;		_Lcd_Cmd
   701 ;; This function is called by:
   702 ;;		_main
   703 ;; This function uses a non-reentrant model
   704 ;;
   705                           
   706                           
   707                           ;psect for function _Lcd_Set_Cursor
   708  0768                     _Lcd_Set_Cursor:
   709                           
   710                           ;incstack = 0
   711                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
   712                           ;Lcd_Set_Cursor@b stored from wreg
   713  0768  00F7               	movwf	Lcd_Set_Cursor@b
   714  0769                     l835:
   715                           
   716                           ;./lcd_16x4.h: 77: void Lcd_Set_Cursor(char b, char a);./lcd_16x4.h: 85: {;./lcd_16x4.h:
      +                           86:  char temp,z,y;;./lcd_16x4.h: 87:  if(a == 1)
   717  0769  0374               	decf	Lcd_Set_Cursor@a,w
   718  076A  1D03               	btfss	3,2
   719  076B  2F6D               	goto	u151
   720  076C  2F6E               	goto	u150
   721  076D                     u151:
   722  076D  2F8D               	goto	l845
   723  076E                     u150:
   724  076E                     l837:
   725                           
   726                           ;./lcd_16x4.h: 88:  {;./lcd_16x4.h: 89:    temp = (char)(0x80 + b - 1);
   727  076E  0877               	movf	Lcd_Set_Cursor@b,w
   728  076F  3E7F               	addlw	127
   729  0770  00F5               	movwf	??_Lcd_Set_Cursor
   730  0771  0875               	movf	??_Lcd_Set_Cursor,w
   731  0772  00FA               	movwf	Lcd_Set_Cursor@temp
   732                           
   733                           ;./lcd_16x4.h: 92:   z = (char)(temp>>4);
   734  0773  087A               	movf	Lcd_Set_Cursor@temp,w
   735  0774  00F5               	movwf	??_Lcd_Set_Cursor
   736  0775  3004               	movlw	4
   737  0776                     u165:
   738  0776  1003               	clrc
   739  0777  0CF5               	rrf	??_Lcd_Set_Cursor,f
   740  0778  3EFF               	addlw	-1
   741  0779  1D03               	skipz
   742  077A  2F76               	goto	u165
   743  077B  0875               	movf	??_Lcd_Set_Cursor,w
   744  077C  00F6               	movwf	??_Lcd_Set_Cursor+1
   745  077D  0876               	movf	??_Lcd_Set_Cursor+1,w
   746  077E  00F8               	movwf	Lcd_Set_Cursor@z
   747  077F                     l839:
   748                           
   749                           ;./lcd_16x4.h: 94:   y = (char)(temp & 0x0F);
   750  077F  087A               	movf	Lcd_Set_Cursor@temp,w
   751  0780  390F               	andlw	15
   752  0781  00F5               	movwf	??_Lcd_Set_Cursor
   753  0782  0875               	movf	??_Lcd_Set_Cursor,w
   754  0783  00F9               	movwf	Lcd_Set_Cursor@y
   755  0784                     l841:
   756                           
   757                           ;./lcd_16x4.h: 95:   Lcd_Cmd(z);
   758  0784  0878               	movf	Lcd_Set_Cursor@z,w
   759  0785  118A  2641  118A   	fcall	_Lcd_Cmd
   760  0788                     l843:
   761                           
   762                           ;./lcd_16x4.h: 96:   Lcd_Cmd(y);
   763  0788  0879               	movf	Lcd_Set_Cursor@y,w
   764  0789  118A  2641  118A   	fcall	_Lcd_Cmd
   765                           
   766                           ;./lcd_16x4.h: 97:  }
   767  078C  2FFC               	goto	l53
   768  078D                     l845:
   769  078D  3002               	movlw	2
   770  078E  0674               	xorwf	Lcd_Set_Cursor@a,w
   771  078F  1D03               	btfss	3,2
   772  0790  2F92               	goto	u171
   773  0791  2F93               	goto	u170
   774  0792                     u171:
   775  0792  2FB2               	goto	l855
   776  0793                     u170:
   777  0793                     l847:
   778                           
   779                           ;./lcd_16x4.h: 99:  {;./lcd_16x4.h: 100:   temp = (char)(0xC0 + b - 1);
   780  0793  0877               	movf	Lcd_Set_Cursor@b,w
   781  0794  3EBF               	addlw	191
   782  0795  00F5               	movwf	??_Lcd_Set_Cursor
   783  0796  0875               	movf	??_Lcd_Set_Cursor,w
   784  0797  00FA               	movwf	Lcd_Set_Cursor@temp
   785                           
   786                           ;./lcd_16x4.h: 103:   z = (char)(temp>>4);
   787  0798  087A               	movf	Lcd_Set_Cursor@temp,w
   788  0799  00F5               	movwf	??_Lcd_Set_Cursor
   789  079A  3004               	movlw	4
   790  079B                     u185:
   791  079B  1003               	clrc
   792  079C  0CF5               	rrf	??_Lcd_Set_Cursor,f
   793  079D  3EFF               	addlw	-1
   794  079E  1D03               	skipz
   795  079F  2F9B               	goto	u185
   796  07A0  0875               	movf	??_Lcd_Set_Cursor,w
   797  07A1  00F6               	movwf	??_Lcd_Set_Cursor+1
   798  07A2  0876               	movf	??_Lcd_Set_Cursor+1,w
   799  07A3  00F8               	movwf	Lcd_Set_Cursor@z
   800  07A4                     l849:
   801                           
   802                           ;./lcd_16x4.h: 104:   y = (char)(temp & 0x0F);
   803  07A4  087A               	movf	Lcd_Set_Cursor@temp,w
   804  07A5  390F               	andlw	15
   805  07A6  00F5               	movwf	??_Lcd_Set_Cursor
   806  07A7  0875               	movf	??_Lcd_Set_Cursor,w
   807  07A8  00F9               	movwf	Lcd_Set_Cursor@y
   808  07A9                     l851:
   809                           
   810                           ;./lcd_16x4.h: 105:   Lcd_Cmd(z);
   811  07A9  0878               	movf	Lcd_Set_Cursor@z,w
   812  07AA  118A  2641  118A   	fcall	_Lcd_Cmd
   813  07AD                     l853:
   814                           
   815                           ;./lcd_16x4.h: 106:   Lcd_Cmd(y);
   816  07AD  0879               	movf	Lcd_Set_Cursor@y,w
   817  07AE  118A  2641  118A   	fcall	_Lcd_Cmd
   818                           
   819                           ;./lcd_16x4.h: 107:  }
   820  07B1  2FFC               	goto	l53
   821  07B2                     l855:
   822  07B2  3003               	movlw	3
   823  07B3  0674               	xorwf	Lcd_Set_Cursor@a,w
   824  07B4  1D03               	btfss	3,2
   825  07B5  2FB7               	goto	u191
   826  07B6  2FB8               	goto	u190
   827  07B7                     u191:
   828  07B7  2FD7               	goto	l865
   829  07B8                     u190:
   830  07B8                     l857:
   831                           
   832                           ;./lcd_16x4.h: 109:  {;./lcd_16x4.h: 110:   temp = (char)(0x90 + b - 1);
   833  07B8  0877               	movf	Lcd_Set_Cursor@b,w
   834  07B9  3E8F               	addlw	143
   835  07BA  00F5               	movwf	??_Lcd_Set_Cursor
   836  07BB  0875               	movf	??_Lcd_Set_Cursor,w
   837  07BC  00FA               	movwf	Lcd_Set_Cursor@temp
   838                           
   839                           ;./lcd_16x4.h: 113:   z = (char)(temp>>4);
   840  07BD  087A               	movf	Lcd_Set_Cursor@temp,w
   841  07BE  00F5               	movwf	??_Lcd_Set_Cursor
   842  07BF  3004               	movlw	4
   843  07C0                     u205:
   844  07C0  1003               	clrc
   845  07C1  0CF5               	rrf	??_Lcd_Set_Cursor,f
   846  07C2  3EFF               	addlw	-1
   847  07C3  1D03               	skipz
   848  07C4  2FC0               	goto	u205
   849  07C5  0875               	movf	??_Lcd_Set_Cursor,w
   850  07C6  00F6               	movwf	??_Lcd_Set_Cursor+1
   851  07C7  0876               	movf	??_Lcd_Set_Cursor+1,w
   852  07C8  00F8               	movwf	Lcd_Set_Cursor@z
   853  07C9                     l859:
   854                           
   855                           ;./lcd_16x4.h: 114:   y = (char)(temp & 0x0F);
   856  07C9  087A               	movf	Lcd_Set_Cursor@temp,w
   857  07CA  390F               	andlw	15
   858  07CB  00F5               	movwf	??_Lcd_Set_Cursor
   859  07CC  0875               	movf	??_Lcd_Set_Cursor,w
   860  07CD  00F9               	movwf	Lcd_Set_Cursor@y
   861  07CE                     l861:
   862                           
   863                           ;./lcd_16x4.h: 115:   Lcd_Cmd(z);
   864  07CE  0878               	movf	Lcd_Set_Cursor@z,w
   865  07CF  118A  2641  118A   	fcall	_Lcd_Cmd
   866  07D2                     l863:
   867                           
   868                           ;./lcd_16x4.h: 116:   Lcd_Cmd(y);
   869  07D2  0879               	movf	Lcd_Set_Cursor@y,w
   870  07D3  118A  2641  118A   	fcall	_Lcd_Cmd
   871                           
   872                           ;./lcd_16x4.h: 117:  }
   873  07D6  2FFC               	goto	l53
   874  07D7                     l865:
   875  07D7  3004               	movlw	4
   876  07D8  0674               	xorwf	Lcd_Set_Cursor@a,w
   877  07D9  1D03               	btfss	3,2
   878  07DA  2FDC               	goto	u211
   879  07DB  2FDD               	goto	u210
   880  07DC                     u211:
   881  07DC  2FFC               	goto	l49
   882  07DD                     u210:
   883  07DD                     l867:
   884                           
   885                           ;./lcd_16x4.h: 119:  {;./lcd_16x4.h: 120:   temp = (char)(0xD0 + b - 1);
   886  07DD  0877               	movf	Lcd_Set_Cursor@b,w
   887  07DE  3ECF               	addlw	207
   888  07DF  00F5               	movwf	??_Lcd_Set_Cursor
   889  07E0  0875               	movf	??_Lcd_Set_Cursor,w
   890  07E1  00FA               	movwf	Lcd_Set_Cursor@temp
   891                           
   892                           ;./lcd_16x4.h: 123:   z = (char)(temp>>4);
   893  07E2  087A               	movf	Lcd_Set_Cursor@temp,w
   894  07E3  00F5               	movwf	??_Lcd_Set_Cursor
   895  07E4  3004               	movlw	4
   896  07E5                     u225:
   897  07E5  1003               	clrc
   898  07E6  0CF5               	rrf	??_Lcd_Set_Cursor,f
   899  07E7  3EFF               	addlw	-1
   900  07E8  1D03               	skipz
   901  07E9  2FE5               	goto	u225
   902  07EA  0875               	movf	??_Lcd_Set_Cursor,w
   903  07EB  00F6               	movwf	??_Lcd_Set_Cursor+1
   904  07EC  0876               	movf	??_Lcd_Set_Cursor+1,w
   905  07ED  00F8               	movwf	Lcd_Set_Cursor@z
   906  07EE                     l869:
   907                           
   908                           ;./lcd_16x4.h: 124:   y = (char)(temp & 0x0F);
   909  07EE  087A               	movf	Lcd_Set_Cursor@temp,w
   910  07EF  390F               	andlw	15
   911  07F0  00F5               	movwf	??_Lcd_Set_Cursor
   912  07F1  0875               	movf	??_Lcd_Set_Cursor,w
   913  07F2  00F9               	movwf	Lcd_Set_Cursor@y
   914  07F3                     l871:
   915                           
   916                           ;./lcd_16x4.h: 125:   Lcd_Cmd(z);
   917  07F3  0878               	movf	Lcd_Set_Cursor@z,w
   918  07F4  118A  2641  118A   	fcall	_Lcd_Cmd
   919  07F7                     l873:
   920                           
   921                           ;./lcd_16x4.h: 126:   Lcd_Cmd(y);
   922  07F7  0879               	movf	Lcd_Set_Cursor@y,w
   923  07F8  118A  2641  118A   	fcall	_Lcd_Cmd
   924  07FB  2FFC               	goto	l53
   925  07FC                     l49:
   926  07FC                     l53:
   927  07FC  0008               	return
   928  07FD                     __end_of_Lcd_Set_Cursor:
   929                           
   930                           	psect	text4
   931  0724                     __ptext4:	
   932 ;; *************** function _Lcd_Init *****************
   933 ;; Defined at:
   934 ;;		line 130 in file "./lcd_16x4.h"
   935 ;; Parameters:    Size  Location     Type
   936 ;;		None
   937 ;; Auto vars:     Size  Location     Type
   938 ;;		None
   939 ;; Return value:  Size  Location     Type
   940 ;;                  1    wreg      void 
   941 ;; Registers used:
   942 ;;		wreg, status,2, status,0, pclath, cstack
   943 ;; Tracked objects:
   944 ;;		On entry : 0/0
   945 ;;		On exit  : 0/0
   946 ;;		Unchanged: 0/0
   947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   948 ;;      Params:         0       0       0       0       0
   949 ;;      Locals:         0       0       0       0       0
   950 ;;      Temps:          2       0       0       0       0
   951 ;;      Totals:         2       0       0       0       0
   952 ;;Total ram usage:        2 bytes
   953 ;; Hardware stack levels used: 1
   954 ;; Hardware stack levels required when called: 2
   955 ;; This function calls:
   956 ;;		_Lcd_Cmd
   957 ;;		_Lcd_Port
   958 ;; This function is called by:
   959 ;;		_main
   960 ;; This function uses a non-reentrant model
   961 ;;
   962                           
   963                           
   964                           ;psect for function _Lcd_Init
   965  0724                     _Lcd_Init:
   966  0724                     l759:	
   967                           ;incstack = 0
   968                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
   969                           
   970                           
   971                           ;./lcd_16x4.h: 132:   Lcd_Port(0x00);
   972  0724  3000               	movlw	0
   973  0725  118A  2692  118A   	fcall	_Lcd_Port
   974  0728                     l761:
   975                           
   976                           ;./lcd_16x4.h: 133:    _delay((unsigned long)((20)*(2000000/4000.0)));
   977  0728  300D               	movlw	13
   978  0729  00F5               	movwf	??_Lcd_Init+1
   979  072A  30FB               	movlw	251
   980  072B  00F4               	movwf	??_Lcd_Init
   981  072C                     u287:
   982  072C  0BF4               	decfsz	??_Lcd_Init,f
   983  072D  2F2C               	goto	u287
   984  072E  0BF5               	decfsz	??_Lcd_Init+1,f
   985  072F  2F2C               	goto	u287
   986  0730  2F31               	nop2
   987  0731                     l763:
   988                           
   989                           ;./lcd_16x4.h: 134:   Lcd_Cmd(0x03);
   990  0731  3003               	movlw	3
   991  0732  118A  2641  118A   	fcall	_Lcd_Cmd
   992                           
   993                           ;./lcd_16x4.h: 137: _delay((unsigned long)((5)*(2000000/4000.0)));
   994  0735  3004               	movlw	4
   995  0736  00F5               	movwf	??_Lcd_Init+1
   996  0737  303D               	movlw	61
   997  0738  00F4               	movwf	??_Lcd_Init
   998  0739                     u297:
   999  0739  0BF4               	decfsz	??_Lcd_Init,f
  1000  073A  2F39               	goto	u297
  1001  073B  0BF5               	decfsz	??_Lcd_Init+1,f
  1002  073C  2F39               	goto	u297
  1003  073D  2F3E               	nop2
  1004  073E                     l765:
  1005                           
  1006                           ;./lcd_16x4.h: 138:   Lcd_Cmd(0x03);
  1007  073E  3003               	movlw	3
  1008  073F  118A  2641  118A   	fcall	_Lcd_Cmd
  1009  0742                     l767:
  1010                           
  1011                           ;./lcd_16x4.h: 141:  _delay((unsigned long)((1)*(2000000/4000.0)));
  1012  0742  30A6               	movlw	166
  1013  0743  00F4               	movwf	??_Lcd_Init
  1014  0744                     u307:
  1015  0744  0BF4               	decfsz	??_Lcd_Init,f
  1016  0745  2F44               	goto	u307
  1017  0746  0000               	nop
  1018                           
  1019                           ;./lcd_16x4.h: 142:   Lcd_Cmd(0x03);
  1020  0747  3003               	movlw	3
  1021  0748  118A  2641  118A   	fcall	_Lcd_Cmd
  1022                           
  1023                           ;./lcd_16x4.h: 146:   Lcd_Cmd(0x02);
  1024  074B  3002               	movlw	2
  1025  074C  118A  2641  118A   	fcall	_Lcd_Cmd
  1026                           
  1027                           ;./lcd_16x4.h: 151:   Lcd_Cmd(0x02);
  1028  074F  3002               	movlw	2
  1029  0750  118A  2641  118A   	fcall	_Lcd_Cmd
  1030                           
  1031                           ;./lcd_16x4.h: 152:   Lcd_Cmd(0x08);
  1032  0753  3008               	movlw	8
  1033  0754  118A  2641  118A   	fcall	_Lcd_Cmd
  1034                           
  1035                           ;./lcd_16x4.h: 159:   Lcd_Cmd(0x00);
  1036  0757  3000               	movlw	0
  1037  0758  118A  2641  118A   	fcall	_Lcd_Cmd
  1038                           
  1039                           ;./lcd_16x4.h: 160:   Lcd_Cmd(0x0C);
  1040  075B  300C               	movlw	12
  1041  075C  118A  2641  118A   	fcall	_Lcd_Cmd
  1042                           
  1043                           ;./lcd_16x4.h: 167:   Lcd_Cmd(0x00);
  1044  075F  3000               	movlw	0
  1045  0760  118A  2641  118A   	fcall	_Lcd_Cmd
  1046                           
  1047                           ;./lcd_16x4.h: 168:   Lcd_Cmd(0x04);
  1048  0763  3004               	movlw	4
  1049  0764  118A  2641  118A   	fcall	_Lcd_Cmd
  1050  0767                     l56:
  1051  0767  0008               	return
  1052  0768                     __end_of_Lcd_Init:
  1053                           
  1054                           	psect	text5
  1055  0638                     __ptext5:	
  1056 ;; *************** function _Lcd_Clear *****************
  1057 ;; Defined at:
  1058 ;;		line 70 in file "./lcd_16x4.h"
  1059 ;; Parameters:    Size  Location     Type
  1060 ;;		None
  1061 ;; Auto vars:     Size  Location     Type
  1062 ;;		None
  1063 ;; Return value:  Size  Location     Type
  1064 ;;                  1    wreg      void 
  1065 ;; Registers used:
  1066 ;;		wreg, status,2, status,0, pclath, cstack
  1067 ;; Tracked objects:
  1068 ;;		On entry : 0/0
  1069 ;;		On exit  : 0/0
  1070 ;;		Unchanged: 0/0
  1071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1072 ;;      Params:         0       0       0       0       0
  1073 ;;      Locals:         0       0       0       0       0
  1074 ;;      Temps:          0       0       0       0       0
  1075 ;;      Totals:         0       0       0       0       0
  1076 ;;Total ram usage:        0 bytes
  1077 ;; Hardware stack levels used: 1
  1078 ;; Hardware stack levels required when called: 2
  1079 ;; This function calls:
  1080 ;;		_Lcd_Cmd
  1081 ;; This function is called by:
  1082 ;;		_main
  1083 ;; This function uses a non-reentrant model
  1084 ;;
  1085                           
  1086                           
  1087                           ;psect for function _Lcd_Clear
  1088  0638                     _Lcd_Clear:
  1089  0638                     l717:	
  1090                           ;incstack = 0
  1091                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  1092                           
  1093                           
  1094                           ;./lcd_16x4.h: 73:  Lcd_Cmd(0);
  1095  0638  3000               	movlw	0
  1096  0639  118A  2641  118A   	fcall	_Lcd_Cmd
  1097                           
  1098                           ;./lcd_16x4.h: 74:  Lcd_Cmd(1);
  1099  063C  3001               	movlw	1
  1100  063D  118A  2641  118A   	fcall	_Lcd_Cmd
  1101  0640                     l43:
  1102  0640  0008               	return
  1103  0641                     __end_of_Lcd_Clear:
  1104                           
  1105                           	psect	text6
  1106  0641                     __ptext6:	
  1107 ;; *************** function _Lcd_Cmd *****************
  1108 ;; Defined at:
  1109 ;;		line 61 in file "./lcd_16x4.h"
  1110 ;; Parameters:    Size  Location     Type
  1111 ;;  a               1    wreg     unsigned char 
  1112 ;; Auto vars:     Size  Location     Type
  1113 ;;  a               1    3[COMMON] unsigned char 
  1114 ;; Return value:  Size  Location     Type
  1115 ;;                  1    wreg      void 
  1116 ;; Registers used:
  1117 ;;		wreg, status,2, status,0, pclath, cstack
  1118 ;; Tracked objects:
  1119 ;;		On entry : 0/0
  1120 ;;		On exit  : 0/0
  1121 ;;		Unchanged: 0/0
  1122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1123 ;;      Params:         0       0       0       0       0
  1124 ;;      Locals:         1       0       0       0       0
  1125 ;;      Temps:          2       0       0       0       0
  1126 ;;      Totals:         3       0       0       0       0
  1127 ;;Total ram usage:        3 bytes
  1128 ;; Hardware stack levels used: 1
  1129 ;; Hardware stack levels required when called: 1
  1130 ;; This function calls:
  1131 ;;		_Lcd_Port
  1132 ;; This function is called by:
  1133 ;;		_Lcd_Clear
  1134 ;;		_Lcd_Set_Cursor
  1135 ;;		_Lcd_Init
  1136 ;;		_Lcd_Shift_Right
  1137 ;;		_Lcd_Shift_Left
  1138 ;; This function uses a non-reentrant model
  1139 ;;
  1140                           
  1141                           
  1142                           ;psect for function _Lcd_Cmd
  1143  0641                     _Lcd_Cmd:
  1144                           
  1145                           ;incstack = 0
  1146                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  1147                           ;Lcd_Cmd@a stored from wreg
  1148  0641  00F3               	movwf	Lcd_Cmd@a
  1149  0642                     l687:
  1150                           
  1151                           ;./lcd_16x4.h: 61: void Lcd_Cmd(char a);./lcd_16x4.h: 62: {;./lcd_16x4.h: 63:  RB1 = 0;
  1152  0642  1283               	bcf	3,5	;RP0=0, select bank0
  1153  0643  1303               	bcf	3,6	;RP1=0, select bank0
  1154  0644  1086               	bcf	6,1	;volatile
  1155  0645                     l689:
  1156                           
  1157                           ;./lcd_16x4.h: 64:  Lcd_Port(a);
  1158  0645  0873               	movf	Lcd_Cmd@a,w
  1159  0646  118A  2692  118A   	fcall	_Lcd_Port
  1160  0649                     l691:
  1161                           
  1162                           ;./lcd_16x4.h: 65:  RB2 = 1;
  1163  0649  1283               	bcf	3,5	;RP0=0, select bank0
  1164  064A  1303               	bcf	3,6	;RP1=0, select bank0
  1165  064B  1506               	bsf	6,2	;volatile
  1166  064C                     l693:
  1167                           
  1168                           ;./lcd_16x4.h: 66:         _delay((unsigned long)((4)*(2000000/4000.0)));
  1169  064C  3003               	movlw	3
  1170  064D  00F2               	movwf	??_Lcd_Cmd+1
  1171  064E  3097               	movlw	151
  1172  064F  00F1               	movwf	??_Lcd_Cmd
  1173  0650                     u317:
  1174  0650  0BF1               	decfsz	??_Lcd_Cmd,f
  1175  0651  2E50               	goto	u317
  1176  0652  0BF2               	decfsz	??_Lcd_Cmd+1,f
  1177  0653  2E50               	goto	u317
  1178  0654  2E55               	nop2
  1179  0655                     l695:
  1180                           
  1181                           ;./lcd_16x4.h: 67:         RB2 = 0;
  1182  0655  1283               	bcf	3,5	;RP0=0, select bank0
  1183  0656  1303               	bcf	3,6	;RP1=0, select bank0
  1184  0657  1106               	bcf	6,2	;volatile
  1185  0658                     l40:
  1186  0658  0008               	return
  1187  0659                     __end_of_Lcd_Cmd:
  1188                           
  1189                           	psect	text7
  1190  0692                     __ptext7:	
  1191 ;; *************** function _Lcd_Port *****************
  1192 ;; Defined at:
  1193 ;;		line 39 in file "./lcd_16x4.h"
  1194 ;; Parameters:    Size  Location     Type
  1195 ;;  a               1    wreg     unsigned char 
  1196 ;; Auto vars:     Size  Location     Type
  1197 ;;  a               1    0[COMMON] unsigned char 
  1198 ;; Return value:  Size  Location     Type
  1199 ;;                  1    wreg      void 
  1200 ;; Registers used:
  1201 ;;		wreg
  1202 ;; Tracked objects:
  1203 ;;		On entry : 0/0
  1204 ;;		On exit  : 0/0
  1205 ;;		Unchanged: 0/0
  1206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1207 ;;      Params:         0       0       0       0       0
  1208 ;;      Locals:         1       0       0       0       0
  1209 ;;      Temps:          0       0       0       0       0
  1210 ;;      Totals:         1       0       0       0       0
  1211 ;;Total ram usage:        1 bytes
  1212 ;; Hardware stack levels used: 1
  1213 ;; This function calls:
  1214 ;;		Nothing
  1215 ;; This function is called by:
  1216 ;;		_Lcd_Cmd
  1217 ;;		_Lcd_Init
  1218 ;;		_Lcd_Write_Char
  1219 ;; This function uses a non-reentrant model
  1220 ;;
  1221                           
  1222                           
  1223                           ;psect for function _Lcd_Port
  1224  0692                     _Lcd_Port:
  1225                           
  1226                           ;incstack = 0
  1227                           ; Regs used in _Lcd_Port: [wreg]
  1228                           ;Lcd_Port@a stored from wreg
  1229  0692  00F0               	movwf	Lcd_Port@a
  1230  0693                     l677:
  1231                           
  1232                           ;./lcd_16x4.h: 39: void Lcd_Port(char a);./lcd_16x4.h: 40: {;./lcd_16x4.h: 41:  if(a & 1
      +                          )
  1233  0693  1C70               	btfss	Lcd_Port@a,0
  1234  0694  2E96               	goto	u11
  1235  0695  2E97               	goto	u10
  1236  0696                     u11:
  1237  0696  2E9B               	goto	l29
  1238  0697                     u10:
  1239  0697                     l679:
  1240                           
  1241                           ;./lcd_16x4.h: 42:   RB3 = 1;
  1242  0697  1283               	bcf	3,5	;RP0=0, select bank0
  1243  0698  1303               	bcf	3,6	;RP1=0, select bank0
  1244  0699  1586               	bsf	6,3	;volatile
  1245  069A  2E9E               	goto	l30
  1246  069B                     l29:	
  1247                           ;./lcd_16x4.h: 43:  else
  1248                           
  1249                           
  1250                           ;./lcd_16x4.h: 44:   RB3 = 0;
  1251  069B  1283               	bcf	3,5	;RP0=0, select bank0
  1252  069C  1303               	bcf	3,6	;RP1=0, select bank0
  1253  069D  1186               	bcf	6,3	;volatile
  1254  069E                     l30:
  1255                           
  1256                           ;./lcd_16x4.h: 46:  if(a & 2)
  1257  069E  1CF0               	btfss	Lcd_Port@a,1
  1258  069F  2EA1               	goto	u21
  1259  06A0  2EA2               	goto	u20
  1260  06A1                     u21:
  1261  06A1  2EA4               	goto	l31
  1262  06A2                     u20:
  1263  06A2                     l681:
  1264                           
  1265                           ;./lcd_16x4.h: 47:   RB4 = 1;
  1266  06A2  1606               	bsf	6,4	;volatile
  1267  06A3  2EA5               	goto	l32
  1268  06A4                     l31:	
  1269                           ;./lcd_16x4.h: 48:  else
  1270                           
  1271                           
  1272                           ;./lcd_16x4.h: 49:   RB4 = 0;
  1273  06A4  1206               	bcf	6,4	;volatile
  1274  06A5                     l32:
  1275                           
  1276                           ;./lcd_16x4.h: 51:  if(a & 4)
  1277  06A5  1D70               	btfss	Lcd_Port@a,2
  1278  06A6  2EA8               	goto	u31
  1279  06A7  2EA9               	goto	u30
  1280  06A8                     u31:
  1281  06A8  2EAB               	goto	l33
  1282  06A9                     u30:
  1283  06A9                     l683:
  1284                           
  1285                           ;./lcd_16x4.h: 52:   RB5 = 1;
  1286  06A9  1686               	bsf	6,5	;volatile
  1287  06AA  2EAC               	goto	l34
  1288  06AB                     l33:	
  1289                           ;./lcd_16x4.h: 53:  else
  1290                           
  1291                           
  1292                           ;./lcd_16x4.h: 54:   RB5 = 0;
  1293  06AB  1286               	bcf	6,5	;volatile
  1294  06AC                     l34:
  1295                           
  1296                           ;./lcd_16x4.h: 56:  if(a & 8)
  1297  06AC  1DF0               	btfss	Lcd_Port@a,3
  1298  06AD  2EAF               	goto	u41
  1299  06AE  2EB0               	goto	u40
  1300  06AF                     u41:
  1301  06AF  2EB2               	goto	l35
  1302  06B0                     u40:
  1303  06B0                     l685:
  1304                           
  1305                           ;./lcd_16x4.h: 57:   RB6 = 1;
  1306  06B0  1706               	bsf	6,6	;volatile
  1307  06B1  2EB3               	goto	l37
  1308  06B2                     l35:	
  1309                           ;./lcd_16x4.h: 58:  else
  1310                           
  1311                           
  1312                           ;./lcd_16x4.h: 59:   RB6 = 0;
  1313  06B2  1306               	bcf	6,6	;volatile
  1314  06B3                     l37:
  1315  06B3  0008               	return
  1316  06B4                     __end_of_Lcd_Port:
  1317                           
  1318                           	psect	text8
  1319  0659                     __ptext8:	
  1320 ;; *************** function _ConfigPorts *****************
  1321 ;; Defined at:
  1322 ;;		line 54 in file "main.c"
  1323 ;; Parameters:    Size  Location     Type
  1324 ;;		None
  1325 ;; Auto vars:     Size  Location     Type
  1326 ;;		None
  1327 ;; Return value:  Size  Location     Type
  1328 ;;                  1    wreg      void 
  1329 ;; Registers used:
  1330 ;;		status,2
  1331 ;; Tracked objects:
  1332 ;;		On entry : 0/0
  1333 ;;		On exit  : 0/0
  1334 ;;		Unchanged: 0/0
  1335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1336 ;;      Params:         0       0       0       0       0
  1337 ;;      Locals:         0       0       0       0       0
  1338 ;;      Temps:          0       0       0       0       0
  1339 ;;      Totals:         0       0       0       0       0
  1340 ;;Total ram usage:        0 bytes
  1341 ;; Hardware stack levels used: 1
  1342 ;; This function calls:
  1343 ;;		Nothing
  1344 ;; This function is called by:
  1345 ;;		_main
  1346 ;; This function uses a non-reentrant model
  1347 ;;
  1348                           
  1349                           
  1350                           ;psect for function _ConfigPorts
  1351  0659                     _ConfigPorts:
  1352  0659                     l779:	
  1353                           ;incstack = 0
  1354                           ; Regs used in _ConfigPorts: [status,2]
  1355                           
  1356                           
  1357                           ;main.c: 56:     ANSEL = 0x00;
  1358  0659  1683               	bsf	3,5	;RP0=1, select bank1
  1359  065A  1303               	bcf	3,6	;RP1=0, select bank1
  1360  065B  019B               	clrf	27	;volatile
  1361                           
  1362                           ;main.c: 57:     PORTA = 0x00;
  1363  065C  1283               	bcf	3,5	;RP0=0, select bank0
  1364  065D  1303               	bcf	3,6	;RP1=0, select bank0
  1365  065E  0185               	clrf	5	;volatile
  1366                           
  1367                           ;main.c: 58:     PORTB = 0x00;
  1368  065F  0186               	clrf	6	;volatile
  1369  0660                     l781:
  1370                           
  1371                           ;main.c: 60:     TRISAbits.TRISA0 = 0b1;
  1372  0660  1683               	bsf	3,5	;RP0=1, select bank1
  1373  0661  1303               	bcf	3,6	;RP1=0, select bank1
  1374  0662  1405               	bsf	5,0	;volatile
  1375  0663                     l783:
  1376                           
  1377                           ;main.c: 61:     TRISAbits.TRISA1 = 0b1;
  1378  0663  1485               	bsf	5,1	;volatile
  1379  0664                     l785:
  1380                           
  1381                           ;main.c: 62:     TRISAbits.TRISA2 = 0b0;
  1382  0664  1105               	bcf	5,2	;volatile
  1383  0665                     l787:
  1384                           
  1385                           ;main.c: 63:     TRISAbits.TRISA3 = 0b0;
  1386  0665  1185               	bcf	5,3	;volatile
  1387  0666                     l789:
  1388                           
  1389                           ;main.c: 64:     TRISAbits.TRISA4 = 0b0;
  1390  0666  1205               	bcf	5,4	;volatile
  1391  0667                     l791:
  1392                           
  1393                           ;main.c: 65:     TRISAbits.TRISA5 = 0b1;
  1394  0667  1685               	bsf	5,5	;volatile
  1395  0668                     l793:
  1396                           
  1397                           ;main.c: 66:     TRISAbits.TRISA6 = 0b1;
  1398  0668  1705               	bsf	5,6	;volatile
  1399  0669                     l795:
  1400                           
  1401                           ;main.c: 67:     TRISAbits.TRISA7 = 0b1;
  1402  0669  1785               	bsf	5,7	;volatile
  1403  066A                     l797:
  1404                           
  1405                           ;main.c: 69:     TRISBbits.TRISB0 = 0b1;
  1406  066A  1406               	bsf	6,0	;volatile
  1407  066B                     l799:
  1408                           
  1409                           ;main.c: 70:     TRISBbits.TRISB1 = 0b0;
  1410  066B  1086               	bcf	6,1	;volatile
  1411  066C                     l801:
  1412                           
  1413                           ;main.c: 71:     TRISBbits.TRISB2 = 0b0;
  1414  066C  1106               	bcf	6,2	;volatile
  1415  066D                     l803:
  1416                           
  1417                           ;main.c: 72:     TRISBbits.TRISB3 = 0b0;
  1418  066D  1186               	bcf	6,3	;volatile
  1419  066E                     l805:
  1420                           
  1421                           ;main.c: 73:     TRISBbits.TRISB4 = 0b0;
  1422  066E  1206               	bcf	6,4	;volatile
  1423  066F                     l807:
  1424                           
  1425                           ;main.c: 74:     TRISBbits.TRISB5 = 0b0;
  1426  066F  1286               	bcf	6,5	;volatile
  1427  0670                     l809:
  1428                           
  1429                           ;main.c: 75:     TRISBbits.TRISB6 = 0b0;
  1430  0670  1306               	bcf	6,6	;volatile
  1431  0671                     l811:
  1432                           
  1433                           ;main.c: 76:     TRISBbits.TRISB7 = 0b1;
  1434  0671  1786               	bsf	6,7	;volatile
  1435  0672                     l77:
  1436  0672  0008               	return
  1437  0673                     __end_of_ConfigPorts:
  1438                           
  1439                           	psect	text9
  1440  0631                     __ptext9:	
  1441 ;; *************** function _ConfigOscillator *****************
  1442 ;; Defined at:
  1443 ;;		line 43 in file "main.c"
  1444 ;; Parameters:    Size  Location     Type
  1445 ;;		None
  1446 ;; Auto vars:     Size  Location     Type
  1447 ;;		None
  1448 ;; Return value:  Size  Location     Type
  1449 ;;                  1    wreg      void 
  1450 ;; Registers used:
  1451 ;;		wreg, status,2, status,0
  1452 ;; Tracked objects:
  1453 ;;		On entry : 0/0
  1454 ;;		On exit  : 0/0
  1455 ;;		Unchanged: 0/0
  1456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1457 ;;      Params:         0       0       0       0       0
  1458 ;;      Locals:         0       0       0       0       0
  1459 ;;      Temps:          0       0       0       0       0
  1460 ;;      Totals:         0       0       0       0       0
  1461 ;;Total ram usage:        0 bytes
  1462 ;; Hardware stack levels used: 1
  1463 ;; This function calls:
  1464 ;;		Nothing
  1465 ;; This function is called by:
  1466 ;;		_main
  1467 ;; This function uses a non-reentrant model
  1468 ;;
  1469                           
  1470                           
  1471                           ;psect for function _ConfigOscillator
  1472  0631                     _ConfigOscillator:
  1473  0631                     l777:	
  1474                           ;incstack = 0
  1475                           ; Regs used in _ConfigOscillator: [wreg+status,2+status,0]
  1476                           
  1477                           
  1478                           ;main.c: 45:     OSCCONbits.IRCF = 0b111;
  1479  0631  3070               	movlw	112
  1480  0632  1683               	bsf	3,5	;RP0=1, select bank1
  1481  0633  1303               	bcf	3,6	;RP1=0, select bank1
  1482  0634  048F               	iorwf	15,f	;volatile
  1483                           
  1484                           ;main.c: 46:     OSCCONbits.SCS = 0b00;
  1485  0635  30FC               	movlw	-4
  1486  0636  058F               	andwf	15,f	;volatile
  1487  0637                     l74:
  1488  0637  0008               	return
  1489  0638                     __end_of_ConfigOscillator:
  1490  007E                     btemp	set	126	;btemp
  1491  007E                     wtemp0	set	126
  1492                           
  1493                           	psect	config
  1494                           
  1495                           ;Config register CONFIG1 @ 0x2007
  1496                           ;	Oscillator Selection bits
  1497                           ;	FOSC = INTOSCIO, INTRC oscillator; port I/O function on both RA6/OSC2/CLKO pin and RA7
      +                          /OSC1/CLKI pin
  1498                           ;	Watchdog Timer Enable bit
  1499                           ;	WDTE = OFF, WDT disabled
  1500                           ;	Power-up Timer Enable bit
  1501                           ;	PWRTE = ON, PWRT enabled
  1502                           ;	RA5/MCLR/VPP Pin Function Select bit
  1503                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital I/O, MCLR internally tied to VDD
  1504                           ;	Brown-out Reset Enable bit
  1505                           ;	BOREN = ON, BOR enabled
  1506                           ;	Low-Voltage Programming Enable bit
  1507                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1508                           ;	Data EE Memory Code Protection bit
  1509                           ;	CPD = OFF, Code protection off
  1510                           ;	Flash Program Memory Write Enable bits
  1511                           ;	WRT = OFF, Write protection off
  1512                           ;	In-Circuit Debugger Mode bit
  1513                           ;	DEBUG = 0x1, unprogrammed default
  1514                           ;	CCP1 Pin Selection bit
  1515                           ;	CCPMX = RB0, CCP1 function on RB0
  1516                           ;	Flash Program Memory Code Protection bit
  1517                           ;	CP = OFF, Code protection off
  1518  2007                     	org	8199
  1519  2007  3F50               	dw	16208
  1520                           
  1521                           ;Config register CONFIG2 @ 0x2008
  1522                           ;	Fail-Safe Clock Monitor Enable bit
  1523                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1524                           ;	Internal External Switchover bit
  1525                           ;	IESO = OFF, Internal External Switchover mode disabled
  1526  2008                     	org	8200
  1527  2008  3FFC               	dw	16380

Data Sizes:
    Strings     22
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 11
		 -> STR_2(CODE[11]), STR_1(CODE[11]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    1253
                                             11 COMMON     3     3      0
                   _ConfigOscillator
                        _ConfigPorts
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     3     3      0     276
                                              5 COMMON     3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     120
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     767
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     135
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0      75
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      60
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ConfigPorts                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigOscillator                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigOscillator
   _ConfigPorts
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Tue Aug 10 11:49:17 2021

                        pc 0002                         l30 069E                         l31 06A4  
                       l32 06A5                         l40 0658                         l33 06AB  
                       l34 06AC                         l35 06B2                         l43 0640  
                       l37 06B3                         l29 069B                         l53 07FC  
                       l56 0767                         l49 07FC                         l65 0691  
                       l74 0637                         l82 0721                         l59 06E8  
                       l83 0721                         l77 0672                         u10 0697  
                       u11 0696                         u20 06A2                         u21 06A1  
                       u30 06A9                         u31 06A8                         u40 06B0  
                       u41 06AF                         u55 06C5                         fsr 0004  
                      l701 06C2                        l711 06DD                        l703 06CE  
                      l801 066C                        l713 06E0                        l705 06D1  
                      l811 0671                        l803 066D                        l715 06E5  
                      l707 06D6                        l805 066E                        l717 0638  
                      l709 06D9                        l807 066F                        l809 0670  
                      l681 06A2                        l761 0728                        l841 0784  
                      l683 06A9                        l691 0649                        l763 0731  
                      l851 07A9                        l843 0788                        l835 0769  
                      l781 0660                        l685 06B0                        l677 0693  
                      l693 064C                        l765 073E                        l861 07CE  
                      l853 07AD                        l837 076E                        l845 078D  
                      l791 0667                        l783 0663                        l679 0697  
                      l695 0655                        l687 0642                        l767 0742  
                      l759 0724                        l871 07F3                        l863 07D2  
                      l847 0793                        l855 07B2                        l839 077F  
                      l777 0631                        l793 0668                        l785 0664  
                      l689 0645                        l873 07F7                        l857 07B8  
                      l865 07D7                        l849 07A4                        l697 06B5  
                      l881 0686                        l795 0669                        l787 0665  
                      l779 0659                        l867 07DD                        l859 07C9  
                      l699 06BF                        l875 0674                        l891 06F5  
                      l883 06E9                        l797 066A                        l789 0666  
                      l869 07EE                        l877 0677                        l893 06FB  
                      l885 06EC                        l799 066B                        l879 0680  
                      l895 06FF                        l887 06EF                        l897 0708  
                      l889 06F2                        l899 0714                        _RB1 0031  
                      _RB2 0032                        _RB3 0033                        _RB4 0034  
                      _RB5 0035                        _RB6 0036                        u210 07DD  
                      u211 07DC                        u205 07C0                        u150 076E  
                      u230 0691                        u151 076D                        u231 0690  
                      u225 07E5                        u170 0793                        u307 0744  
                      u171 0792                        u317 0650                        u165 0776  
                      u190 07B8                        u191 07B7                        u247 0703  
                      u185 079B                        u257 071A                        u267 06D3  
                      u277 06E2                        u287 072C                        u297 0739  
                      fsr0 0004                       STR_1 0008                       STR_2 0013  
        ?_Lcd_Write_String 0070                       _main 06E9                       btemp 007E  
                     start 0000         ??_Lcd_Write_String 0075            __end_of_Lcd_Cmd 0659  
      __end_of_ConfigPorts 0673                      ?_main 0070                      _ANSEL 009B  
                    _PORTA 0005                      _PORTB 0006    __size_of_Lcd_Set_Cursor 0095  
                    pclath 000A                      status 0003                      wtemp0 007E  
         __end_of_Lcd_Init 0768           __end_of_Lcd_Port 06B4            __initialization 07FD  
             __end_of_main 0724                     ??_main 007B         __size_of_Lcd_Clear 0009  
                ??_Lcd_Cmd 0071    __size_of_Lcd_Write_Char 0035                _ConfigPorts 0659  
 __end_of_ConfigOscillator 0638            Lcd_Set_Cursor@a 0074            Lcd_Set_Cursor@b 0077  
          Lcd_Set_Cursor@y 0079            Lcd_Set_Cursor@z 0078    __end_of__initialization 07FD  
        __end_of_Lcd_Clear 0641             __pcstackCOMMON 0070             _Lcd_Set_Cursor 0768  
                ?_Lcd_Init 0070                  ?_Lcd_Port 0070                 __pmaintext 06E9  
__size_of_Lcd_Write_String 001F     __end_of_Lcd_Set_Cursor 07FD                 ??_Lcd_Init 0074  
               ??_Lcd_Port 0070                 __stringtab 0002             _Lcd_Write_Char 06B4  
                  _Lcd_Cmd 0641            ?_Lcd_Set_Cursor 0074                    __ptext1 0673  
                  __ptext2 06B4                    __ptext3 0768                    __ptext4 0724  
                  __ptext5 0638                    __ptext6 0641                    __ptext7 0692  
                  __ptext8 0659                    __ptext9 0631     __end_of_Lcd_Write_Char 06E9  
     end_of_initialization 07FD               ?_ConfigPorts 0070          ?_ConfigOscillator 0070  
                Lcd_Port@a 0070         ??_ConfigOscillator 0070                  _TRISAbits 0085  
                _TRISBbits 0086            ?_Lcd_Write_Char 0070          Lcd_Write_String@a 0077  
        Lcd_Write_String@i 0075                  _Lcd_Clear 0638           _Lcd_Write_String 0673  
      start_initialization 07FD          __size_of_Lcd_Init 0044          __size_of_Lcd_Port 0022  
               ?_Lcd_Clear 0070            Lcd_Write_Char@a 0074            Lcd_Write_Char@y 0073  
                ___latbits 0001                   ?_Lcd_Cmd 0070       __size_of_ConfigPorts 001A  
         ??_Lcd_Set_Cursor 0075                  __pstrings 0002                   Lcd_Cmd@a 0073  
              ??_Lcd_Clear 0074                __stringbase 0007           ??_Lcd_Write_Char 0071  
__size_of_ConfigOscillator 0007                   _Lcd_Init 0724                   _Lcd_Port 0692  
 __end_of_Lcd_Write_String 0692           __size_of_Lcd_Cmd 0018         __end_of__stringtab 0008  
            __size_of_main 003B         Lcd_Write_Char@temp 0072                  stringcode 0002  
               _OSCCONbits 008F         Lcd_Set_Cursor@temp 007A                   stringdir 0002  
                 stringtab 0002           _ConfigOscillator 0631              ??_ConfigPorts 0070  
