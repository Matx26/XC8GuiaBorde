

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Sat Aug 21 08:24:41 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F88
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    11                           	psect	text2,local,class=CODE,merge=1,delta=2,group=3
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	psect	text13,local,class=CODE,merge=1,delta=2
    23                           	psect	text14,local,class=CODE,merge=1,delta=2
    24                           	psect	text15,local,class=CODE,merge=1,delta=2
    25                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    26                           	dabs	1,0x7E,2
    27  0000                     
    28                           ; Version 2.20
    29                           ; Generated 12/02/2020 GMT
    30                           ; 
    31                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC16F88 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  0006                     	;# 
    69  000A                     	;# 
    70  000B                     	;# 
    71  000C                     	;# 
    72  000D                     	;# 
    73  000E                     	;# 
    74  000E                     	;# 
    75  000F                     	;# 
    76  0010                     	;# 
    77  0011                     	;# 
    78  0012                     	;# 
    79  0013                     	;# 
    80  0014                     	;# 
    81  0015                     	;# 
    82  0015                     	;# 
    83  0016                     	;# 
    84  0017                     	;# 
    85  0018                     	;# 
    86  0019                     	;# 
    87  001A                     	;# 
    88  001E                     	;# 
    89  001F                     	;# 
    90  0081                     	;# 
    91  0085                     	;# 
    92  0086                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  008F                     	;# 
    97  0090                     	;# 
    98  0092                     	;# 
    99  0093                     	;# 
   100  0094                     	;# 
   101  0098                     	;# 
   102  0099                     	;# 
   103  009B                     	;# 
   104  009C                     	;# 
   105  009D                     	;# 
   106  009E                     	;# 
   107  009F                     	;# 
   108  0105                     	;# 
   109  010C                     	;# 
   110  010D                     	;# 
   111  010E                     	;# 
   112  010F                     	;# 
   113  018C                     	;# 
   114  018D                     	;# 
   115  0000                     	;# 
   116  0001                     	;# 
   117  0002                     	;# 
   118  0003                     	;# 
   119  0004                     	;# 
   120  0005                     	;# 
   121  0006                     	;# 
   122  000A                     	;# 
   123  000B                     	;# 
   124  000C                     	;# 
   125  000D                     	;# 
   126  000E                     	;# 
   127  000E                     	;# 
   128  000F                     	;# 
   129  0010                     	;# 
   130  0011                     	;# 
   131  0012                     	;# 
   132  0013                     	;# 
   133  0014                     	;# 
   134  0015                     	;# 
   135  0015                     	;# 
   136  0016                     	;# 
   137  0017                     	;# 
   138  0018                     	;# 
   139  0019                     	;# 
   140  001A                     	;# 
   141  001E                     	;# 
   142  001F                     	;# 
   143  0081                     	;# 
   144  0085                     	;# 
   145  0086                     	;# 
   146  008C                     	;# 
   147  008D                     	;# 
   148  008E                     	;# 
   149  008F                     	;# 
   150  0090                     	;# 
   151  0092                     	;# 
   152  0093                     	;# 
   153  0094                     	;# 
   154  0098                     	;# 
   155  0099                     	;# 
   156  009B                     	;# 
   157  009C                     	;# 
   158  009D                     	;# 
   159  009E                     	;# 
   160  009F                     	;# 
   161  0105                     	;# 
   162  010C                     	;# 
   163  010D                     	;# 
   164  010E                     	;# 
   165  010F                     	;# 
   166  018C                     	;# 
   167  018D                     	;# 
   168                           
   169                           	psect	strings
   170  0002                     __pstrings:
   171  0002                     stringtab:
   172  0002                     __stringtab:
   173                           
   174                           ;	String table - string pointers are 1 byte each
   175  0002  1BFF               	btfsc	btemp+1,7
   176  0003  280C               	ljmp	stringcode
   177  0004  1383               	bcf	3,7
   178  0005  187F               	btfsc	btemp+1,0
   179  0006  1783               	bsf	3,7
   180  0007  0800               	movf	0,w
   181  0008  0A84               	incf	4,f
   182  0009  1903               	skipnz
   183  000A  0AFF               	incf	btemp+1,f
   184  000B  0008               	return
   185  000C                     stringcode:
   186  000C                     stringdir:
   187  000C  3000               	movlw	high stringdir
   188  000D  008A               	movwf	10
   189  000E  0804               	movf	4,w
   190  000F  0A84               	incf	4,f
   191  0010  0782               	addwf	2,f
   192  0011                     __stringbase:
   193  0011  3400               	retlw	0
   194  0012                     __end_of__stringtab:
   195  0012                     _dpowers:
   196  0012  3401               	retlw	1
   197  0013  3400               	retlw	0
   198  0014  340A               	retlw	10
   199  0015  3400               	retlw	0
   200  0016  3464               	retlw	100
   201  0017  3400               	retlw	0
   202  0018  34E8               	retlw	232
   203  0019  3403               	retlw	3
   204  001A  3410               	retlw	16
   205  001B  3427               	retlw	39
   206  001C                     __end_of_dpowers:
   207  0006                     _PORTBbits	set	6
   208  0005                     _PORTAbits	set	5
   209  000B                     _INTCONbits	set	11
   210  0006                     _PORTB	set	6
   211  0005                     _PORTA	set	5
   212  0032                     _RB2	set	50
   213  0031                     _RB1	set	49
   214  0036                     _RB6	set	54
   215  0035                     _RB5	set	53
   216  0034                     _RB4	set	52
   217  0033                     _RB3	set	51
   218  0081                     _OPTION_REGbits	set	129
   219  0086                     _TRISBbits	set	134
   220  0085                     _TRISAbits	set	133
   221  009B                     _ANSEL	set	155
   222  008F                     _OSCCONbits	set	143
   223  001C                     STR_3:
   224  001C  3453               	retlw	83	;'S'
   225  001D  3474               	retlw	116	;'t'
   226  001E  3465               	retlw	101	;'e'
   227  001F  3470               	retlw	112	;'p'
   228  0020  3473               	retlw	115	;'s'
   229  0021  3420               	retlw	32	;' '
   230  0022  3420               	retlw	32	;' '
   231  0023  342D               	retlw	45	;'-'
   232  0024  343E               	retlw	62	;'>'
   233  0025  3425               	retlw	37	;'%'
   234  0026  3433               	retlw	51	;'3'
   235  0027  3464               	retlw	100	;'d'
   236  0028  345B               	retlw	91	;'['
   237  0029  3475               	retlw	117	;'u'
   238  002A  346E               	retlw	110	;'n'
   239  002B  345D               	retlw	93	;']'
   240  002C  3400               	retlw	0
   241  002D                     STR_4:
   242  002D  3444               	retlw	68	;'D'
   243  002E  3465               	retlw	101	;'e'
   244  002F  346C               	retlw	108	;'l'
   245  0030  3461               	retlw	97	;'a'
   246  0031  3479               	retlw	121	;'y'
   247  0032  3420               	retlw	32	;' '
   248  0033  3420               	retlw	32	;' '
   249  0034  3420               	retlw	32	;' '
   250  0035  3420               	retlw	32	;' '
   251  0036  3425               	retlw	37	;'%'
   252  0037  3433               	retlw	51	;'3'
   253  0038  3464               	retlw	100	;'d'
   254  0039  345B               	retlw	91	;'['
   255  003A  346D               	retlw	109	;'m'
   256  003B  3473               	retlw	115	;'s'
   257  003C  345D               	retlw	93	;']'
   258  003D  3400               	retlw	0
   259  003E                     STR_1:
   260  003E  3448               	retlw	72	;'H'
   261  003F  346F               	retlw	111	;'o'
   262  0040  346C               	retlw	108	;'l'
   263  0041  3461               	retlw	97	;'a'
   264  0042  3420               	retlw	32	;' '
   265  0043  344D               	retlw	77	;'M'
   266  0044  3475               	retlw	117	;'u'
   267  0045  346E               	retlw	110	;'n'
   268  0046  3464               	retlw	100	;'d'
   269  0047  346F               	retlw	111	;'o'
   270  0048  3400               	retlw	0
   271  0049                     STR_2:
   272  0049  3453               	retlw	83	;'S'
   273  004A  346F               	retlw	111	;'o'
   274  004B  3479               	retlw	121	;'y'
   275  004C  3420               	retlw	32	;' '
   276  004D  344D               	retlw	77	;'M'
   277  004E  3461               	retlw	97	;'a'
   278  004F  3474               	retlw	116	;'t'
   279  0050  3469               	retlw	105	;'i'
   280  0051  3461               	retlw	97	;'a'
   281  0052  3473               	retlw	115	;'s'
   282  0053  3400               	retlw	0
   283  0054                     STR_5:
   284  0054  3420               	retlw	32	;' '
   285  0055  3420               	retlw	32	;' '
   286  0056  3400               	retlw	0
   287  0057                     STR_6:
   288  0057  342D               	retlw	45	;'-'
   289  0058  343E               	retlw	62	;'>'
   290  0059  3400               	retlw	0
   291  0054                     
   292                           	psect	cinit
   293  07F6                     start_initialization:	
   294                           ; #config settings
   295                           
   296  07F6                     __initialization:
   297                           
   298                           ; Clear objects allocated to BANK0
   299  07F6  1283               	bcf	3,5	;RP0=0, select bank0
   300  07F7  1303               	bcf	3,6	;RP1=0, select bank0
   301  07F8  01CD               	clrf	__pbssBANK0& (0+127)
   302  07F9  01CE               	clrf	(__pbssBANK0+1)& (0+127)
   303  07FA  01CF               	clrf	(__pbssBANK0+2)& (0+127)
   304  07FB  01D0               	clrf	(__pbssBANK0+3)& (0+127)
   305  07FC  01D1               	clrf	(__pbssBANK0+4)& (0+127)
   306  07FD                     end_of_initialization:	
   307                           ;End of C runtime variable initialization code
   308                           
   309  07FD                     __end_of__initialization:
   310  07FD  0183               	clrf	3
   311  07FE  118A  2E54         	ljmp	_main	;jump to C main() function
   312                           
   313                           	psect	bssBANK0
   314  004D                     __pbssBANK0:
   315  004D                     _CountSteps:
   316  004D                     	ds	2
   317  004F                     _AutMan:
   318  004F                     	ds	2
   319  0051                     _FotoCelula:
   320  0051                     	ds	1
   321                           
   322                           	psect	cstackCOMMON
   323  0070                     __pcstackCOMMON:
   324  0070                     ?_isdigit:
   325  0070                     ??_isdigit:	
   326                           ; 1 bit 
   327                           
   328  0070                     ?_Lcd_Port:	
   329                           ; 1 bytes @ 0x0
   330                           
   331  0070                     ??_Lcd_Port:	
   332                           ; 1 bytes @ 0x0
   333                           
   334  0070                     ?_Lcd_Cmd:	
   335                           ; 1 bytes @ 0x0
   336                           
   337  0070                     ?_Lcd_Clear:	
   338                           ; 1 bytes @ 0x0
   339                           
   340  0070                     ?_Lcd_Init:	
   341                           ; 1 bytes @ 0x0
   342                           
   343  0070                     ?_Lcd_Write_Char:	
   344                           ; 1 bytes @ 0x0
   345                           
   346  0070                     ?_ConfigOscillator:	
   347                           ; 1 bytes @ 0x0
   348                           
   349  0070                     ??_ConfigOscillator:	
   350                           ; 1 bytes @ 0x0
   351                           
   352  0070                     ?_ConfigPorts:	
   353                           ; 1 bytes @ 0x0
   354                           
   355  0070                     ??_ConfigPorts:	
   356                           ; 1 bytes @ 0x0
   357                           
   358  0070                     ?_Retardo:	
   359                           ; 1 bytes @ 0x0
   360                           
   361  0070                     ??_Retardo:	
   362                           ; 1 bytes @ 0x0
   363                           
   364  0070                     ?_main:	
   365                           ; 1 bytes @ 0x0
   366                           
   367  0070                     ?___wmul:	
   368                           ; 1 bytes @ 0x0
   369                           
   370  0070                     ?___lwdiv:	
   371                           ; 2 bytes @ 0x0
   372                           
   373  0070                     Lcd_Port@a:	
   374                           ; 2 bytes @ 0x0
   375                           
   376  0070                     _isdigit$780:	
   377                           ; 1 bytes @ 0x0
   378                           
   379  0070                     ___wmul@multiplier:	
   380                           ; 1 bytes @ 0x0
   381                           
   382  0070                     ___lwdiv@divisor:	
   383                           ; 2 bytes @ 0x0
   384                           
   385                           
   386                           ; 2 bytes @ 0x0
   387  0070                     	ds	1
   388  0071                     ??_Lcd_Cmd:
   389  0071                     ??_Lcd_Write_Char:	
   390                           ; 1 bytes @ 0x1
   391                           
   392  0071                     isdigit@c:	
   393                           ; 1 bytes @ 0x1
   394                           
   395                           
   396                           ; 1 bytes @ 0x1
   397  0071                     	ds	1
   398  0072                     Lcd_Write_Char@temp:
   399  0072                     ___wmul@multiplicand:	
   400                           ; 1 bytes @ 0x2
   401                           
   402  0072                     ___lwdiv@dividend:	
   403                           ; 2 bytes @ 0x2
   404                           
   405                           
   406                           ; 2 bytes @ 0x2
   407  0072                     	ds	1
   408  0073                     Lcd_Cmd@a:
   409  0073                     Lcd_Write_Char@y:	
   410                           ; 1 bytes @ 0x3
   411                           
   412                           
   413                           ; 1 bytes @ 0x3
   414  0073                     	ds	1
   415  0074                     ??_Lcd_Clear:
   416  0074                     ?_Lcd_Set_Cursor:	
   417                           ; 1 bytes @ 0x4
   418                           
   419  0074                     ??_Lcd_Init:	
   420                           ; 1 bytes @ 0x4
   421                           
   422  0074                     ??___wmul:	
   423                           ; 1 bytes @ 0x4
   424                           
   425  0074                     ??___lwdiv:	
   426                           ; 1 bytes @ 0x4
   427                           
   428  0074                     Lcd_Set_Cursor@a:	
   429                           ; 1 bytes @ 0x4
   430                           
   431  0074                     Lcd_Write_Char@a:	
   432                           ; 1 bytes @ 0x4
   433                           
   434  0074                     ___wmul@product:	
   435                           ; 1 bytes @ 0x4
   436                           
   437                           
   438                           ; 2 bytes @ 0x4
   439  0074                     	ds	1
   440  0075                     ??_Lcd_Set_Cursor:
   441  0075                     ?_Lcd_Write_String:	
   442                           ; 1 bytes @ 0x5
   443                           
   444  0075                     Lcd_Write_String@a:	
   445                           ; 1 bytes @ 0x5
   446                           
   447  0075                     ___lwdiv@quotient:	
   448                           ; 2 bytes @ 0x5
   449                           
   450                           
   451                           ; 2 bytes @ 0x5
   452  0075                     	ds	2
   453  0077                     ??_Lcd_Write_String:
   454  0077                     Lcd_Set_Cursor@b:	
   455                           ; 1 bytes @ 0x7
   456                           
   457  0077                     ___lwdiv@counter:	
   458                           ; 1 bytes @ 0x7
   459                           
   460                           
   461                           ; 1 bytes @ 0x7
   462  0077                     	ds	1
   463  0078                     ?___lwmod:
   464  0078                     Lcd_Set_Cursor@z:	
   465                           ; 2 bytes @ 0x8
   466                           
   467  0078                     ___lwmod@divisor:	
   468                           ; 1 bytes @ 0x8
   469                           
   470                           
   471                           ; 2 bytes @ 0x8
   472  0078                     	ds	1
   473  0079                     Lcd_Set_Cursor@y:
   474                           
   475                           ; 1 bytes @ 0x9
   476  0079                     	ds	1
   477  007A                     Lcd_Set_Cursor@temp:
   478  007A                     Lcd_Write_String@i:	
   479                           ; 1 bytes @ 0xA
   480                           
   481  007A                     ___lwmod@dividend:	
   482                           ; 2 bytes @ 0xA
   483                           
   484                           
   485                           ; 2 bytes @ 0xA
   486  007A                     	ds	2
   487  007C                     ??___lwmod:
   488                           
   489                           ; 1 bytes @ 0xC
   490  007C                     	ds	1
   491  007D                     ___lwmod@counter:
   492                           
   493                           ; 1 bytes @ 0xD
   494  007D                     	ds	1
   495                           
   496                           	psect	cstackBANK0
   497  0020                     __pcstackBANK0:
   498  0020                     ?_sprintf:
   499  0020                     sprintf@f:	
   500                           ; 2 bytes @ 0x0
   501                           
   502                           
   503                           ; 1 bytes @ 0x0
   504  0020                     	ds	3
   505  0023                     ??_sprintf:
   506                           
   507                           ; 1 bytes @ 0x3
   508  0023                     	ds	3
   509  0026                     sprintf@ap:
   510                           
   511                           ; 1 bytes @ 0x6
   512  0026                     	ds	1
   513  0027                     sprintf@prec:
   514                           
   515                           ; 1 bytes @ 0x7
   516  0027                     	ds	1
   517  0028                     sprintf@flag:
   518                           
   519                           ; 1 bytes @ 0x8
   520  0028                     	ds	1
   521  0029                     sprintf@val:
   522                           
   523                           ; 2 bytes @ 0x9
   524  0029                     	ds	2
   525  002B                     sprintf@width:
   526                           
   527                           ; 2 bytes @ 0xB
   528  002B                     	ds	2
   529  002D                     sprintf@sp:
   530                           
   531                           ; 1 bytes @ 0xD
   532  002D                     	ds	1
   533  002E                     sprintf@c:
   534                           
   535                           ; 1 bytes @ 0xE
   536  002E                     	ds	1
   537  002F                     ??_main:
   538                           
   539                           ; 1 bytes @ 0xF
   540  002F                     	ds	3
   541  0032                     main@s:
   542                           
   543                           ; 20 bytes @ 0x12
   544  0032                     	ds	20
   545  0046                     main@Count_Menu:
   546                           
   547                           ; 2 bytes @ 0x26
   548  0046                     	ds	2
   549  0048                     main@menu:
   550                           
   551                           ; 1 bytes @ 0x28
   552  0048                     	ds	1
   553  0049                     main@Count:
   554                           
   555                           ; 2 bytes @ 0x29
   556  0049                     	ds	2
   557  004B                     main@Steps:
   558                           
   559                           ; 2 bytes @ 0x2B
   560  004B                     	ds	2
   561                           
   562                           	psect	maintext
   563  0654                     __pmaintext:	
   564 ;;
   565 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   566 ;;
   567 ;; *************** function _main *****************
   568 ;; Defined at:
   569 ;;		line 111 in file "main.c"
   570 ;; Parameters:    Size  Location     Type
   571 ;;		None
   572 ;; Auto vars:     Size  Location     Type
   573 ;;  s              20   18[BANK0 ] unsigned char [20]
   574 ;;  Steps           2   43[BANK0 ] int 
   575 ;;  Count           2   41[BANK0 ] int 
   576 ;;  Count_Menu      2   38[BANK0 ] int 
   577 ;;  Delay           2    0        int 
   578 ;;  menu            1   40[BANK0 ] unsigned char 
   579 ;; Return value:  Size  Location     Type
   580 ;;                  1    wreg      void 
   581 ;; Registers used:
   582 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   583 ;; Tracked objects:
   584 ;;		On entry : B00/0
   585 ;;		On exit  : 0/0
   586 ;;		Unchanged: 0/0
   587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   588 ;;      Params:         0       0       0       0       0
   589 ;;      Locals:         0      27       0       0       0
   590 ;;      Temps:          0       3       0       0       0
   591 ;;      Totals:         0      30       0       0       0
   592 ;;Total ram usage:       30 bytes
   593 ;; Hardware stack levels required when called: 3
   594 ;; This function calls:
   595 ;;		_ConfigOscillator
   596 ;;		_ConfigPorts
   597 ;;		_Lcd_Clear
   598 ;;		_Lcd_Init
   599 ;;		_Lcd_Set_Cursor
   600 ;;		_Lcd_Write_String
   601 ;;		_Retardo
   602 ;;		_sprintf
   603 ;; This function is called by:
   604 ;;		Startup code after reset
   605 ;; This function uses a non-reentrant model
   606 ;;
   607                           
   608                           
   609                           ;psect for function _main
   610  0654                     _main:
   611  0654                     l1549:	
   612                           ;incstack = 0
   613                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   614                           
   615                           
   616                           ;main.c: 114:     int Count = 0, Count_Menu = 0;
   617  0654  1283               	bcf	3,5	;RP0=0, select bank0
   618  0655  1303               	bcf	3,6	;RP1=0, select bank0
   619  0656  01C9               	clrf	main@Count
   620  0657  01CA               	clrf	main@Count+1
   621  0658  01C6               	clrf	main@Count_Menu
   622  0659  01C7               	clrf	main@Count_Menu+1
   623  065A                     l1551:
   624                           
   625                           ;main.c: 115:     int Steps = 50;
   626  065A  3032               	movlw	50
   627  065B  00CB               	movwf	main@Steps
   628  065C  3000               	movlw	0
   629  065D  00CC               	movwf	main@Steps+1
   630  065E                     l1553:
   631                           
   632                           ;main.c: 117:     char s[20];;main.c: 118:     char menu = 0;
   633  065E  01C8               	clrf	main@menu
   634  065F                     l1555:
   635                           
   636                           ;main.c: 122:     ConfigOscillator();
   637  065F  118A  227D  118A   	fcall	_ConfigOscillator
   638  0662                     l1557:
   639                           
   640                           ;main.c: 123:     ConfigPorts();
   641  0662  118A  22C1  118A   	fcall	_ConfigPorts
   642  0665                     l1559:
   643                           
   644                           ;main.c: 124:     Lcd_Init();
   645  0665  118A  23CD  118A   	fcall	_Lcd_Init
   646  0668                     l1561:
   647                           
   648                           ;main.c: 125:     Lcd_Clear();
   649  0668  118A  2284  118A   	fcall	_Lcd_Clear
   650  066B                     l1563:
   651                           
   652                           ;main.c: 128:     Lcd_Set_Cursor(1,1);
   653  066B  01F4               	clrf	Lcd_Set_Cursor@a
   654  066C  0AF4               	incf	Lcd_Set_Cursor@a,f
   655  066D  3001               	movlw	1
   656  066E  118A  2455  118A   	fcall	_Lcd_Set_Cursor
   657  0671                     l1565:
   658                           
   659                           ;main.c: 129:     Lcd_Write_String("Hola Mundo");
   660  0671  302D               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   661  0672  00F5               	movwf	Lcd_Write_String@a
   662  0673  3080               	movlw	128
   663  0674  00F6               	movwf	Lcd_Write_String@a+1
   664  0675  118A  2391  118A   	fcall	_Lcd_Write_String
   665  0678                     l1567:
   666                           
   667                           ;main.c: 130:     Lcd_Set_Cursor(1,2);
   668  0678  3002               	movlw	2
   669  0679  1283               	bcf	3,5	;RP0=0, select bank0
   670  067A  1303               	bcf	3,6	;RP1=0, select bank0
   671  067B  00AF               	movwf	??_main
   672  067C  082F               	movf	??_main,w
   673  067D  00F4               	movwf	Lcd_Set_Cursor@a
   674  067E  3001               	movlw	1
   675  067F  118A  2455  118A   	fcall	_Lcd_Set_Cursor
   676  0682                     l1569:
   677                           
   678                           ;main.c: 131:     Lcd_Write_String("Soy Matias");
   679  0682  3038               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   680  0683  00F5               	movwf	Lcd_Write_String@a
   681  0684  3080               	movlw	128
   682  0685  00F6               	movwf	Lcd_Write_String@a+1
   683  0686  118A  2391  118A   	fcall	_Lcd_Write_String
   684  0689                     l1571:
   685                           
   686                           ;main.c: 132:     _delay((unsigned long)((1000)*(2000000/4000.0)));
   687  0689  3003               	movlw	3
   688  068A  1283               	bcf	3,5	;RP0=0, select bank0
   689  068B  1303               	bcf	3,6	;RP1=0, select bank0
   690  068C  00B1               	movwf	??_main+2
   691  068D  308A               	movlw	138
   692  068E  00B0               	movwf	??_main+1
   693  068F  3055               	movlw	85
   694  0690  00AF               	movwf	??_main
   695  0691                     u1297:
   696  0691  0BAF               	decfsz	??_main,f
   697  0692  2E91               	goto	u1297
   698  0693  0BB0               	decfsz	??_main+1,f
   699  0694  2E91               	goto	u1297
   700  0695  0BB1               	decfsz	??_main+2,f
   701  0696  2E91               	goto	u1297
   702  0697                     l1573:
   703                           
   704                           ;main.c: 134:     sprintf(s,"Steps  ->%3d[un]",Steps);
   705  0697  300B               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   706  0698  1283               	bcf	3,5	;RP0=0, select bank0
   707  0699  1303               	bcf	3,6	;RP1=0, select bank0
   708  069A  00AF               	movwf	??_main
   709  069B  082F               	movf	??_main,w
   710  069C  00A0               	movwf	sprintf@f
   711  069D  3032               	movlw	50
   712  069E  00A1               	movwf	?_sprintf+1
   713  069F  3000               	movlw	0
   714  06A0  00A2               	movwf	?_sprintf+2
   715  06A1  3032               	movlw	(low (main@s| 0))& (0+255)
   716  06A2  118A  24EA  118A   	fcall	_sprintf
   717  06A5                     l1575:
   718                           
   719                           ;main.c: 135:     Lcd_Set_Cursor(1,1);
   720  06A5  01F4               	clrf	Lcd_Set_Cursor@a
   721  06A6  0AF4               	incf	Lcd_Set_Cursor@a,f
   722  06A7  3001               	movlw	1
   723  06A8  118A  2455  118A   	fcall	_Lcd_Set_Cursor
   724  06AB                     l1577:
   725                           
   726                           ;main.c: 136:     Lcd_Write_String(s);
   727  06AB  3032               	movlw	(low (main@s| 0))& (0+255)
   728  06AC  00F5               	movwf	Lcd_Write_String@a
   729  06AD  3000               	movlw	0
   730  06AE  00F6               	movwf	Lcd_Write_String@a+1
   731  06AF  118A  2391  118A   	fcall	_Lcd_Write_String
   732  06B2                     l1579:
   733                           
   734                           ;main.c: 137:     sprintf(s,"Delay    %3d[ms]",Delay);
   735  06B2  301C               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   736  06B3  1283               	bcf	3,5	;RP0=0, select bank0
   737  06B4  1303               	bcf	3,6	;RP1=0, select bank0
   738  06B5  00AF               	movwf	??_main
   739  06B6  082F               	movf	??_main,w
   740  06B7  00A0               	movwf	sprintf@f
   741  06B8  301E               	movlw	30
   742  06B9  00A1               	movwf	?_sprintf+1
   743  06BA  3000               	movlw	0
   744  06BB  00A2               	movwf	?_sprintf+2
   745  06BC  3032               	movlw	(low (main@s| 0))& (0+255)
   746  06BD  118A  24EA  118A   	fcall	_sprintf
   747  06C0                     l1581:
   748                           
   749                           ;main.c: 138:     Lcd_Set_Cursor(1,2);
   750  06C0  3002               	movlw	2
   751  06C1  1283               	bcf	3,5	;RP0=0, select bank0
   752  06C2  1303               	bcf	3,6	;RP1=0, select bank0
   753  06C3  00AF               	movwf	??_main
   754  06C4  082F               	movf	??_main,w
   755  06C5  00F4               	movwf	Lcd_Set_Cursor@a
   756  06C6  3001               	movlw	1
   757  06C7  118A  2455  118A   	fcall	_Lcd_Set_Cursor
   758  06CA                     l1583:
   759                           
   760                           ;main.c: 139:     Lcd_Write_String(s);
   761  06CA  3032               	movlw	(low (main@s| 0))& (0+255)
   762  06CB  00F5               	movwf	Lcd_Write_String@a
   763  06CC  3000               	movlw	0
   764  06CD  00F6               	movwf	Lcd_Write_String@a+1
   765  06CE  118A  2391  118A   	fcall	_Lcd_Write_String
   766  06D1                     l1585:
   767                           
   768                           ;main.c: 142:     INTCONbits.GIE = 1;
   769  06D1  178B               	bsf	11,7	;volatile
   770  06D2                     l1587:
   771                           
   772                           ;main.c: 144:     OPTION_REGbits.INTEDG = 0;
   773  06D2  1683               	bsf	3,5	;RP0=1, select bank1
   774  06D3  1303               	bcf	3,6	;RP1=0, select bank1
   775  06D4  1301               	bcf	1,6	;volatile
   776  06D5                     l1589:
   777                           
   778                           ;main.c: 145:     INTCONbits.INTF = 0;
   779  06D5  108B               	bcf	11,1	;volatile
   780  06D6                     l1591:
   781                           
   782                           ;main.c: 146:     INTCONbits.INTE = 0;
   783  06D6  120B               	bcf	11,4	;volatile
   784  06D7                     l1593:
   785                           
   786                           ;main.c: 148:     INTCONbits.RBIF = 0;
   787  06D7  100B               	bcf	11,0	;volatile
   788  06D8                     l1595:
   789                           
   790                           ;main.c: 149:     INTCONbits.RBIE = 0;
   791  06D8  118B               	bcf	11,3	;volatile
   792  06D9                     l1597:
   793                           
   794                           ;main.c: 153:     {;main.c: 154:         if(PORTAbits.RA7 == 1)
   795  06D9  1283               	bcf	3,5	;RP0=0, select bank0
   796  06DA  1303               	bcf	3,6	;RP1=0, select bank0
   797  06DB  1F85               	btfss	5,7	;volatile
   798  06DC  2EDE               	goto	u1161
   799  06DD  2EDF               	goto	u1160
   800  06DE                     u1161:
   801  06DE  2F49               	goto	l1623
   802  06DF                     u1160:
   803  06DF                     l1599:
   804                           
   805                           ;main.c: 155:         {;main.c: 156:             Count_Menu ++;
   806  06DF  3001               	movlw	1
   807  06E0  07C6               	addwf	main@Count_Menu,f
   808  06E1  1803               	skipnc
   809  06E2  0AC7               	incf	main@Count_Menu+1,f
   810  06E3  3000               	movlw	0
   811  06E4  07C7               	addwf	main@Count_Menu+1,f
   812                           
   813                           ;main.c: 157:             _delay((unsigned long)((10)*(2000000/4000.0)));
   814  06E5  3007               	movlw	7
   815  06E6  1283               	bcf	3,5	;RP0=0, select bank0
   816  06E7  1303               	bcf	3,6	;RP1=0, select bank0
   817  06E8  00B0               	movwf	??_main+1
   818  06E9  307C               	movlw	124
   819  06EA  00AF               	movwf	??_main
   820  06EB                     u1307:
   821  06EB  0BAF               	decfsz	??_main,f
   822  06EC  2EEB               	goto	u1307
   823  06ED  0BB0               	decfsz	??_main+1,f
   824  06EE  2EEB               	goto	u1307
   825  06EF  0000               	nop
   826  06F0                     l1601:
   827                           
   828                           ;main.c: 158:             if(Count_Menu >= 5)
   829  06F0  1283               	bcf	3,5	;RP0=0, select bank0
   830  06F1  1303               	bcf	3,6	;RP1=0, select bank0
   831  06F2  0847               	movf	main@Count_Menu+1,w
   832  06F3  3A80               	xorlw	128
   833  06F4  00FF               	movwf	btemp+1
   834  06F5  3080               	movlw	128
   835  06F6  027F               	subwf	btemp+1,w
   836  06F7  1D03               	skipz
   837  06F8  2EFB               	goto	u1175
   838  06F9  3005               	movlw	5
   839  06FA  0246               	subwf	main@Count_Menu,w
   840  06FB                     u1175:
   841  06FB  1C03               	skipc
   842  06FC  2EFE               	goto	u1171
   843  06FD  2EFF               	goto	u1170
   844  06FE                     u1171:
   845  06FE  2F45               	goto	l1621
   846  06FF                     u1170:
   847  06FF                     l1603:
   848                           
   849                           ;main.c: 159:             {;main.c: 160:                 if(menu == 1)
   850  06FF  1283               	bcf	3,5	;RP0=0, select bank0
   851  0700  1303               	bcf	3,6	;RP1=0, select bank0
   852  0701  0348               	decf	main@menu,w
   853  0702  1D03               	btfss	3,2
   854  0703  2F05               	goto	u1181
   855  0704  2F06               	goto	u1180
   856  0705                     u1181:
   857  0705  2F24               	goto	l109
   858  0706                     u1180:
   859  0706                     l1605:
   860                           
   861                           ;main.c: 161:                 {;main.c: 162:                     menu = 0;
   862  0706  01C8               	clrf	main@menu
   863  0707                     l1607:
   864                           
   865                           ;main.c: 163:                     Lcd_Set_Cursor(8,2);
   866  0707  3002               	movlw	2
   867  0708  00AF               	movwf	??_main
   868  0709  082F               	movf	??_main,w
   869  070A  00F4               	movwf	Lcd_Set_Cursor@a
   870  070B  3008               	movlw	8
   871  070C  118A  2455  118A   	fcall	_Lcd_Set_Cursor
   872  070F                     l1609:
   873                           
   874                           ;main.c: 164:                     Lcd_Write_String("  ");
   875  070F  3043               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   876  0710  00F5               	movwf	Lcd_Write_String@a
   877  0711  3080               	movlw	128
   878  0712  00F6               	movwf	Lcd_Write_String@a+1
   879  0713  118A  2391  118A   	fcall	_Lcd_Write_String
   880  0716                     l1611:
   881                           
   882                           ;main.c: 165:                     Lcd_Set_Cursor(8,1);
   883  0716  01F4               	clrf	Lcd_Set_Cursor@a
   884  0717  0AF4               	incf	Lcd_Set_Cursor@a,f
   885  0718  3008               	movlw	8
   886  0719  118A  2455  118A   	fcall	_Lcd_Set_Cursor
   887  071C                     l1613:
   888                           
   889                           ;main.c: 166:                     Lcd_Write_String("->");
   890  071C  3046               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
   891  071D  00F5               	movwf	Lcd_Write_String@a
   892  071E  3080               	movlw	128
   893  071F  00F6               	movwf	Lcd_Write_String@a+1
   894  0720  118A  2391  118A   	fcall	_Lcd_Write_String
   895                           
   896                           ;main.c: 167:                 }
   897  0723  2F49               	goto	l1623
   898  0724                     l109:	
   899                           ;main.c: 168:                 else
   900                           
   901                           
   902                           ;main.c: 169:                 {;main.c: 170:                     menu = 1;
   903  0724  01C8               	clrf	main@menu
   904  0725  0AC8               	incf	main@menu,f
   905  0726                     l1615:
   906                           
   907                           ;main.c: 171:                     Lcd_Set_Cursor(8,1);
   908  0726  01F4               	clrf	Lcd_Set_Cursor@a
   909  0727  0AF4               	incf	Lcd_Set_Cursor@a,f
   910  0728  3008               	movlw	8
   911  0729  118A  2455  118A   	fcall	_Lcd_Set_Cursor
   912  072C                     l1617:
   913                           
   914                           ;main.c: 172:                     Lcd_Write_String("  ");
   915  072C  3043               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   916  072D  00F5               	movwf	Lcd_Write_String@a
   917  072E  3080               	movlw	128
   918  072F  00F6               	movwf	Lcd_Write_String@a+1
   919  0730  118A  2391  118A   	fcall	_Lcd_Write_String
   920  0733                     l1619:
   921                           
   922                           ;main.c: 173:                     Lcd_Set_Cursor(8,2);
   923  0733  3002               	movlw	2
   924  0734  1283               	bcf	3,5	;RP0=0, select bank0
   925  0735  1303               	bcf	3,6	;RP1=0, select bank0
   926  0736  00AF               	movwf	??_main
   927  0737  082F               	movf	??_main,w
   928  0738  00F4               	movwf	Lcd_Set_Cursor@a
   929  0739  3008               	movlw	8
   930  073A  118A  2455  118A   	fcall	_Lcd_Set_Cursor
   931                           
   932                           ;main.c: 174:                     Lcd_Write_String("->");
   933  073D  3046               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
   934  073E  00F5               	movwf	Lcd_Write_String@a
   935  073F  3080               	movlw	128
   936  0740  00F6               	movwf	Lcd_Write_String@a+1
   937  0741  118A  2391  118A   	fcall	_Lcd_Write_String
   938  0744  2F49               	goto	l1623
   939  0745                     l1621:
   940                           
   941                           ;main.c: 178:             {;main.c: 179:                 Count_Menu = 0;
   942  0745  1283               	bcf	3,5	;RP0=0, select bank0
   943  0746  1303               	bcf	3,6	;RP1=0, select bank0
   944  0747  01C6               	clrf	main@Count_Menu
   945  0748  01C7               	clrf	main@Count_Menu+1
   946  0749                     l1623:
   947                           
   948                           ;main.c: 184:         if(PORTAbits.RA5 == 1)
   949  0749  1283               	bcf	3,5	;RP0=0, select bank0
   950  074A  1303               	bcf	3,6	;RP1=0, select bank0
   951  074B  0805               	movf	5,w	;volatile
   952  074C                     l112:	
   953                           ;main.c: 185:         {;main.c: 188:         }
   954                           
   955                           
   956                           ;main.c: 192:         if(PORTAbits.RA0 == 1)
   957  074C  1C05               	btfss	5,0	;volatile
   958  074D  2F4F               	goto	u1191
   959  074E  2F50               	goto	u1190
   960  074F                     u1191:
   961  074F  2F97               	goto	l1653
   962  0750                     u1190:
   963  0750                     l1625:
   964                           
   965                           ;main.c: 193:         {;main.c: 194:             AutMan = 1;
   966  0750  3001               	movlw	1
   967  0751  00CF               	movwf	_AutMan
   968  0752  3000               	movlw	0
   969  0753  00D0               	movwf	_AutMan+1
   970  0754                     l1627:
   971                           
   972                           ;main.c: 195:             INTCONbits.RBIE = 1;
   973  0754  158B               	bsf	11,3	;volatile
   974  0755                     l1629:
   975                           
   976                           ;main.c: 196:             if(FotoCelula == 1 || PORTBbits.RB7 == 1)
   977  0755  0351               	decf	_FotoCelula,w
   978  0756  1903               	btfsc	3,2
   979  0757  2F59               	goto	u1201
   980  0758  2F5A               	goto	u1200
   981  0759                     u1201:
   982  0759  2F5E               	goto	l116
   983  075A                     u1200:
   984  075A                     l1631:
   985  075A  1F86               	btfss	6,7	;volatile
   986  075B  2F5D               	goto	u1211
   987  075C  2F5E               	goto	u1210
   988  075D                     u1211:
   989  075D  2F95               	goto	l1651
   990  075E                     u1210:
   991  075E                     l116:
   992                           
   993                           ;main.c: 197:             {;main.c: 198:                 if(PORTAbits.RA1 == 1)
   994  075E  1C85               	btfss	5,1	;volatile
   995  075F  2F61               	goto	u1221
   996  0760  2F62               	goto	u1220
   997  0761                     u1221:
   998  0761  2F7E               	goto	l117
   999  0762                     u1220:
  1000  0762                     l1633:
  1001                           
  1002                           ;main.c: 199:                 {;main.c: 200:                     PORTAbits.RA2 = 0;
  1003  0762  1105               	bcf	5,2	;volatile
  1004                           
  1005                           ;main.c: 201:                     PORTAbits.RA4 = 1;
  1006  0763  1605               	bsf	5,4	;volatile
  1007                           
  1008                           ;main.c: 202:                     INTCONbits.INTE = 1;
  1009  0764  160B               	bsf	11,4	;volatile
  1010  0765                     l1635:
  1011                           
  1012                           ;main.c: 203:                     if(CountSteps >= Steps)
  1013  0765  084E               	movf	_CountSteps+1,w
  1014  0766  3A80               	xorlw	128
  1015  0767  00AF               	movwf	??_main
  1016  0768  084C               	movf	main@Steps+1,w
  1017  0769  3A80               	xorlw	128
  1018  076A  022F               	subwf	??_main,w
  1019  076B  1D03               	skipz
  1020  076C  2F6F               	goto	u1235
  1021  076D  084B               	movf	main@Steps,w
  1022  076E  024D               	subwf	_CountSteps,w
  1023  076F                     u1235:
  1024  076F  1C03               	skipc
  1025  0770  2F72               	goto	u1231
  1026  0771  2F73               	goto	u1230
  1027  0772                     u1231:
  1028  0772  2FF3               	goto	l122
  1029  0773                     u1230:
  1030  0773                     l1637:
  1031                           
  1032                           ;main.c: 204:                     {;main.c: 205:                         PORTAbits.RA4 =
      +                           0;
  1033  0773  1283               	bcf	3,5	;RP0=0, select bank0
  1034  0774  1303               	bcf	3,6	;RP1=0, select bank0
  1035  0775  1205               	bcf	5,4	;volatile
  1036                           
  1037                           ;main.c: 206:                         PORTAbits.RA2 = 0;
  1038  0776  1105               	bcf	5,2	;volatile
  1039                           
  1040                           ;main.c: 207:                         INTCONbits.INTE = 0;
  1041  0777  120B               	bcf	11,4	;volatile
  1042  0778                     l1639:
  1043                           
  1044                           ;main.c: 208:                         CountSteps = 0;
  1045  0778  01CD               	clrf	_CountSteps
  1046  0779  01CE               	clrf	_CountSteps+1
  1047  077A                     l1641:
  1048                           
  1049                           ;main.c: 209:                         Retardo();
  1050  077A  118A  228D  118A   	fcall	_Retardo
  1051  077D  2ED9               	goto	l1597
  1052  077E                     l117:	
  1053                           ;main.c: 212:                 else
  1054                           
  1055                           
  1056                           ;main.c: 213:                 {;main.c: 214:                     PORTAbits.RA4 = 0;
  1057  077E  1205               	bcf	5,4	;volatile
  1058                           
  1059                           ;main.c: 215:                     PORTAbits.RA2 = 1;
  1060  077F  1505               	bsf	5,2	;volatile
  1061                           
  1062                           ;main.c: 216:                     INTCONbits.INTE = 1;
  1063  0780  160B               	bsf	11,4	;volatile
  1064  0781                     l1643:
  1065                           
  1066                           ;main.c: 217:                     if(CountSteps >= Steps)
  1067  0781  084E               	movf	_CountSteps+1,w
  1068  0782  3A80               	xorlw	128
  1069  0783  00AF               	movwf	??_main
  1070  0784  084C               	movf	main@Steps+1,w
  1071  0785  3A80               	xorlw	128
  1072  0786  022F               	subwf	??_main,w
  1073  0787  1D03               	skipz
  1074  0788  2F8B               	goto	u1245
  1075  0789  084B               	movf	main@Steps,w
  1076  078A  024D               	subwf	_CountSteps,w
  1077  078B                     u1245:
  1078  078B  1C03               	skipc
  1079  078C  2F8E               	goto	u1241
  1080  078D  2F8F               	goto	u1240
  1081  078E                     u1241:
  1082  078E  2FF3               	goto	l122
  1083  078F                     u1240:
  1084  078F                     l1645:
  1085                           
  1086                           ;main.c: 218:                     {;main.c: 219:                         PORTAbits.RA4 =
      +                           0;
  1087  078F  1283               	bcf	3,5	;RP0=0, select bank0
  1088  0790  1303               	bcf	3,6	;RP1=0, select bank0
  1089  0791  1205               	bcf	5,4	;volatile
  1090                           
  1091                           ;main.c: 220:                         PORTAbits.RA2 = 0;
  1092  0792  1105               	bcf	5,2	;volatile
  1093                           
  1094                           ;main.c: 221:                         INTCONbits.INTE = 0;
  1095  0793  120B               	bcf	11,4	;volatile
  1096  0794  2F78               	goto	l1639
  1097  0795                     l1651:
  1098                           
  1099                           ;main.c: 229:             {;main.c: 230:                 FotoCelula = 0;
  1100  0795  01D1               	clrf	_FotoCelula
  1101  0796  2ED9               	goto	l1597
  1102  0797                     l1653:
  1103                           
  1104                           ;main.c: 235:         {;main.c: 236:             AutMan = 0;
  1105  0797  01CF               	clrf	_AutMan
  1106  0798  01D0               	clrf	_AutMan+1
  1107  0799                     l1655:
  1108                           
  1109                           ;main.c: 237:             INTCONbits.RBIE = 0;
  1110  0799  118B               	bcf	11,3	;volatile
  1111  079A                     l1657:
  1112                           
  1113                           ;main.c: 239:             if(PORTAbits.RA6 == 1)
  1114  079A  1F05               	btfss	5,6	;volatile
  1115  079B  2F9D               	goto	u1251
  1116  079C  2F9E               	goto	u1250
  1117  079D                     u1251:
  1118  079D  2FC4               	goto	l123
  1119  079E                     u1250:
  1120  079E                     l1659:
  1121                           
  1122                           ;main.c: 240:             {;main.c: 241:                 _delay((unsigned long)((20)*(20
      +                          00000/4000.0)));
  1123  079E  300D               	movlw	13
  1124  079F  1283               	bcf	3,5	;RP0=0, select bank0
  1125  07A0  1303               	bcf	3,6	;RP1=0, select bank0
  1126  07A1  00B0               	movwf	??_main+1
  1127  07A2  30FB               	movlw	251
  1128  07A3  00AF               	movwf	??_main
  1129  07A4                     u1317:
  1130  07A4  0BAF               	decfsz	??_main,f
  1131  07A5  2FA4               	goto	u1317
  1132  07A6  0BB0               	decfsz	??_main+1,f
  1133  07A7  2FA4               	goto	u1317
  1134                           
  1135                           ;main.c: 242:                 Count ++;
  1136  07A8  3001               	movlw	1
  1137  07A9  1283               	bcf	3,5	;RP0=0, select bank0
  1138  07AA  1303               	bcf	3,6	;RP1=0, select bank0
  1139  07AB  07C9               	addwf	main@Count,f
  1140  07AC  1803               	skipnc
  1141  07AD  0ACA               	incf	main@Count+1,f
  1142  07AE  3000               	movlw	0
  1143  07AF  07CA               	addwf	main@Count+1,f
  1144  07B0                     l1661:
  1145                           
  1146                           ;main.c: 243:                 if(Count >= 5)
  1147  07B0  084A               	movf	main@Count+1,w
  1148  07B1  3A80               	xorlw	128
  1149  07B2  00FF               	movwf	btemp+1
  1150  07B3  3080               	movlw	128
  1151  07B4  027F               	subwf	btemp+1,w
  1152  07B5  1D03               	skipz
  1153  07B6  2FB9               	goto	u1265
  1154  07B7  3005               	movlw	5
  1155  07B8  0249               	subwf	main@Count,w
  1156  07B9                     u1265:
  1157  07B9  1C03               	skipc
  1158  07BA  2FBC               	goto	u1261
  1159  07BB  2FBD               	goto	u1260
  1160  07BC                     u1261:
  1161  07BC  2FC5               	goto	l125
  1162  07BD                     u1260:
  1163  07BD                     l1663:
  1164                           
  1165                           ;main.c: 244:                 {;main.c: 245:                     Count = 0;
  1166  07BD  1283               	bcf	3,5	;RP0=0, select bank0
  1167  07BE  1303               	bcf	3,6	;RP1=0, select bank0
  1168  07BF  01C9               	clrf	main@Count
  1169  07C0  01CA               	clrf	main@Count+1
  1170  07C1                     l1665:
  1171                           
  1172                           ;main.c: 246:                     PORTAbits.RA2 = 0;
  1173  07C1  1105               	bcf	5,2	;volatile
  1174  07C2                     l1667:
  1175                           
  1176                           ;main.c: 247:                     PORTAbits.RA4 = 1;
  1177  07C2  1605               	bsf	5,4	;volatile
  1178  07C3  2FC5               	goto	l125
  1179  07C4                     l123:	
  1180                           ;main.c: 251:             else{PORTAbits.RA4 = 0;
  1181                           
  1182  07C4  1205               	bcf	5,4	;volatile
  1183  07C5                     l125:	
  1184                           ;main.c: 252:             }
  1185                           
  1186                           
  1187                           ;main.c: 254:             if(PORTAbits.RA5 == 1)
  1188  07C5  1283               	bcf	3,5	;RP0=0, select bank0
  1189  07C6  1303               	bcf	3,6	;RP1=0, select bank0
  1190  07C7  1E85               	btfss	5,5	;volatile
  1191  07C8  2FCA               	goto	u1271
  1192  07C9  2FCB               	goto	u1270
  1193  07CA                     u1271:
  1194  07CA  2FF1               	goto	l126
  1195  07CB                     u1270:
  1196  07CB                     l1669:
  1197                           
  1198                           ;main.c: 255:             {;main.c: 256:                 _delay((unsigned long)((20)*(20
      +                          00000/4000.0)));
  1199  07CB  300D               	movlw	13
  1200  07CC  1283               	bcf	3,5	;RP0=0, select bank0
  1201  07CD  1303               	bcf	3,6	;RP1=0, select bank0
  1202  07CE  00B0               	movwf	??_main+1
  1203  07CF  30FB               	movlw	251
  1204  07D0  00AF               	movwf	??_main
  1205  07D1                     u1327:
  1206  07D1  0BAF               	decfsz	??_main,f
  1207  07D2  2FD1               	goto	u1327
  1208  07D3  0BB0               	decfsz	??_main+1,f
  1209  07D4  2FD1               	goto	u1327
  1210                           
  1211                           ;main.c: 257:                 Count ++;
  1212  07D5  3001               	movlw	1
  1213  07D6  1283               	bcf	3,5	;RP0=0, select bank0
  1214  07D7  1303               	bcf	3,6	;RP1=0, select bank0
  1215  07D8  07C9               	addwf	main@Count,f
  1216  07D9  1803               	skipnc
  1217  07DA  0ACA               	incf	main@Count+1,f
  1218  07DB  3000               	movlw	0
  1219  07DC  07CA               	addwf	main@Count+1,f
  1220  07DD                     l1671:
  1221                           
  1222                           ;main.c: 258:                 if(Count >= 5)
  1223  07DD  084A               	movf	main@Count+1,w
  1224  07DE  3A80               	xorlw	128
  1225  07DF  00FF               	movwf	btemp+1
  1226  07E0  3080               	movlw	128
  1227  07E1  027F               	subwf	btemp+1,w
  1228  07E2  1D03               	skipz
  1229  07E3  2FE6               	goto	u1285
  1230  07E4  3005               	movlw	5
  1231  07E5  0249               	subwf	main@Count,w
  1232  07E6                     u1285:
  1233  07E6  1C03               	skipc
  1234  07E7  2FE9               	goto	u1281
  1235  07E8  2FEA               	goto	u1280
  1236  07E9                     u1281:
  1237  07E9  2FF3               	goto	l122
  1238  07EA                     u1280:
  1239  07EA                     l1673:
  1240                           
  1241                           ;main.c: 259:                 {;main.c: 260:                     Count = 0;
  1242  07EA  1283               	bcf	3,5	;RP0=0, select bank0
  1243  07EB  1303               	bcf	3,6	;RP1=0, select bank0
  1244  07EC  01C9               	clrf	main@Count
  1245  07ED  01CA               	clrf	main@Count+1
  1246  07EE                     l1675:
  1247                           
  1248                           ;main.c: 261:                     PORTAbits.RA4 = 0;
  1249  07EE  1205               	bcf	5,4	;volatile
  1250  07EF                     l1677:
  1251                           
  1252                           ;main.c: 262:                     PORTAbits.RA2 = 1;
  1253  07EF  1505               	bsf	5,2	;volatile
  1254  07F0  2ED9               	goto	l1597
  1255  07F1                     l126:	
  1256                           ;main.c: 265:             else
  1257                           
  1258                           
  1259                           ;main.c: 266:             {;main.c: 267:                 PORTAbits.RA2 = 0;
  1260  07F1  1105               	bcf	5,2	;volatile
  1261  07F2  2ED9               	goto	l1597
  1262  07F3                     l122:	
  1263                           ;main.c: 269:         }
  1264                           
  1265  07F3  2ED9               	goto	l1597
  1266  07F4  118A  2800         	ljmp	start
  1267  07F6                     __end_of_main:
  1268                           
  1269                           	psect	text1
  1270  04EA                     __ptext1:	
  1271 ;; *************** function _sprintf *****************
  1272 ;; Defined at:
  1273 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c"
  1274 ;; Parameters:    Size  Location     Type
  1275 ;;  sp              1    wreg     PTR unsigned char 
  1276 ;;		 -> main@s(20), 
  1277 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  1278 ;;		 -> STR_4(17), STR_3(17), 
  1279 ;; Auto vars:     Size  Location     Type
  1280 ;;  sp              1   13[BANK0 ] PTR unsigned char 
  1281 ;;		 -> main@s(20), 
  1282 ;;  tmpval          4    0        struct .
  1283 ;;  width           2   11[BANK0 ] int 
  1284 ;;  val             2    9[BANK0 ] unsigned int 
  1285 ;;  cp              2    0        PTR const unsigned char 
  1286 ;;  len             2    0        unsigned int 
  1287 ;;  c               1   14[BANK0 ] unsigned char 
  1288 ;;  flag            1    8[BANK0 ] unsigned char 
  1289 ;;  prec            1    7[BANK0 ] char 
  1290 ;;  ap              1    6[BANK0 ] PTR void [1]
  1291 ;;		 -> ?_sprintf(2), 
  1292 ;; Return value:  Size  Location     Type
  1293 ;;                  2    0[BANK0 ] int 
  1294 ;; Registers used:
  1295 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1296 ;; Tracked objects:
  1297 ;;		On entry : 0/0
  1298 ;;		On exit  : 0/0
  1299 ;;		Unchanged: 0/0
  1300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1301 ;;      Params:         0       3       0       0       0
  1302 ;;      Locals:         0       9       0       0       0
  1303 ;;      Temps:          0       3       0       0       0
  1304 ;;      Totals:         0      15       0       0       0
  1305 ;;Total ram usage:       15 bytes
  1306 ;; Hardware stack levels used: 1
  1307 ;; Hardware stack levels required when called: 1
  1308 ;; This function calls:
  1309 ;;		___lwdiv
  1310 ;;		___lwmod
  1311 ;;		___wmul
  1312 ;;		_isdigit
  1313 ;; This function is called by:
  1314 ;;		_main
  1315 ;; This function uses a non-reentrant model
  1316 ;;
  1317                           
  1318                           
  1319                           ;psect for function _sprintf
  1320  04EA                     _sprintf:
  1321                           
  1322                           ;incstack = 0
  1323                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1324                           ;sprintf@sp stored from wreg
  1325  04EA  1283               	bcf	3,5	;RP0=0, select bank0
  1326  04EB  1303               	bcf	3,6	;RP1=0, select bank0
  1327  04EC  00AD               	movwf	sprintf@sp
  1328  04ED                     l1445:
  1329                           
  1330                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 514: 
      +                           int width;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 521:  
      +                          signed char prec;
  1331  04ED  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1332  04EE  00A3               	movwf	??_sprintf
  1333  04EF  0823               	movf	??_sprintf,w
  1334  04F0  00A6               	movwf	sprintf@ap
  1335                           
  1336                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1337  04F1  2E3F               	goto	l1527
  1338  04F2                     l1447:
  1339                           
  1340                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1341  04F2  3025               	movlw	37
  1342  04F3  062E               	xorwf	sprintf@c,w
  1343  04F4  1903               	btfsc	3,2
  1344  04F5  2CF7               	goto	u1001
  1345  04F6  2CF8               	goto	u1000
  1346  04F7                     u1001:
  1347  04F7  2D04               	goto	l1453
  1348  04F8                     u1000:
  1349  04F8                     l1449:
  1350                           
  1351                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1352  04F8  082E               	movf	sprintf@c,w
  1353  04F9  00A3               	movwf	??_sprintf
  1354  04FA  082D               	movf	sprintf@sp,w
  1355  04FB  0084               	movwf	4
  1356  04FC  0823               	movf	??_sprintf,w
  1357  04FD  1383               	bcf	3,7	;select IRP bank0
  1358  04FE  0080               	movwf	0
  1359  04FF                     l1451:
  1360  04FF  3001               	movlw	1
  1361  0500  00A3               	movwf	??_sprintf
  1362  0501  0823               	movf	??_sprintf,w
  1363  0502  07AD               	addwf	sprintf@sp,f
  1364                           
  1365                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 559:    continue;
  1366  0503  2E3F               	goto	l1527
  1367  0504                     l1453:
  1368                           
  1369                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 563:   width = 0;
  1370  0504  01AB               	clrf	sprintf@width
  1371  0505  01AC               	clrf	sprintf@width+1
  1372                           
  1373                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1374  0506  01A8               	clrf	sprintf@flag
  1375  0507                     l1455:
  1376                           
  1377                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 614:   if(isdigit
      +                          ((unsigned)*f)) {
  1378  0507  0820               	movf	sprintf@f,w
  1379  0508  0084               	movwf	4
  1380  0509  118A  200C  118A   	fcall	stringdir
  1381  050C  118A  2297  118A   	fcall	_isdigit
  1382  050F  1C03               	btfss	3,0
  1383  0510  2D12               	goto	u1011
  1384  0511  2D13               	goto	u1010
  1385  0512                     u1011:
  1386  0512  2D4B               	goto	l1469
  1387  0513                     u1010:
  1388  0513                     l1457:
  1389                           
  1390                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 615:    width = 0
      +                          ;
  1391  0513  1283               	bcf	3,5	;RP0=0, select bank0
  1392  0514  1303               	bcf	3,6	;RP1=0, select bank0
  1393  0515  01AB               	clrf	sprintf@width
  1394  0516  01AC               	clrf	sprintf@width+1
  1395  0517                     l1459:
  1396                           
  1397                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 617:     width *=
      +                           10;
  1398  0517  300A               	movlw	10
  1399  0518  00F0               	movwf	___wmul@multiplier
  1400  0519  3000               	movlw	0
  1401  051A  00F1               	movwf	___wmul@multiplier+1
  1402  051B  1283               	bcf	3,5	;RP0=0, select bank0
  1403  051C  1303               	bcf	3,6	;RP1=0, select bank0
  1404  051D  082C               	movf	sprintf@width+1,w
  1405  051E  00F3               	movwf	___wmul@multiplicand+1
  1406  051F  082B               	movf	sprintf@width,w
  1407  0520  00F2               	movwf	___wmul@multiplicand
  1408  0521  118A  22FD  118A   	fcall	___wmul
  1409  0524  0871               	movf	?___wmul+1,w
  1410  0525  1283               	bcf	3,5	;RP0=0, select bank0
  1411  0526  1303               	bcf	3,6	;RP1=0, select bank0
  1412  0527  00AC               	movwf	sprintf@width+1
  1413  0528  0870               	movf	?___wmul,w
  1414  0529  00AB               	movwf	sprintf@width
  1415  052A                     l1461:
  1416                           
  1417                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 618:        width
      +                           += *f++ - '0';
  1418  052A  0820               	movf	sprintf@f,w
  1419  052B  0084               	movwf	4
  1420  052C  118A  200C  118A   	fcall	stringdir
  1421  052F  3ED0               	addlw	208
  1422  0530  00A3               	movwf	??_sprintf
  1423  0531  30FF               	movlw	255
  1424  0532  1803               	skipnc
  1425  0533  3000               	movlw	0
  1426  0534  00A4               	movwf	??_sprintf+1
  1427  0535  0823               	movf	??_sprintf,w
  1428  0536  07AB               	addwf	sprintf@width,f
  1429  0537  1803               	skipnc
  1430  0538  0AAC               	incf	sprintf@width+1,f
  1431  0539  0824               	movf	??_sprintf+1,w
  1432  053A  07AC               	addwf	sprintf@width+1,f
  1433  053B                     l1463:
  1434  053B  3001               	movlw	1
  1435  053C  00A3               	movwf	??_sprintf
  1436  053D  0823               	movf	??_sprintf,w
  1437  053E  07A0               	addwf	sprintf@f,f
  1438  053F                     l1465:
  1439                           
  1440                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 619:    } while(i
      +                          sdigit((unsigned)*f));
  1441  053F  0820               	movf	sprintf@f,w
  1442  0540  0084               	movwf	4
  1443  0541  118A  200C  118A   	fcall	stringdir
  1444  0544  118A  2297  118A   	fcall	_isdigit
  1445  0547  1803               	btfsc	3,0
  1446  0548  2D4A               	goto	u1021
  1447  0549  2D4B               	goto	u1020
  1448  054A                     u1021:
  1449  054A  2D17               	goto	l1459
  1450  054B                     u1020:
  1451  054B                     l1469:
  1452  054B  3001               	movlw	1
  1453  054C  1283               	bcf	3,5	;RP0=0, select bank0
  1454  054D  1303               	bcf	3,6	;RP1=0, select bank0
  1455  054E  07A0               	addwf	sprintf@f,f
  1456  054F  30FF               	movlw	-1
  1457  0550  0720               	addwf	sprintf@f,w
  1458  0551  0084               	movwf	4
  1459  0552  118A  200C  118A   	fcall	stringdir
  1460  0555  00AE               	movwf	sprintf@c
  1461  0556  00A3               	movwf	??_sprintf
  1462  0557  01A4               	clrf	??_sprintf+1
  1463                           
  1464                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1465                           ; Switch size 1, requested type "simple"
  1466                           ; Number of cases is 1, Range of values is 0 to 0
  1467                           ; switch strategies available:
  1468                           ; Name         Instructions Cycles
  1469                           ; simple_byte            4     3 (average)
  1470                           ; direct_byte            9     7 (fixed)
  1471                           ; jumptable            260     6 (fixed)
  1472                           ;	Chosen strategy is simple_byte
  1473  0558  0824               	movf	??_sprintf+1,w
  1474  0559  3A00               	xorlw	0	; case 0
  1475  055A  1903               	skipnz
  1476  055B  2D5D               	goto	l1699
  1477  055C  2E3F               	goto	l1527
  1478  055D                     l1699:
  1479                           
  1480                           ; Switch size 1, requested type "simple"
  1481                           ; Number of cases is 3, Range of values is 0 to 105
  1482                           ; switch strategies available:
  1483                           ; Name         Instructions Cycles
  1484                           ; simple_byte           10     6 (average)
  1485                           ; direct_byte          219     7 (fixed)
  1486                           ; jumptable            260     6 (fixed)
  1487                           ;	Chosen strategy is simple_byte
  1488  055D  0823               	movf	??_sprintf,w
  1489  055E  3A00               	xorlw	0	; case 0
  1490  055F  1903               	skipnz
  1491  0560  2E4F               	goto	l1529
  1492  0561  3A64               	xorlw	100	; case 100
  1493  0562  1903               	skipnz
  1494  0563  2D68               	goto	l1471
  1495  0564  3A0D               	xorlw	13	; case 105
  1496  0565  1903               	skipnz
  1497  0566  2D68               	goto	l1471
  1498  0567  2E3F               	goto	l1527
  1499  0568                     l1471:
  1500                           
  1501                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1502  0568  0826               	movf	sprintf@ap,w
  1503  0569  0084               	movwf	4
  1504  056A  1383               	bcf	3,7	;select IRP bank0
  1505  056B  0800               	movf	0,w
  1506  056C  00A9               	movwf	sprintf@val
  1507  056D  0A84               	incf	4,f
  1508  056E  0800               	movf	0,w
  1509  056F  00AA               	movwf	sprintf@val+1
  1510  0570                     l1473:
  1511  0570  3002               	movlw	2
  1512  0571  00A3               	movwf	??_sprintf
  1513  0572  0823               	movf	??_sprintf,w
  1514  0573  07A6               	addwf	sprintf@ap,f
  1515  0574                     l1475:
  1516                           
  1517                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1518  0574  1FAA               	btfss	sprintf@val+1,7
  1519  0575  2D77               	goto	u1031
  1520  0576  2D78               	goto	u1030
  1521  0577                     u1031:
  1522  0577  2D81               	goto	l1481
  1523  0578                     u1030:
  1524  0578                     l1477:
  1525                           
  1526                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1527  0578  3003               	movlw	3
  1528  0579  00A3               	movwf	??_sprintf
  1529  057A  0823               	movf	??_sprintf,w
  1530  057B  04A8               	iorwf	sprintf@flag,f
  1531  057C                     l1479:
  1532                           
  1533                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1534  057C  09A9               	comf	sprintf@val,f
  1535  057D  09AA               	comf	sprintf@val+1,f
  1536  057E  0AA9               	incf	sprintf@val,f
  1537  057F  1903               	skipnz
  1538  0580  0AAA               	incf	sprintf@val+1,f
  1539  0581                     l1481:
  1540                           
  1541                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1542  0581  01AE               	clrf	sprintf@c
  1543  0582  0AAE               	incf	sprintf@c,f
  1544  0583                     l1487:
  1545                           
  1546                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1547  0583  082E               	movf	sprintf@c,w
  1548  0584  00A3               	movwf	??_sprintf
  1549  0585  0723               	addwf	??_sprintf,w
  1550  0586  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1551  0587  0084               	movwf	4
  1552  0588  118A  200C  118A   	fcall	stringdir
  1553  058B  00A4               	movwf	??_sprintf+1
  1554  058C  118A  200C  118A   	fcall	stringdir
  1555  058F  00A5               	movwf	??_sprintf+2
  1556  0590  0825               	movf	??_sprintf+2,w
  1557  0591  022A               	subwf	sprintf@val+1,w
  1558  0592  1D03               	skipz
  1559  0593  2D96               	goto	u1045
  1560  0594  0824               	movf	??_sprintf+1,w
  1561  0595  0229               	subwf	sprintf@val,w
  1562  0596                     u1045:
  1563  0596  1803               	skipnc
  1564  0597  2D99               	goto	u1041
  1565  0598  2D9A               	goto	u1040
  1566  0599                     u1041:
  1567  0599  2D9B               	goto	l1491
  1568  059A                     u1040:
  1569  059A  2DA5               	goto	l1493
  1570  059B                     l1491:
  1571  059B  3001               	movlw	1
  1572  059C  00A3               	movwf	??_sprintf
  1573  059D  0823               	movf	??_sprintf,w
  1574  059E  07AE               	addwf	sprintf@c,f
  1575  059F  3005               	movlw	5
  1576  05A0  062E               	xorwf	sprintf@c,w
  1577  05A1  1D03               	btfss	3,2
  1578  05A2  2DA4               	goto	u1051
  1579  05A3  2DA5               	goto	u1050
  1580  05A4                     u1051:
  1581  05A4  2D83               	goto	l1487
  1582  05A5                     u1050:
  1583  05A5                     l1493:
  1584                           
  1585                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1371:   if(width 
      +                          && flag & 0x03)
  1586  05A5  082B               	movf	sprintf@width,w
  1587  05A6  042C               	iorwf	sprintf@width+1,w
  1588  05A7  1903               	btfsc	3,2
  1589  05A8  2DAA               	goto	u1061
  1590  05A9  2DAB               	goto	u1060
  1591  05AA                     u1061:
  1592  05AA  2DB7               	goto	l241
  1593  05AB                     u1060:
  1594  05AB                     l1495:
  1595  05AB  0828               	movf	sprintf@flag,w
  1596  05AC  3903               	andlw	3
  1597  05AD  1903               	btfsc	3,2
  1598  05AE  2DB0               	goto	u1071
  1599  05AF  2DB1               	goto	u1070
  1600  05B0                     u1071:
  1601  05B0  2DB7               	goto	l241
  1602  05B1                     u1070:
  1603  05B1                     l1497:
  1604                           
  1605                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1372:    width--;
  1606  05B1  30FF               	movlw	255
  1607  05B2  07AB               	addwf	sprintf@width,f
  1608  05B3  1803               	skipnc
  1609  05B4  0AAC               	incf	sprintf@width+1,f
  1610  05B5  30FF               	movlw	255
  1611  05B6  07AC               	addwf	sprintf@width+1,f
  1612  05B7                     l241:
  1613                           
  1614                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1407:   if(width 
      +                          > c)
  1615  05B7  082C               	movf	sprintf@width+1,w
  1616  05B8  3A80               	xorlw	128
  1617  05B9  3C80               	sublw	128
  1618  05BA  1D03               	skipz
  1619  05BB  2DBE               	goto	u1085
  1620  05BC  082B               	movf	sprintf@width,w
  1621  05BD  022E               	subwf	sprintf@c,w
  1622  05BE                     u1085:
  1623  05BE  1803               	skipnc
  1624  05BF  2DC1               	goto	u1081
  1625  05C0  2DC2               	goto	u1080
  1626  05C1                     u1081:
  1627  05C1  2DCE               	goto	l1501
  1628  05C2                     u1080:
  1629  05C2                     l1499:
  1630                           
  1631                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1408:    width -=
      +                           c;
  1632  05C2  1283               	bcf	3,5	;RP0=0, select bank0
  1633  05C3  1303               	bcf	3,6	;RP1=0, select bank0
  1634  05C4  082E               	movf	sprintf@c,w
  1635  05C5  00A3               	movwf	??_sprintf
  1636  05C6  01A4               	clrf	??_sprintf+1
  1637  05C7  0823               	movf	??_sprintf,w
  1638  05C8  02AB               	subwf	sprintf@width,f
  1639  05C9  0824               	movf	??_sprintf+1,w
  1640  05CA  1C03               	skipc
  1641  05CB  03AC               	decf	sprintf@width+1,f
  1642  05CC  02AC               	subwf	sprintf@width+1,f
  1643  05CD  2DD2               	goto	l1503
  1644  05CE                     l1501:
  1645                           
  1646                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1410:    width = 
      +                          0;
  1647  05CE  1283               	bcf	3,5	;RP0=0, select bank0
  1648  05CF  1303               	bcf	3,6	;RP1=0, select bank0
  1649  05D0  01AB               	clrf	sprintf@width
  1650  05D1  01AC               	clrf	sprintf@width+1
  1651  05D2                     l1503:
  1652                           
  1653                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1450:    if(width
  1654  05D2  082B               	movf	sprintf@width,w
  1655  05D3  042C               	iorwf	sprintf@width+1,w
  1656  05D4  1903               	btfsc	3,2
  1657  05D5  2DD7               	goto	u1091
  1658  05D6  2DD8               	goto	u1090
  1659  05D7                     u1091:
  1660  05D7  2DEF               	goto	l1511
  1661  05D8                     u1090:
  1662  05D8                     l1505:
  1663                           
  1664                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1456:      ((*sp+
      +                          + = (' ')));
  1665  05D8  3020               	movlw	32
  1666  05D9  00A3               	movwf	??_sprintf
  1667  05DA  082D               	movf	sprintf@sp,w
  1668  05DB  0084               	movwf	4
  1669  05DC  0823               	movf	??_sprintf,w
  1670  05DD  1383               	bcf	3,7	;select IRP bank0
  1671  05DE  0080               	movwf	0
  1672  05DF                     l1507:
  1673  05DF  3001               	movlw	1
  1674  05E0  00A3               	movwf	??_sprintf
  1675  05E1  0823               	movf	??_sprintf,w
  1676  05E2  07AD               	addwf	sprintf@sp,f
  1677  05E3                     l1509:
  1678  05E3  30FF               	movlw	255
  1679  05E4  07AB               	addwf	sprintf@width,f
  1680  05E5  1803               	skipnc
  1681  05E6  0AAC               	incf	sprintf@width+1,f
  1682  05E7  30FF               	movlw	255
  1683  05E8  07AC               	addwf	sprintf@width+1,f
  1684  05E9  082B               	movf	sprintf@width,w
  1685  05EA  042C               	iorwf	sprintf@width+1,w
  1686  05EB  1D03               	btfss	3,2
  1687  05EC  2DEE               	goto	u1101
  1688  05ED  2DEF               	goto	u1100
  1689  05EE                     u1101:
  1690  05EE  2DD8               	goto	l1505
  1691  05EF                     u1100:
  1692  05EF                     l1511:
  1693                           
  1694                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1464:    if(flag 
      +                          & 0x03)
  1695  05EF  0828               	movf	sprintf@flag,w
  1696  05F0  3903               	andlw	3
  1697  05F1  1903               	btfsc	3,2
  1698  05F2  2DF4               	goto	u1111
  1699  05F3  2DF5               	goto	u1110
  1700  05F4                     u1111:
  1701  05F4  2E00               	goto	l1517
  1702  05F5                     u1110:
  1703  05F5                     l1513:
  1704                           
  1705                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1706  05F5  302D               	movlw	45
  1707  05F6  00A3               	movwf	??_sprintf
  1708  05F7  082D               	movf	sprintf@sp,w
  1709  05F8  0084               	movwf	4
  1710  05F9  0823               	movf	??_sprintf,w
  1711  05FA  1383               	bcf	3,7	;select IRP bank0
  1712  05FB  0080               	movwf	0
  1713  05FC                     l1515:
  1714  05FC  3001               	movlw	1
  1715  05FD  00A3               	movwf	??_sprintf
  1716  05FE  0823               	movf	??_sprintf,w
  1717  05FF  07AD               	addwf	sprintf@sp,f
  1718  0600                     l1517:
  1719                           
  1720                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1721  0600  082E               	movf	sprintf@c,w
  1722  0601  00A3               	movwf	??_sprintf
  1723  0602  0823               	movf	??_sprintf,w
  1724  0603  00A7               	movwf	sprintf@prec
  1725                           
  1726                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1727  0604  2E36               	goto	l1525
  1728  0605                     l1519:
  1729                           
  1730                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1731  0605  300A               	movlw	10
  1732  0606  00F8               	movwf	___lwmod@divisor
  1733  0607  3000               	movlw	0
  1734  0608  00F9               	movwf	___lwmod@divisor+1
  1735  0609  0827               	movf	sprintf@prec,w
  1736  060A  00A3               	movwf	??_sprintf
  1737  060B  0723               	addwf	??_sprintf,w
  1738  060C  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1739  060D  0084               	movwf	4
  1740  060E  118A  200C  118A   	fcall	stringdir
  1741  0611  00F0               	movwf	___lwdiv@divisor
  1742  0612  118A  200C  118A   	fcall	stringdir
  1743  0615  00F1               	movwf	___lwdiv@divisor+1
  1744  0616  082A               	movf	sprintf@val+1,w
  1745  0617  00F3               	movwf	___lwdiv@dividend+1
  1746  0618  0829               	movf	sprintf@val,w
  1747  0619  00F2               	movwf	___lwdiv@dividend
  1748  061A  118A  2411  118A   	fcall	___lwdiv
  1749  061D  0871               	movf	?___lwdiv+1,w
  1750  061E  00FB               	movwf	___lwmod@dividend+1
  1751  061F  0870               	movf	?___lwdiv,w
  1752  0620  00FA               	movwf	___lwmod@dividend
  1753  0621  118A  2357  118A   	fcall	___lwmod
  1754  0624  0878               	movf	?___lwmod,w
  1755  0625  3E30               	addlw	48
  1756  0626  1283               	bcf	3,5	;RP0=0, select bank0
  1757  0627  1303               	bcf	3,6	;RP1=0, select bank0
  1758  0628  00A4               	movwf	??_sprintf+1
  1759  0629  0824               	movf	??_sprintf+1,w
  1760  062A  00AE               	movwf	sprintf@c
  1761  062B                     l1521:
  1762                           
  1763                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1764  062B  082E               	movf	sprintf@c,w
  1765  062C  00A3               	movwf	??_sprintf
  1766  062D  082D               	movf	sprintf@sp,w
  1767  062E  0084               	movwf	4
  1768  062F  0823               	movf	??_sprintf,w
  1769  0630  1383               	bcf	3,7	;select IRP bank0
  1770  0631  0080               	movwf	0
  1771  0632                     l1523:
  1772  0632  3001               	movlw	1
  1773  0633  00A3               	movwf	??_sprintf
  1774  0634  0823               	movf	??_sprintf,w
  1775  0635  07AD               	addwf	sprintf@sp,f
  1776  0636                     l1525:
  1777                           
  1778                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1779  0636  30FF               	movlw	255
  1780  0637  00A3               	movwf	??_sprintf
  1781  0638  0823               	movf	??_sprintf,w
  1782  0639  07A7               	addwf	sprintf@prec,f
  1783  063A  0A27               	incf	sprintf@prec,w
  1784  063B  1D03               	btfss	3,2
  1785  063C  2E3E               	goto	u1121
  1786  063D  2E3F               	goto	u1120
  1787  063E                     u1121:
  1788  063E  2E05               	goto	l1519
  1789  063F                     u1120:
  1790  063F                     l1527:
  1791                           
  1792                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1793  063F  3001               	movlw	1
  1794  0640  07A0               	addwf	sprintf@f,f
  1795  0641  30FF               	movlw	-1
  1796  0642  0720               	addwf	sprintf@f,w
  1797  0643  0084               	movwf	4
  1798  0644  118A  200C  118A   	fcall	stringdir
  1799  0647  00A3               	movwf	??_sprintf
  1800  0648  0823               	movf	??_sprintf,w
  1801  0649  00AE               	movwf	sprintf@c
  1802  064A  082E               	movf	sprintf@c,w
  1803  064B  1D03               	btfss	3,2
  1804  064C  2E4E               	goto	u1131
  1805  064D  2E4F               	goto	u1130
  1806  064E                     u1131:
  1807  064E  2CF2               	goto	l1447
  1808  064F                     u1130:
  1809  064F                     l1529:
  1810                           
  1811                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1812  064F  082D               	movf	sprintf@sp,w
  1813  0650  0084               	movwf	4
  1814  0651  1383               	bcf	3,7	;select IRP bank0
  1815  0652  0180               	clrf	0
  1816  0653                     l252:
  1817  0653  0008               	return
  1818  0654                     __end_of_sprintf:
  1819                           
  1820                           	psect	text2
  1821  0297                     __ptext2:	
  1822 ;; *************** function _isdigit *****************
  1823 ;; Defined at:
  1824 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\isdigit.c"
  1825 ;; Parameters:    Size  Location     Type
  1826 ;;  c               1    wreg     unsigned char 
  1827 ;; Auto vars:     Size  Location     Type
  1828 ;;  c               1    1[COMMON] unsigned char 
  1829 ;; Return value:  Size  Location     Type
  1830 ;;		None               void
  1831 ;; Registers used:
  1832 ;;		wreg, status,2, status,0
  1833 ;; Tracked objects:
  1834 ;;		On entry : 0/0
  1835 ;;		On exit  : 0/0
  1836 ;;		Unchanged: 0/0
  1837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1838 ;;      Params:         0       0       0       0       0
  1839 ;;      Locals:         2       0       0       0       0
  1840 ;;      Temps:          0       0       0       0       0
  1841 ;;      Totals:         2       0       0       0       0
  1842 ;;Total ram usage:        2 bytes
  1843 ;; Hardware stack levels used: 1
  1844 ;; This function calls:
  1845 ;;		Nothing
  1846 ;; This function is called by:
  1847 ;;		_sprintf
  1848 ;; This function uses a non-reentrant model
  1849 ;;
  1850                           
  1851                           
  1852                           ;psect for function _isdigit
  1853  0297                     _isdigit:
  1854                           
  1855                           ;incstack = 0
  1856                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  1857                           ;isdigit@c stored from wreg
  1858  0297  00F1               	movwf	isdigit@c
  1859  0298                     l1273:
  1860  0298  01F0               	clrf	_isdigit$780
  1861  0299                     l1275:
  1862  0299  303A               	movlw	58
  1863  029A  0271               	subwf	isdigit@c,w
  1864  029B  1803               	skipnc
  1865  029C  2A9E               	goto	u701
  1866  029D  2A9F               	goto	u700
  1867  029E                     u701:
  1868  029E  2AA7               	goto	l1281
  1869  029F                     u700:
  1870  029F                     l1277:
  1871  029F  3030               	movlw	48
  1872  02A0  0271               	subwf	isdigit@c,w
  1873  02A1  1C03               	skipc
  1874  02A2  2AA4               	goto	u711
  1875  02A3  2AA5               	goto	u710
  1876  02A4                     u711:
  1877  02A4  2AA7               	goto	l1281
  1878  02A5                     u710:
  1879  02A5                     l1279:
  1880  02A5  01F0               	clrf	_isdigit$780
  1881  02A6  0AF0               	incf	_isdigit$780,f
  1882  02A7                     l1281:
  1883  02A7  0C70               	rrf	_isdigit$780,w
  1884  02A8                     l709:
  1885  02A8  0008               	return
  1886  02A9                     __end_of_isdigit:
  1887                           
  1888                           	psect	text3
  1889  02FD                     __ptext3:	
  1890 ;; *************** function ___wmul *****************
  1891 ;; Defined at:
  1892 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\Umul16.c"
  1893 ;; Parameters:    Size  Location     Type
  1894 ;;  multiplier      2    0[COMMON] unsigned int 
  1895 ;;  multiplicand    2    2[COMMON] unsigned int 
  1896 ;; Auto vars:     Size  Location     Type
  1897 ;;  product         2    4[COMMON] unsigned int 
  1898 ;; Return value:  Size  Location     Type
  1899 ;;                  2    0[COMMON] unsigned int 
  1900 ;; Registers used:
  1901 ;;		wreg, status,2, status,0
  1902 ;; Tracked objects:
  1903 ;;		On entry : 0/0
  1904 ;;		On exit  : 0/0
  1905 ;;		Unchanged: 0/0
  1906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1907 ;;      Params:         4       0       0       0       0
  1908 ;;      Locals:         2       0       0       0       0
  1909 ;;      Temps:          0       0       0       0       0
  1910 ;;      Totals:         6       0       0       0       0
  1911 ;;Total ram usage:        6 bytes
  1912 ;; Hardware stack levels used: 1
  1913 ;; This function calls:
  1914 ;;		Nothing
  1915 ;; This function is called by:
  1916 ;;		_sprintf
  1917 ;; This function uses a non-reentrant model
  1918 ;;
  1919                           
  1920                           
  1921                           ;psect for function ___wmul
  1922  02FD                     ___wmul:
  1923  02FD                     l1285:	
  1924                           ;incstack = 0
  1925                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1926                           
  1927  02FD  01F4               	clrf	___wmul@product
  1928  02FE  01F5               	clrf	___wmul@product+1
  1929  02FF                     l1287:
  1930  02FF  1C70               	btfss	___wmul@multiplier,0
  1931  0300  2B02               	goto	u721
  1932  0301  2B03               	goto	u720
  1933  0302                     u721:
  1934  0302  2B09               	goto	l256
  1935  0303                     u720:
  1936  0303                     l1289:
  1937  0303  0872               	movf	___wmul@multiplicand,w
  1938  0304  07F4               	addwf	___wmul@product,f
  1939  0305  1803               	skipnc
  1940  0306  0AF5               	incf	___wmul@product+1,f
  1941  0307  0873               	movf	___wmul@multiplicand+1,w
  1942  0308  07F5               	addwf	___wmul@product+1,f
  1943  0309                     l256:
  1944  0309  3001               	movlw	1
  1945  030A                     u735:
  1946  030A  1003               	clrc
  1947  030B  0DF2               	rlf	___wmul@multiplicand,f
  1948  030C  0DF3               	rlf	___wmul@multiplicand+1,f
  1949  030D  3EFF               	addlw	-1
  1950  030E  1D03               	skipz
  1951  030F  2B0A               	goto	u735
  1952  0310                     l1291:
  1953  0310  3001               	movlw	1
  1954  0311                     u745:
  1955  0311  1003               	clrc
  1956  0312  0CF1               	rrf	___wmul@multiplier+1,f
  1957  0313  0CF0               	rrf	___wmul@multiplier,f
  1958  0314  3EFF               	addlw	-1
  1959  0315  1D03               	skipz
  1960  0316  2B11               	goto	u745
  1961  0317                     l1293:
  1962  0317  0870               	movf	___wmul@multiplier,w
  1963  0318  0471               	iorwf	___wmul@multiplier+1,w
  1964  0319  1D03               	btfss	3,2
  1965  031A  2B1C               	goto	u751
  1966  031B  2B1D               	goto	u750
  1967  031C                     u751:
  1968  031C  2AFF               	goto	l1287
  1969  031D                     u750:
  1970  031D                     l1295:
  1971  031D  0875               	movf	___wmul@product+1,w
  1972  031E  00F1               	movwf	?___wmul+1
  1973  031F  0874               	movf	___wmul@product,w
  1974  0320  00F0               	movwf	?___wmul
  1975  0321                     l258:
  1976  0321  0008               	return
  1977  0322                     __end_of___wmul:
  1978                           
  1979                           	psect	text4
  1980  0357                     __ptext4:	
  1981 ;; *************** function ___lwmod *****************
  1982 ;; Defined at:
  1983 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwmod.c"
  1984 ;; Parameters:    Size  Location     Type
  1985 ;;  divisor         2    8[COMMON] unsigned int 
  1986 ;;  dividend        2   10[COMMON] unsigned int 
  1987 ;; Auto vars:     Size  Location     Type
  1988 ;;  counter         1   13[COMMON] unsigned char 
  1989 ;; Return value:  Size  Location     Type
  1990 ;;                  2    8[COMMON] unsigned int 
  1991 ;; Registers used:
  1992 ;;		wreg, status,2, status,0
  1993 ;; Tracked objects:
  1994 ;;		On entry : 0/0
  1995 ;;		On exit  : 0/0
  1996 ;;		Unchanged: 0/0
  1997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1998 ;;      Params:         4       0       0       0       0
  1999 ;;      Locals:         1       0       0       0       0
  2000 ;;      Temps:          1       0       0       0       0
  2001 ;;      Totals:         6       0       0       0       0
  2002 ;;Total ram usage:        6 bytes
  2003 ;; Hardware stack levels used: 1
  2004 ;; This function calls:
  2005 ;;		Nothing
  2006 ;; This function is called by:
  2007 ;;		_sprintf
  2008 ;; This function uses a non-reentrant model
  2009 ;;
  2010                           
  2011                           
  2012                           ;psect for function ___lwmod
  2013  0357                     ___lwmod:
  2014  0357                     l1325:	
  2015                           ;incstack = 0
  2016                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2017                           
  2018  0357  0878               	movf	___lwmod@divisor,w
  2019  0358  0479               	iorwf	___lwmod@divisor+1,w
  2020  0359  1903               	btfsc	3,2
  2021  035A  2B5C               	goto	u831
  2022  035B  2B5D               	goto	u830
  2023  035C                     u831:
  2024  035C  2B8C               	goto	l1343
  2025  035D                     u830:
  2026  035D                     l1327:
  2027  035D  01FD               	clrf	___lwmod@counter
  2028  035E  0AFD               	incf	___lwmod@counter,f
  2029  035F  2B6B               	goto	l1333
  2030  0360                     l1329:
  2031  0360  3001               	movlw	1
  2032  0361                     u845:
  2033  0361  1003               	clrc
  2034  0362  0DF8               	rlf	___lwmod@divisor,f
  2035  0363  0DF9               	rlf	___lwmod@divisor+1,f
  2036  0364  3EFF               	addlw	-1
  2037  0365  1D03               	skipz
  2038  0366  2B61               	goto	u845
  2039  0367                     l1331:
  2040  0367  3001               	movlw	1
  2041  0368  00FC               	movwf	??___lwmod
  2042  0369  087C               	movf	??___lwmod,w
  2043  036A  07FD               	addwf	___lwmod@counter,f
  2044  036B                     l1333:
  2045  036B  1FF9               	btfss	___lwmod@divisor+1,7
  2046  036C  2B6E               	goto	u851
  2047  036D  2B6F               	goto	u850
  2048  036E                     u851:
  2049  036E  2B60               	goto	l1329
  2050  036F                     u850:
  2051  036F                     l1335:
  2052  036F  0879               	movf	___lwmod@divisor+1,w
  2053  0370  027B               	subwf	___lwmod@dividend+1,w
  2054  0371  1D03               	skipz
  2055  0372  2B75               	goto	u865
  2056  0373  0878               	movf	___lwmod@divisor,w
  2057  0374  027A               	subwf	___lwmod@dividend,w
  2058  0375                     u865:
  2059  0375  1C03               	skipc
  2060  0376  2B78               	goto	u861
  2061  0377  2B79               	goto	u860
  2062  0378                     u861:
  2063  0378  2B7F               	goto	l1339
  2064  0379                     u860:
  2065  0379                     l1337:
  2066  0379  0878               	movf	___lwmod@divisor,w
  2067  037A  02FA               	subwf	___lwmod@dividend,f
  2068  037B  0879               	movf	___lwmod@divisor+1,w
  2069  037C  1C03               	skipc
  2070  037D  03FB               	decf	___lwmod@dividend+1,f
  2071  037E  02FB               	subwf	___lwmod@dividend+1,f
  2072  037F                     l1339:
  2073  037F  3001               	movlw	1
  2074  0380                     u875:
  2075  0380  1003               	clrc
  2076  0381  0CF9               	rrf	___lwmod@divisor+1,f
  2077  0382  0CF8               	rrf	___lwmod@divisor,f
  2078  0383  3EFF               	addlw	-1
  2079  0384  1D03               	skipz
  2080  0385  2B80               	goto	u875
  2081  0386                     l1341:
  2082  0386  3001               	movlw	1
  2083  0387  02FD               	subwf	___lwmod@counter,f
  2084  0388  1D03               	btfss	3,2
  2085  0389  2B8B               	goto	u881
  2086  038A  2B8C               	goto	u880
  2087  038B                     u881:
  2088  038B  2B6F               	goto	l1335
  2089  038C                     u880:
  2090  038C                     l1343:
  2091  038C  087B               	movf	___lwmod@dividend+1,w
  2092  038D  00F9               	movwf	?___lwmod+1
  2093  038E  087A               	movf	___lwmod@dividend,w
  2094  038F  00F8               	movwf	?___lwmod
  2095  0390                     l538:
  2096  0390  0008               	return
  2097  0391                     __end_of___lwmod:
  2098                           
  2099                           	psect	text5
  2100  0411                     __ptext5:	
  2101 ;; *************** function ___lwdiv *****************
  2102 ;; Defined at:
  2103 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwdiv.c"
  2104 ;; Parameters:    Size  Location     Type
  2105 ;;  divisor         2    0[COMMON] unsigned int 
  2106 ;;  dividend        2    2[COMMON] unsigned int 
  2107 ;; Auto vars:     Size  Location     Type
  2108 ;;  quotient        2    5[COMMON] unsigned int 
  2109 ;;  counter         1    7[COMMON] unsigned char 
  2110 ;; Return value:  Size  Location     Type
  2111 ;;                  2    0[COMMON] unsigned int 
  2112 ;; Registers used:
  2113 ;;		wreg, status,2, status,0
  2114 ;; Tracked objects:
  2115 ;;		On entry : 0/0
  2116 ;;		On exit  : 0/0
  2117 ;;		Unchanged: 0/0
  2118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2119 ;;      Params:         4       0       0       0       0
  2120 ;;      Locals:         3       0       0       0       0
  2121 ;;      Temps:          1       0       0       0       0
  2122 ;;      Totals:         8       0       0       0       0
  2123 ;;Total ram usage:        8 bytes
  2124 ;; Hardware stack levels used: 1
  2125 ;; This function calls:
  2126 ;;		Nothing
  2127 ;; This function is called by:
  2128 ;;		_sprintf
  2129 ;; This function uses a non-reentrant model
  2130 ;;
  2131                           
  2132                           
  2133                           ;psect for function ___lwdiv
  2134  0411                     ___lwdiv:
  2135  0411                     l1299:	
  2136                           ;incstack = 0
  2137                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2138                           
  2139  0411  01F5               	clrf	___lwdiv@quotient
  2140  0412  01F6               	clrf	___lwdiv@quotient+1
  2141  0413                     l1301:
  2142  0413  0870               	movf	___lwdiv@divisor,w
  2143  0414  0471               	iorwf	___lwdiv@divisor+1,w
  2144  0415  1903               	btfsc	3,2
  2145  0416  2C18               	goto	u761
  2146  0417  2C19               	goto	u760
  2147  0418                     u761:
  2148  0418  2C50               	goto	l1321
  2149  0419                     u760:
  2150  0419                     l1303:
  2151  0419  01F7               	clrf	___lwdiv@counter
  2152  041A  0AF7               	incf	___lwdiv@counter,f
  2153  041B  2C27               	goto	l1309
  2154  041C                     l1305:
  2155  041C  3001               	movlw	1
  2156  041D                     u775:
  2157  041D  1003               	clrc
  2158  041E  0DF0               	rlf	___lwdiv@divisor,f
  2159  041F  0DF1               	rlf	___lwdiv@divisor+1,f
  2160  0420  3EFF               	addlw	-1
  2161  0421  1D03               	skipz
  2162  0422  2C1D               	goto	u775
  2163  0423                     l1307:
  2164  0423  3001               	movlw	1
  2165  0424  00F4               	movwf	??___lwdiv
  2166  0425  0874               	movf	??___lwdiv,w
  2167  0426  07F7               	addwf	___lwdiv@counter,f
  2168  0427                     l1309:
  2169  0427  1FF1               	btfss	___lwdiv@divisor+1,7
  2170  0428  2C2A               	goto	u781
  2171  0429  2C2B               	goto	u780
  2172  042A                     u781:
  2173  042A  2C1C               	goto	l1305
  2174  042B                     u780:
  2175  042B                     l1311:
  2176  042B  3001               	movlw	1
  2177  042C                     u795:
  2178  042C  1003               	clrc
  2179  042D  0DF5               	rlf	___lwdiv@quotient,f
  2180  042E  0DF6               	rlf	___lwdiv@quotient+1,f
  2181  042F  3EFF               	addlw	-1
  2182  0430  1D03               	skipz
  2183  0431  2C2C               	goto	u795
  2184  0432  0871               	movf	___lwdiv@divisor+1,w
  2185  0433  0273               	subwf	___lwdiv@dividend+1,w
  2186  0434  1D03               	skipz
  2187  0435  2C38               	goto	u805
  2188  0436  0870               	movf	___lwdiv@divisor,w
  2189  0437  0272               	subwf	___lwdiv@dividend,w
  2190  0438                     u805:
  2191  0438  1C03               	skipc
  2192  0439  2C3B               	goto	u801
  2193  043A  2C3C               	goto	u800
  2194  043B                     u801:
  2195  043B  2C43               	goto	l1317
  2196  043C                     u800:
  2197  043C                     l1313:
  2198  043C  0870               	movf	___lwdiv@divisor,w
  2199  043D  02F2               	subwf	___lwdiv@dividend,f
  2200  043E  0871               	movf	___lwdiv@divisor+1,w
  2201  043F  1C03               	skipc
  2202  0440  03F3               	decf	___lwdiv@dividend+1,f
  2203  0441  02F3               	subwf	___lwdiv@dividend+1,f
  2204  0442                     l1315:
  2205  0442  1475               	bsf	___lwdiv@quotient,0
  2206  0443                     l1317:
  2207  0443  3001               	movlw	1
  2208  0444                     u815:
  2209  0444  1003               	clrc
  2210  0445  0CF1               	rrf	___lwdiv@divisor+1,f
  2211  0446  0CF0               	rrf	___lwdiv@divisor,f
  2212  0447  3EFF               	addlw	-1
  2213  0448  1D03               	skipz
  2214  0449  2C44               	goto	u815
  2215  044A                     l1319:
  2216  044A  3001               	movlw	1
  2217  044B  02F7               	subwf	___lwdiv@counter,f
  2218  044C  1D03               	btfss	3,2
  2219  044D  2C4F               	goto	u821
  2220  044E  2C50               	goto	u820
  2221  044F                     u821:
  2222  044F  2C2B               	goto	l1311
  2223  0450                     u820:
  2224  0450                     l1321:
  2225  0450  0876               	movf	___lwdiv@quotient+1,w
  2226  0451  00F1               	movwf	?___lwdiv+1
  2227  0452  0875               	movf	___lwdiv@quotient,w
  2228  0453  00F0               	movwf	?___lwdiv
  2229  0454                     l528:
  2230  0454  0008               	return
  2231  0455                     __end_of___lwdiv:
  2232                           
  2233                           	psect	text6
  2234  028D                     __ptext6:	
  2235 ;; *************** function _Retardo *****************
  2236 ;; Defined at:
  2237 ;;		line 104 in file "main.c"
  2238 ;; Parameters:    Size  Location     Type
  2239 ;;		None
  2240 ;; Auto vars:     Size  Location     Type
  2241 ;;		None
  2242 ;; Return value:  Size  Location     Type
  2243 ;;                  1    wreg      void 
  2244 ;; Registers used:
  2245 ;;		wreg
  2246 ;; Tracked objects:
  2247 ;;		On entry : 0/0
  2248 ;;		On exit  : 0/0
  2249 ;;		Unchanged: 0/0
  2250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2251 ;;      Params:         0       0       0       0       0
  2252 ;;      Locals:         0       0       0       0       0
  2253 ;;      Temps:          2       0       0       0       0
  2254 ;;      Totals:         2       0       0       0       0
  2255 ;;Total ram usage:        2 bytes
  2256 ;; Hardware stack levels used: 1
  2257 ;; This function calls:
  2258 ;;		Nothing
  2259 ;; This function is called by:
  2260 ;;		_main
  2261 ;; This function uses a non-reentrant model
  2262 ;;
  2263                           
  2264                           
  2265                           ;psect for function _Retardo
  2266  028D                     _Retardo:
  2267  028D                     l1443:	
  2268                           ;incstack = 0
  2269                           ; Regs used in _Retardo: [wreg]
  2270                           
  2271                           
  2272                           ;main.c: 106:     _delay((unsigned long)((100)*(2000000/4000.0)));
  2273  028D  3041               	movlw	65
  2274  028E  00F1               	movwf	??_Retardo+1
  2275  028F  30EE               	movlw	238
  2276  0290  00F0               	movwf	??_Retardo
  2277  0291                     u1337:
  2278  0291  0BF0               	decfsz	??_Retardo,f
  2279  0292  2A91               	goto	u1337
  2280  0293  0BF1               	decfsz	??_Retardo+1,f
  2281  0294  2A91               	goto	u1337
  2282  0295  0000               	nop
  2283  0296                     l101:
  2284  0296  0008               	return
  2285  0297                     __end_of_Retardo:
  2286                           
  2287                           	psect	text7
  2288  0391                     __ptext7:	
  2289 ;; *************** function _Lcd_Write_String *****************
  2290 ;; Defined at:
  2291 ;;		line 195 in file "./lcd_16x4.h"
  2292 ;; Parameters:    Size  Location     Type
  2293 ;;  a               2    5[COMMON] PTR unsigned char 
  2294 ;;		 -> STR_8(3), STR_7(3), STR_6(3), STR_5(3), 
  2295 ;;		 -> main@s(20), STR_2(11), STR_1(11), 
  2296 ;; Auto vars:     Size  Location     Type
  2297 ;;  i               2   10[COMMON] int 
  2298 ;; Return value:  Size  Location     Type
  2299 ;;                  1    wreg      void 
  2300 ;; Registers used:
  2301 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2302 ;; Tracked objects:
  2303 ;;		On entry : 0/0
  2304 ;;		On exit  : 0/0
  2305 ;;		Unchanged: 0/0
  2306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2307 ;;      Params:         2       0       0       0       0
  2308 ;;      Locals:         2       0       0       0       0
  2309 ;;      Temps:          3       0       0       0       0
  2310 ;;      Totals:         7       0       0       0       0
  2311 ;;Total ram usage:        7 bytes
  2312 ;; Hardware stack levels used: 1
  2313 ;; Hardware stack levels required when called: 2
  2314 ;; This function calls:
  2315 ;;		_Lcd_Write_Char
  2316 ;; This function is called by:
  2317 ;;		_main
  2318 ;; This function uses a non-reentrant model
  2319 ;;
  2320                           
  2321                           
  2322                           ;psect for function _Lcd_Write_String
  2323  0391                     _Lcd_Write_String:
  2324  0391                     l1399:	
  2325                           ;incstack = 0
  2326                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2327                           
  2328                           
  2329                           ;./lcd_16x4.h: 195: void Lcd_Write_String(char *a);./lcd_16x4.h: 196: {;./lcd_16x4.h: 19
      +                          7:  int i;;./lcd_16x4.h: 198:  for(i=0;a[i]!='\0';i++)
  2330  0391  01FA               	clrf	Lcd_Write_String@i
  2331  0392  01FB               	clrf	Lcd_Write_String@i+1
  2332  0393  2BB2               	goto	l1405
  2333  0394                     l1401:
  2334                           
  2335                           ;./lcd_16x4.h: 199:     Lcd_Write_Char(a[i]);
  2336  0394  087A               	movf	Lcd_Write_String@i,w
  2337  0395  0775               	addwf	Lcd_Write_String@a,w
  2338  0396  00F8               	movwf	??_Lcd_Write_String+1
  2339  0397  0876               	movf	Lcd_Write_String@a+1,w
  2340  0398  00F7               	movwf	??_Lcd_Write_String
  2341  0399  1803               	skipnc
  2342  039A  0AF7               	incf	??_Lcd_Write_String,f
  2343  039B  1FFA               	btfss	Lcd_Write_String@i,7
  2344  039C  2B9E               	goto	u970
  2345  039D  03F7               	decf	??_Lcd_Write_String,f
  2346  039E                     u970:
  2347  039E  0877               	movf	??_Lcd_Write_String,w
  2348  039F  00F9               	movwf	??_Lcd_Write_String+2
  2349  03A0  0879               	movf	??_Lcd_Write_String+2,w
  2350  03A1  1283               	bcf	3,5	;RP0=0, select bank0
  2351  03A2  1303               	bcf	3,6	;RP1=0, select bank0
  2352  03A3  00FF               	movwf	btemp+1
  2353  03A4  0878               	movf	??_Lcd_Write_String+1,w
  2354  03A5  0084               	movwf	4
  2355  03A6  118A  2002  118A   	fcall	stringtab
  2356  03A9  118A  2322  118A   	fcall	_Lcd_Write_Char
  2357  03AC                     l1403:
  2358  03AC  3001               	movlw	1
  2359  03AD  07FA               	addwf	Lcd_Write_String@i,f
  2360  03AE  1803               	skipnc
  2361  03AF  0AFB               	incf	Lcd_Write_String@i+1,f
  2362  03B0  3000               	movlw	0
  2363  03B1  07FB               	addwf	Lcd_Write_String@i+1,f
  2364  03B2                     l1405:
  2365  03B2  087A               	movf	Lcd_Write_String@i,w
  2366  03B3  0775               	addwf	Lcd_Write_String@a,w
  2367  03B4  00F8               	movwf	??_Lcd_Write_String+1
  2368  03B5  0876               	movf	Lcd_Write_String@a+1,w
  2369  03B6  00F7               	movwf	??_Lcd_Write_String
  2370  03B7  1803               	skipnc
  2371  03B8  0AF7               	incf	??_Lcd_Write_String,f
  2372  03B9  1FFA               	btfss	Lcd_Write_String@i,7
  2373  03BA  2BBC               	goto	u980
  2374  03BB  03F7               	decf	??_Lcd_Write_String,f
  2375  03BC                     u980:
  2376  03BC  0877               	movf	??_Lcd_Write_String,w
  2377  03BD  00F9               	movwf	??_Lcd_Write_String+2
  2378  03BE  0879               	movf	??_Lcd_Write_String+2,w
  2379  03BF  1283               	bcf	3,5	;RP0=0, select bank0
  2380  03C0  1303               	bcf	3,6	;RP1=0, select bank0
  2381  03C1  00FF               	movwf	btemp+1
  2382  03C2  0878               	movf	??_Lcd_Write_String+1,w
  2383  03C3  0084               	movwf	4
  2384  03C4  118A  2002  118A   	fcall	stringtab
  2385  03C7  3A00               	xorlw	0
  2386  03C8  1D03               	skipz
  2387  03C9  2BCB               	goto	u991
  2388  03CA  2BCC               	goto	u990
  2389  03CB                     u991:
  2390  03CB  2B94               	goto	l1401
  2391  03CC                     u990:
  2392  03CC                     l75:
  2393  03CC  0008               	return
  2394  03CD                     __end_of_Lcd_Write_String:
  2395                           
  2396                           	psect	text8
  2397  0322                     __ptext8:	
  2398 ;; *************** function _Lcd_Write_Char *****************
  2399 ;; Defined at:
  2400 ;;		line 176 in file "./lcd_16x4.h"
  2401 ;; Parameters:    Size  Location     Type
  2402 ;;  a               1    wreg     unsigned char 
  2403 ;; Auto vars:     Size  Location     Type
  2404 ;;  a               1    4[COMMON] unsigned char 
  2405 ;;  y               1    3[COMMON] unsigned char 
  2406 ;;  temp            1    2[COMMON] unsigned char 
  2407 ;; Return value:  Size  Location     Type
  2408 ;;                  1    wreg      void 
  2409 ;; Registers used:
  2410 ;;		wreg, status,2, status,0, pclath, cstack
  2411 ;; Tracked objects:
  2412 ;;		On entry : 0/0
  2413 ;;		On exit  : 0/0
  2414 ;;		Unchanged: 0/0
  2415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2416 ;;      Params:         0       0       0       0       0
  2417 ;;      Locals:         3       0       0       0       0
  2418 ;;      Temps:          1       0       0       0       0
  2419 ;;      Totals:         4       0       0       0       0
  2420 ;;Total ram usage:        4 bytes
  2421 ;; Hardware stack levels used: 1
  2422 ;; Hardware stack levels required when called: 1
  2423 ;; This function calls:
  2424 ;;		_Lcd_Port
  2425 ;; This function is called by:
  2426 ;;		_Lcd_Write_String
  2427 ;; This function uses a non-reentrant model
  2428 ;;
  2429                           
  2430                           
  2431                           ;psect for function _Lcd_Write_Char
  2432  0322                     _Lcd_Write_Char:
  2433                           
  2434                           ;incstack = 0
  2435                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2436                           ;Lcd_Write_Char@a stored from wreg
  2437  0322  00F4               	movwf	Lcd_Write_Char@a
  2438  0323                     l1253:
  2439                           
  2440                           ;./lcd_16x4.h: 176: void Lcd_Write_Char(char a);./lcd_16x4.h: 180: {;./lcd_16x4.h: 181: 
      +                             char temp,y;;./lcd_16x4.h: 182:    temp = (char)(a&0x0F);
  2441  0323  0874               	movf	Lcd_Write_Char@a,w
  2442  0324  390F               	andlw	15
  2443  0325  00F1               	movwf	??_Lcd_Write_Char
  2444  0326  0871               	movf	??_Lcd_Write_Char,w
  2445  0327  00F2               	movwf	Lcd_Write_Char@temp
  2446                           
  2447                           ;./lcd_16x4.h: 183:    y = (char)(a&0xF0);
  2448  0328  0874               	movf	Lcd_Write_Char@a,w
  2449  0329  39F0               	andlw	240
  2450  032A  00F1               	movwf	??_Lcd_Write_Char
  2451  032B  0871               	movf	??_Lcd_Write_Char,w
  2452  032C  00F3               	movwf	Lcd_Write_Char@y
  2453  032D                     l1255:
  2454                           
  2455                           ;./lcd_16x4.h: 184:    RB1 = 1;
  2456  032D  1283               	bcf	3,5	;RP0=0, select bank0
  2457  032E  1303               	bcf	3,6	;RP1=0, select bank0
  2458  032F  1486               	bsf	6,1	;volatile
  2459  0330                     l1257:
  2460                           
  2461                           ;./lcd_16x4.h: 185:    Lcd_Port((char)(y>>4));
  2462  0330  0873               	movf	Lcd_Write_Char@y,w
  2463  0331  00F1               	movwf	??_Lcd_Write_Char
  2464  0332  3004               	movlw	4
  2465  0333                     u695:
  2466  0333  1003               	clrc
  2467  0334  0CF1               	rrf	??_Lcd_Write_Char,f
  2468  0335  3EFF               	addlw	-1
  2469  0336  1D03               	skipz
  2470  0337  2B33               	goto	u695
  2471  0338  0871               	movf	??_Lcd_Write_Char,w
  2472  0339  118A  22DB  118A   	fcall	_Lcd_Port
  2473  033C                     l1259:
  2474                           
  2475                           ;./lcd_16x4.h: 186:    RB2 = 1;
  2476  033C  1283               	bcf	3,5	;RP0=0, select bank0
  2477  033D  1303               	bcf	3,6	;RP1=0, select bank0
  2478  033E  1506               	bsf	6,2	;volatile
  2479  033F                     l1261:
  2480                           
  2481                           ;./lcd_16x4.h: 187:    _delay((unsigned long)((40)*(2000000/4000000.0)));
  2482  033F  3006               	movlw	6
  2483  0340  00F1               	movwf	??_Lcd_Write_Char
  2484  0341                     u1347:
  2485  0341  0BF1               	decfsz	??_Lcd_Write_Char,f
  2486  0342  2B41               	goto	u1347
  2487  0343  0000               	nop
  2488  0344                     l1263:
  2489                           
  2490                           ;./lcd_16x4.h: 188:    RB2 = 0;
  2491  0344  1283               	bcf	3,5	;RP0=0, select bank0
  2492  0345  1303               	bcf	3,6	;RP1=0, select bank0
  2493  0346  1106               	bcf	6,2	;volatile
  2494  0347                     l1265:
  2495                           
  2496                           ;./lcd_16x4.h: 189:    Lcd_Port(temp);
  2497  0347  0872               	movf	Lcd_Write_Char@temp,w
  2498  0348  118A  22DB  118A   	fcall	_Lcd_Port
  2499  034B                     l1267:
  2500                           
  2501                           ;./lcd_16x4.h: 190:    RB2 = 1;
  2502  034B  1283               	bcf	3,5	;RP0=0, select bank0
  2503  034C  1303               	bcf	3,6	;RP1=0, select bank0
  2504  034D  1506               	bsf	6,2	;volatile
  2505  034E                     l1269:
  2506                           
  2507                           ;./lcd_16x4.h: 191:    _delay((unsigned long)((40)*(2000000/4000000.0)));
  2508  034E  3006               	movlw	6
  2509  034F  00F1               	movwf	??_Lcd_Write_Char
  2510  0350                     u1357:
  2511  0350  0BF1               	decfsz	??_Lcd_Write_Char,f
  2512  0351  2B50               	goto	u1357
  2513  0352  0000               	nop
  2514  0353                     l1271:
  2515                           
  2516                           ;./lcd_16x4.h: 192:    RB2 = 0;
  2517  0353  1283               	bcf	3,5	;RP0=0, select bank0
  2518  0354  1303               	bcf	3,6	;RP1=0, select bank0
  2519  0355  1106               	bcf	6,2	;volatile
  2520  0356                     l69:
  2521  0356  0008               	return
  2522  0357                     __end_of_Lcd_Write_Char:
  2523                           
  2524                           	psect	text9
  2525  0455                     __ptext9:	
  2526 ;; *************** function _Lcd_Set_Cursor *****************
  2527 ;; Defined at:
  2528 ;;		line 77 in file "./lcd_16x4.h"
  2529 ;; Parameters:    Size  Location     Type
  2530 ;;  b               1    wreg     unsigned char 
  2531 ;;  a               1    4[COMMON] unsigned char 
  2532 ;; Auto vars:     Size  Location     Type
  2533 ;;  b               1    7[COMMON] unsigned char 
  2534 ;;  temp            1   10[COMMON] unsigned char 
  2535 ;;  y               1    9[COMMON] unsigned char 
  2536 ;;  z               1    8[COMMON] unsigned char 
  2537 ;; Return value:  Size  Location     Type
  2538 ;;                  1    wreg      void 
  2539 ;; Registers used:
  2540 ;;		wreg, status,2, status,0, pclath, cstack
  2541 ;; Tracked objects:
  2542 ;;		On entry : 0/0
  2543 ;;		On exit  : 0/0
  2544 ;;		Unchanged: 0/0
  2545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2546 ;;      Params:         1       0       0       0       0
  2547 ;;      Locals:         4       0       0       0       0
  2548 ;;      Temps:          2       0       0       0       0
  2549 ;;      Totals:         7       0       0       0       0
  2550 ;;Total ram usage:        7 bytes
  2551 ;; Hardware stack levels used: 1
  2552 ;; Hardware stack levels required when called: 2
  2553 ;; This function calls:
  2554 ;;		_Lcd_Cmd
  2555 ;; This function is called by:
  2556 ;;		_main
  2557 ;; This function uses a non-reentrant model
  2558 ;;
  2559                           
  2560                           
  2561                           ;psect for function _Lcd_Set_Cursor
  2562  0455                     _Lcd_Set_Cursor:
  2563                           
  2564                           ;incstack = 0
  2565                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2566                           ;Lcd_Set_Cursor@b stored from wreg
  2567  0455  00F7               	movwf	Lcd_Set_Cursor@b
  2568  0456                     l1349:
  2569                           
  2570                           ;./lcd_16x4.h: 77: void Lcd_Set_Cursor(char b, char a);./lcd_16x4.h: 85: {;./lcd_16x4.h:
      +                           86:  char temp,z,y;;./lcd_16x4.h: 87:  if(a == 1)
  2571  0456  0374               	decf	Lcd_Set_Cursor@a,w
  2572  0457  1D03               	btfss	3,2
  2573  0458  2C5A               	goto	u891
  2574  0459  2C5B               	goto	u890
  2575  045A                     u891:
  2576  045A  2C7A               	goto	l1359
  2577  045B                     u890:
  2578  045B                     l1351:
  2579                           
  2580                           ;./lcd_16x4.h: 88:  {;./lcd_16x4.h: 89:    temp = (char)(0x80 + b - 1);
  2581  045B  0877               	movf	Lcd_Set_Cursor@b,w
  2582  045C  3E7F               	addlw	127
  2583  045D  00F5               	movwf	??_Lcd_Set_Cursor
  2584  045E  0875               	movf	??_Lcd_Set_Cursor,w
  2585  045F  00FA               	movwf	Lcd_Set_Cursor@temp
  2586                           
  2587                           ;./lcd_16x4.h: 92:   z = (char)(temp>>4);
  2588  0460  087A               	movf	Lcd_Set_Cursor@temp,w
  2589  0461  00F5               	movwf	??_Lcd_Set_Cursor
  2590  0462  3004               	movlw	4
  2591  0463                     u905:
  2592  0463  1003               	clrc
  2593  0464  0CF5               	rrf	??_Lcd_Set_Cursor,f
  2594  0465  3EFF               	addlw	-1
  2595  0466  1D03               	skipz
  2596  0467  2C63               	goto	u905
  2597  0468  0875               	movf	??_Lcd_Set_Cursor,w
  2598  0469  00F6               	movwf	??_Lcd_Set_Cursor+1
  2599  046A  0876               	movf	??_Lcd_Set_Cursor+1,w
  2600  046B  00F8               	movwf	Lcd_Set_Cursor@z
  2601  046C                     l1353:
  2602                           
  2603                           ;./lcd_16x4.h: 94:   y = (char)(temp & 0x0F);
  2604  046C  087A               	movf	Lcd_Set_Cursor@temp,w
  2605  046D  390F               	andlw	15
  2606  046E  00F5               	movwf	??_Lcd_Set_Cursor
  2607  046F  0875               	movf	??_Lcd_Set_Cursor,w
  2608  0470  00F9               	movwf	Lcd_Set_Cursor@y
  2609  0471                     l1355:
  2610                           
  2611                           ;./lcd_16x4.h: 95:   Lcd_Cmd(z);
  2612  0471  0878               	movf	Lcd_Set_Cursor@z,w
  2613  0472  118A  22A9  118A   	fcall	_Lcd_Cmd
  2614  0475                     l1357:
  2615                           
  2616                           ;./lcd_16x4.h: 96:   Lcd_Cmd(y);
  2617  0475  0879               	movf	Lcd_Set_Cursor@y,w
  2618  0476  118A  22A9  118A   	fcall	_Lcd_Cmd
  2619                           
  2620                           ;./lcd_16x4.h: 97:  }
  2621  0479  2CE9               	goto	l63
  2622  047A                     l1359:
  2623  047A  3002               	movlw	2
  2624  047B  0674               	xorwf	Lcd_Set_Cursor@a,w
  2625  047C  1D03               	btfss	3,2
  2626  047D  2C7F               	goto	u911
  2627  047E  2C80               	goto	u910
  2628  047F                     u911:
  2629  047F  2C9F               	goto	l1369
  2630  0480                     u910:
  2631  0480                     l1361:
  2632                           
  2633                           ;./lcd_16x4.h: 99:  {;./lcd_16x4.h: 100:   temp = (char)(0xC0 + b - 1);
  2634  0480  0877               	movf	Lcd_Set_Cursor@b,w
  2635  0481  3EBF               	addlw	191
  2636  0482  00F5               	movwf	??_Lcd_Set_Cursor
  2637  0483  0875               	movf	??_Lcd_Set_Cursor,w
  2638  0484  00FA               	movwf	Lcd_Set_Cursor@temp
  2639                           
  2640                           ;./lcd_16x4.h: 103:   z = (char)(temp>>4);
  2641  0485  087A               	movf	Lcd_Set_Cursor@temp,w
  2642  0486  00F5               	movwf	??_Lcd_Set_Cursor
  2643  0487  3004               	movlw	4
  2644  0488                     u925:
  2645  0488  1003               	clrc
  2646  0489  0CF5               	rrf	??_Lcd_Set_Cursor,f
  2647  048A  3EFF               	addlw	-1
  2648  048B  1D03               	skipz
  2649  048C  2C88               	goto	u925
  2650  048D  0875               	movf	??_Lcd_Set_Cursor,w
  2651  048E  00F6               	movwf	??_Lcd_Set_Cursor+1
  2652  048F  0876               	movf	??_Lcd_Set_Cursor+1,w
  2653  0490  00F8               	movwf	Lcd_Set_Cursor@z
  2654  0491                     l1363:
  2655                           
  2656                           ;./lcd_16x4.h: 104:   y = (char)(temp & 0x0F);
  2657  0491  087A               	movf	Lcd_Set_Cursor@temp,w
  2658  0492  390F               	andlw	15
  2659  0493  00F5               	movwf	??_Lcd_Set_Cursor
  2660  0494  0875               	movf	??_Lcd_Set_Cursor,w
  2661  0495  00F9               	movwf	Lcd_Set_Cursor@y
  2662  0496                     l1365:
  2663                           
  2664                           ;./lcd_16x4.h: 105:   Lcd_Cmd(z);
  2665  0496  0878               	movf	Lcd_Set_Cursor@z,w
  2666  0497  118A  22A9  118A   	fcall	_Lcd_Cmd
  2667  049A                     l1367:
  2668                           
  2669                           ;./lcd_16x4.h: 106:   Lcd_Cmd(y);
  2670  049A  0879               	movf	Lcd_Set_Cursor@y,w
  2671  049B  118A  22A9  118A   	fcall	_Lcd_Cmd
  2672                           
  2673                           ;./lcd_16x4.h: 107:  }
  2674  049E  2CE9               	goto	l63
  2675  049F                     l1369:
  2676  049F  3003               	movlw	3
  2677  04A0  0674               	xorwf	Lcd_Set_Cursor@a,w
  2678  04A1  1D03               	btfss	3,2
  2679  04A2  2CA4               	goto	u931
  2680  04A3  2CA5               	goto	u930
  2681  04A4                     u931:
  2682  04A4  2CC4               	goto	l1379
  2683  04A5                     u930:
  2684  04A5                     l1371:
  2685                           
  2686                           ;./lcd_16x4.h: 109:  {;./lcd_16x4.h: 110:   temp = (char)(0x90 + b - 1);
  2687  04A5  0877               	movf	Lcd_Set_Cursor@b,w
  2688  04A6  3E8F               	addlw	143
  2689  04A7  00F5               	movwf	??_Lcd_Set_Cursor
  2690  04A8  0875               	movf	??_Lcd_Set_Cursor,w
  2691  04A9  00FA               	movwf	Lcd_Set_Cursor@temp
  2692                           
  2693                           ;./lcd_16x4.h: 113:   z = (char)(temp>>4);
  2694  04AA  087A               	movf	Lcd_Set_Cursor@temp,w
  2695  04AB  00F5               	movwf	??_Lcd_Set_Cursor
  2696  04AC  3004               	movlw	4
  2697  04AD                     u945:
  2698  04AD  1003               	clrc
  2699  04AE  0CF5               	rrf	??_Lcd_Set_Cursor,f
  2700  04AF  3EFF               	addlw	-1
  2701  04B0  1D03               	skipz
  2702  04B1  2CAD               	goto	u945
  2703  04B2  0875               	movf	??_Lcd_Set_Cursor,w
  2704  04B3  00F6               	movwf	??_Lcd_Set_Cursor+1
  2705  04B4  0876               	movf	??_Lcd_Set_Cursor+1,w
  2706  04B5  00F8               	movwf	Lcd_Set_Cursor@z
  2707  04B6                     l1373:
  2708                           
  2709                           ;./lcd_16x4.h: 114:   y = (char)(temp & 0x0F);
  2710  04B6  087A               	movf	Lcd_Set_Cursor@temp,w
  2711  04B7  390F               	andlw	15
  2712  04B8  00F5               	movwf	??_Lcd_Set_Cursor
  2713  04B9  0875               	movf	??_Lcd_Set_Cursor,w
  2714  04BA  00F9               	movwf	Lcd_Set_Cursor@y
  2715  04BB                     l1375:
  2716                           
  2717                           ;./lcd_16x4.h: 115:   Lcd_Cmd(z);
  2718  04BB  0878               	movf	Lcd_Set_Cursor@z,w
  2719  04BC  118A  22A9  118A   	fcall	_Lcd_Cmd
  2720  04BF                     l1377:
  2721                           
  2722                           ;./lcd_16x4.h: 116:   Lcd_Cmd(y);
  2723  04BF  0879               	movf	Lcd_Set_Cursor@y,w
  2724  04C0  118A  22A9  118A   	fcall	_Lcd_Cmd
  2725                           
  2726                           ;./lcd_16x4.h: 117:  }
  2727  04C3  2CE9               	goto	l63
  2728  04C4                     l1379:
  2729  04C4  3004               	movlw	4
  2730  04C5  0674               	xorwf	Lcd_Set_Cursor@a,w
  2731  04C6  1D03               	btfss	3,2
  2732  04C7  2CC9               	goto	u951
  2733  04C8  2CCA               	goto	u950
  2734  04C9                     u951:
  2735  04C9  2CE9               	goto	l59
  2736  04CA                     u950:
  2737  04CA                     l1381:
  2738                           
  2739                           ;./lcd_16x4.h: 119:  {;./lcd_16x4.h: 120:   temp = (char)(0xD0 + b - 1);
  2740  04CA  0877               	movf	Lcd_Set_Cursor@b,w
  2741  04CB  3ECF               	addlw	207
  2742  04CC  00F5               	movwf	??_Lcd_Set_Cursor
  2743  04CD  0875               	movf	??_Lcd_Set_Cursor,w
  2744  04CE  00FA               	movwf	Lcd_Set_Cursor@temp
  2745                           
  2746                           ;./lcd_16x4.h: 123:   z = (char)(temp>>4);
  2747  04CF  087A               	movf	Lcd_Set_Cursor@temp,w
  2748  04D0  00F5               	movwf	??_Lcd_Set_Cursor
  2749  04D1  3004               	movlw	4
  2750  04D2                     u965:
  2751  04D2  1003               	clrc
  2752  04D3  0CF5               	rrf	??_Lcd_Set_Cursor,f
  2753  04D4  3EFF               	addlw	-1
  2754  04D5  1D03               	skipz
  2755  04D6  2CD2               	goto	u965
  2756  04D7  0875               	movf	??_Lcd_Set_Cursor,w
  2757  04D8  00F6               	movwf	??_Lcd_Set_Cursor+1
  2758  04D9  0876               	movf	??_Lcd_Set_Cursor+1,w
  2759  04DA  00F8               	movwf	Lcd_Set_Cursor@z
  2760  04DB                     l1383:
  2761                           
  2762                           ;./lcd_16x4.h: 124:   y = (char)(temp & 0x0F);
  2763  04DB  087A               	movf	Lcd_Set_Cursor@temp,w
  2764  04DC  390F               	andlw	15
  2765  04DD  00F5               	movwf	??_Lcd_Set_Cursor
  2766  04DE  0875               	movf	??_Lcd_Set_Cursor,w
  2767  04DF  00F9               	movwf	Lcd_Set_Cursor@y
  2768  04E0                     l1385:
  2769                           
  2770                           ;./lcd_16x4.h: 125:   Lcd_Cmd(z);
  2771  04E0  0878               	movf	Lcd_Set_Cursor@z,w
  2772  04E1  118A  22A9  118A   	fcall	_Lcd_Cmd
  2773  04E4                     l1387:
  2774                           
  2775                           ;./lcd_16x4.h: 126:   Lcd_Cmd(y);
  2776  04E4  0879               	movf	Lcd_Set_Cursor@y,w
  2777  04E5  118A  22A9  118A   	fcall	_Lcd_Cmd
  2778  04E8  2CE9               	goto	l63
  2779  04E9                     l59:
  2780  04E9                     l63:
  2781  04E9  0008               	return
  2782  04EA                     __end_of_Lcd_Set_Cursor:
  2783                           
  2784                           	psect	text10
  2785  03CD                     __ptext10:	
  2786 ;; *************** function _Lcd_Init *****************
  2787 ;; Defined at:
  2788 ;;		line 130 in file "./lcd_16x4.h"
  2789 ;; Parameters:    Size  Location     Type
  2790 ;;		None
  2791 ;; Auto vars:     Size  Location     Type
  2792 ;;		None
  2793 ;; Return value:  Size  Location     Type
  2794 ;;                  1    wreg      void 
  2795 ;; Registers used:
  2796 ;;		wreg, status,2, status,0, pclath, cstack
  2797 ;; Tracked objects:
  2798 ;;		On entry : 0/0
  2799 ;;		On exit  : 0/0
  2800 ;;		Unchanged: 0/0
  2801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2802 ;;      Params:         0       0       0       0       0
  2803 ;;      Locals:         0       0       0       0       0
  2804 ;;      Temps:          2       0       0       0       0
  2805 ;;      Totals:         2       0       0       0       0
  2806 ;;Total ram usage:        2 bytes
  2807 ;; Hardware stack levels used: 1
  2808 ;; Hardware stack levels required when called: 2
  2809 ;; This function calls:
  2810 ;;		_Lcd_Cmd
  2811 ;;		_Lcd_Port
  2812 ;; This function is called by:
  2813 ;;		_main
  2814 ;; This function uses a non-reentrant model
  2815 ;;
  2816                           
  2817                           
  2818                           ;psect for function _Lcd_Init
  2819  03CD                     _Lcd_Init:
  2820  03CD                     l1389:	
  2821                           ;incstack = 0
  2822                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2823                           
  2824                           
  2825                           ;./lcd_16x4.h: 132:   Lcd_Port(0x00);
  2826  03CD  3000               	movlw	0
  2827  03CE  118A  22DB  118A   	fcall	_Lcd_Port
  2828  03D1                     l1391:
  2829                           
  2830                           ;./lcd_16x4.h: 133:    _delay((unsigned long)((20)*(2000000/4000.0)));
  2831  03D1  300D               	movlw	13
  2832  03D2  00F5               	movwf	??_Lcd_Init+1
  2833  03D3  30FB               	movlw	251
  2834  03D4  00F4               	movwf	??_Lcd_Init
  2835  03D5                     u1367:
  2836  03D5  0BF4               	decfsz	??_Lcd_Init,f
  2837  03D6  2BD5               	goto	u1367
  2838  03D7  0BF5               	decfsz	??_Lcd_Init+1,f
  2839  03D8  2BD5               	goto	u1367
  2840  03D9  2BDA               	nop2
  2841  03DA                     l1393:
  2842                           
  2843                           ;./lcd_16x4.h: 134:   Lcd_Cmd(0x03);
  2844  03DA  3003               	movlw	3
  2845  03DB  118A  22A9  118A   	fcall	_Lcd_Cmd
  2846                           
  2847                           ;./lcd_16x4.h: 137: _delay((unsigned long)((5)*(2000000/4000.0)));
  2848  03DE  3004               	movlw	4
  2849  03DF  00F5               	movwf	??_Lcd_Init+1
  2850  03E0  303D               	movlw	61
  2851  03E1  00F4               	movwf	??_Lcd_Init
  2852  03E2                     u1377:
  2853  03E2  0BF4               	decfsz	??_Lcd_Init,f
  2854  03E3  2BE2               	goto	u1377
  2855  03E4  0BF5               	decfsz	??_Lcd_Init+1,f
  2856  03E5  2BE2               	goto	u1377
  2857  03E6  2BE7               	nop2
  2858  03E7                     l1395:
  2859                           
  2860                           ;./lcd_16x4.h: 138:   Lcd_Cmd(0x03);
  2861  03E7  3003               	movlw	3
  2862  03E8  118A  22A9  118A   	fcall	_Lcd_Cmd
  2863  03EB                     l1397:
  2864                           
  2865                           ;./lcd_16x4.h: 141:  _delay((unsigned long)((1)*(2000000/4000.0)));
  2866  03EB  30A6               	movlw	166
  2867  03EC  00F4               	movwf	??_Lcd_Init
  2868  03ED                     u1387:
  2869  03ED  0BF4               	decfsz	??_Lcd_Init,f
  2870  03EE  2BED               	goto	u1387
  2871  03EF  0000               	nop
  2872                           
  2873                           ;./lcd_16x4.h: 142:   Lcd_Cmd(0x03);
  2874  03F0  3003               	movlw	3
  2875  03F1  118A  22A9  118A   	fcall	_Lcd_Cmd
  2876                           
  2877                           ;./lcd_16x4.h: 146:   Lcd_Cmd(0x02);
  2878  03F4  3002               	movlw	2
  2879  03F5  118A  22A9  118A   	fcall	_Lcd_Cmd
  2880                           
  2881                           ;./lcd_16x4.h: 151:   Lcd_Cmd(0x02);
  2882  03F8  3002               	movlw	2
  2883  03F9  118A  22A9  118A   	fcall	_Lcd_Cmd
  2884                           
  2885                           ;./lcd_16x4.h: 152:   Lcd_Cmd(0x08);
  2886  03FC  3008               	movlw	8
  2887  03FD  118A  22A9  118A   	fcall	_Lcd_Cmd
  2888                           
  2889                           ;./lcd_16x4.h: 159:   Lcd_Cmd(0x00);
  2890  0400  3000               	movlw	0
  2891  0401  118A  22A9  118A   	fcall	_Lcd_Cmd
  2892                           
  2893                           ;./lcd_16x4.h: 160:   Lcd_Cmd(0x0C);
  2894  0404  300C               	movlw	12
  2895  0405  118A  22A9  118A   	fcall	_Lcd_Cmd
  2896                           
  2897                           ;./lcd_16x4.h: 167:   Lcd_Cmd(0x00);
  2898  0408  3000               	movlw	0
  2899  0409  118A  22A9  118A   	fcall	_Lcd_Cmd
  2900                           
  2901                           ;./lcd_16x4.h: 168:   Lcd_Cmd(0x04);
  2902  040C  3004               	movlw	4
  2903  040D  118A  22A9  118A   	fcall	_Lcd_Cmd
  2904  0410                     l66:
  2905  0410  0008               	return
  2906  0411                     __end_of_Lcd_Init:
  2907                           
  2908                           	psect	text11
  2909  0284                     __ptext11:	
  2910 ;; *************** function _Lcd_Clear *****************
  2911 ;; Defined at:
  2912 ;;		line 70 in file "./lcd_16x4.h"
  2913 ;; Parameters:    Size  Location     Type
  2914 ;;		None
  2915 ;; Auto vars:     Size  Location     Type
  2916 ;;		None
  2917 ;; Return value:  Size  Location     Type
  2918 ;;                  1    wreg      void 
  2919 ;; Registers used:
  2920 ;;		wreg, status,2, status,0, pclath, cstack
  2921 ;; Tracked objects:
  2922 ;;		On entry : 0/0
  2923 ;;		On exit  : 0/0
  2924 ;;		Unchanged: 0/0
  2925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2926 ;;      Params:         0       0       0       0       0
  2927 ;;      Locals:         0       0       0       0       0
  2928 ;;      Temps:          0       0       0       0       0
  2929 ;;      Totals:         0       0       0       0       0
  2930 ;;Total ram usage:        0 bytes
  2931 ;; Hardware stack levels used: 1
  2932 ;; Hardware stack levels required when called: 2
  2933 ;; This function calls:
  2934 ;;		_Lcd_Cmd
  2935 ;; This function is called by:
  2936 ;;		_main
  2937 ;; This function uses a non-reentrant model
  2938 ;;
  2939                           
  2940                           
  2941                           ;psect for function _Lcd_Clear
  2942  0284                     _Lcd_Clear:
  2943  0284                     l1347:	
  2944                           ;incstack = 0
  2945                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2946                           
  2947                           
  2948                           ;./lcd_16x4.h: 73:  Lcd_Cmd(0);
  2949  0284  3000               	movlw	0
  2950  0285  118A  22A9  118A   	fcall	_Lcd_Cmd
  2951                           
  2952                           ;./lcd_16x4.h: 74:  Lcd_Cmd(1);
  2953  0288  3001               	movlw	1
  2954  0289  118A  22A9  118A   	fcall	_Lcd_Cmd
  2955  028C                     l53:
  2956  028C  0008               	return
  2957  028D                     __end_of_Lcd_Clear:
  2958                           
  2959                           	psect	text12
  2960  02A9                     __ptext12:	
  2961 ;; *************** function _Lcd_Cmd *****************
  2962 ;; Defined at:
  2963 ;;		line 61 in file "./lcd_16x4.h"
  2964 ;; Parameters:    Size  Location     Type
  2965 ;;  a               1    wreg     unsigned char 
  2966 ;; Auto vars:     Size  Location     Type
  2967 ;;  a               1    3[COMMON] unsigned char 
  2968 ;; Return value:  Size  Location     Type
  2969 ;;                  1    wreg      void 
  2970 ;; Registers used:
  2971 ;;		wreg, status,2, status,0, pclath, cstack
  2972 ;; Tracked objects:
  2973 ;;		On entry : 0/0
  2974 ;;		On exit  : 0/0
  2975 ;;		Unchanged: 0/0
  2976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2977 ;;      Params:         0       0       0       0       0
  2978 ;;      Locals:         1       0       0       0       0
  2979 ;;      Temps:          2       0       0       0       0
  2980 ;;      Totals:         3       0       0       0       0
  2981 ;;Total ram usage:        3 bytes
  2982 ;; Hardware stack levels used: 1
  2983 ;; Hardware stack levels required when called: 1
  2984 ;; This function calls:
  2985 ;;		_Lcd_Port
  2986 ;; This function is called by:
  2987 ;;		_Lcd_Clear
  2988 ;;		_Lcd_Set_Cursor
  2989 ;;		_Lcd_Init
  2990 ;;		_Lcd_Shift_Right
  2991 ;;		_Lcd_Shift_Left
  2992 ;; This function uses a non-reentrant model
  2993 ;;
  2994                           
  2995                           
  2996                           ;psect for function _Lcd_Cmd
  2997  02A9                     _Lcd_Cmd:
  2998                           
  2999                           ;incstack = 0
  3000                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3001                           ;Lcd_Cmd@a stored from wreg
  3002  02A9  00F3               	movwf	Lcd_Cmd@a
  3003  02AA                     l1243:
  3004                           
  3005                           ;./lcd_16x4.h: 61: void Lcd_Cmd(char a);./lcd_16x4.h: 62: {;./lcd_16x4.h: 63:  RB1 = 0;
  3006  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  3007  02AB  1303               	bcf	3,6	;RP1=0, select bank0
  3008  02AC  1086               	bcf	6,1	;volatile
  3009  02AD                     l1245:
  3010                           
  3011                           ;./lcd_16x4.h: 64:  Lcd_Port(a);
  3012  02AD  0873               	movf	Lcd_Cmd@a,w
  3013  02AE  118A  22DB  118A   	fcall	_Lcd_Port
  3014  02B1                     l1247:
  3015                           
  3016                           ;./lcd_16x4.h: 65:  RB2 = 1;
  3017  02B1  1283               	bcf	3,5	;RP0=0, select bank0
  3018  02B2  1303               	bcf	3,6	;RP1=0, select bank0
  3019  02B3  1506               	bsf	6,2	;volatile
  3020  02B4                     l1249:
  3021                           
  3022                           ;./lcd_16x4.h: 66:         _delay((unsigned long)((4)*(2000000/4000.0)));
  3023  02B4  3003               	movlw	3
  3024  02B5  00F2               	movwf	??_Lcd_Cmd+1
  3025  02B6  3097               	movlw	151
  3026  02B7  00F1               	movwf	??_Lcd_Cmd
  3027  02B8                     u1397:
  3028  02B8  0BF1               	decfsz	??_Lcd_Cmd,f
  3029  02B9  2AB8               	goto	u1397
  3030  02BA  0BF2               	decfsz	??_Lcd_Cmd+1,f
  3031  02BB  2AB8               	goto	u1397
  3032  02BC  2ABD               	nop2
  3033  02BD                     l1251:
  3034                           
  3035                           ;./lcd_16x4.h: 67:         RB2 = 0;
  3036  02BD  1283               	bcf	3,5	;RP0=0, select bank0
  3037  02BE  1303               	bcf	3,6	;RP1=0, select bank0
  3038  02BF  1106               	bcf	6,2	;volatile
  3039  02C0                     l50:
  3040  02C0  0008               	return
  3041  02C1                     __end_of_Lcd_Cmd:
  3042                           
  3043                           	psect	text13
  3044  02DB                     __ptext13:	
  3045 ;; *************** function _Lcd_Port *****************
  3046 ;; Defined at:
  3047 ;;		line 39 in file "./lcd_16x4.h"
  3048 ;; Parameters:    Size  Location     Type
  3049 ;;  a               1    wreg     unsigned char 
  3050 ;; Auto vars:     Size  Location     Type
  3051 ;;  a               1    0[COMMON] unsigned char 
  3052 ;; Return value:  Size  Location     Type
  3053 ;;                  1    wreg      void 
  3054 ;; Registers used:
  3055 ;;		wreg
  3056 ;; Tracked objects:
  3057 ;;		On entry : 0/0
  3058 ;;		On exit  : 0/0
  3059 ;;		Unchanged: 0/0
  3060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3061 ;;      Params:         0       0       0       0       0
  3062 ;;      Locals:         1       0       0       0       0
  3063 ;;      Temps:          0       0       0       0       0
  3064 ;;      Totals:         1       0       0       0       0
  3065 ;;Total ram usage:        1 bytes
  3066 ;; Hardware stack levels used: 1
  3067 ;; This function calls:
  3068 ;;		Nothing
  3069 ;; This function is called by:
  3070 ;;		_Lcd_Cmd
  3071 ;;		_Lcd_Init
  3072 ;;		_Lcd_Write_Char
  3073 ;; This function uses a non-reentrant model
  3074 ;;
  3075                           
  3076                           
  3077                           ;psect for function _Lcd_Port
  3078  02DB                     _Lcd_Port:
  3079                           
  3080                           ;incstack = 0
  3081                           ; Regs used in _Lcd_Port: [wreg]
  3082                           ;Lcd_Port@a stored from wreg
  3083  02DB  00F0               	movwf	Lcd_Port@a
  3084  02DC                     l1233:
  3085                           
  3086                           ;./lcd_16x4.h: 39: void Lcd_Port(char a);./lcd_16x4.h: 40: {;./lcd_16x4.h: 41:  if(a & 1
      +                          )
  3087  02DC  1C70               	btfss	Lcd_Port@a,0
  3088  02DD  2ADF               	goto	u651
  3089  02DE  2AE0               	goto	u650
  3090  02DF                     u651:
  3091  02DF  2AE4               	goto	l39
  3092  02E0                     u650:
  3093  02E0                     l1235:
  3094                           
  3095                           ;./lcd_16x4.h: 42:   RB3 = 1;
  3096  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  3097  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  3098  02E2  1586               	bsf	6,3	;volatile
  3099  02E3  2AE7               	goto	l40
  3100  02E4                     l39:	
  3101                           ;./lcd_16x4.h: 43:  else
  3102                           
  3103                           
  3104                           ;./lcd_16x4.h: 44:   RB3 = 0;
  3105  02E4  1283               	bcf	3,5	;RP0=0, select bank0
  3106  02E5  1303               	bcf	3,6	;RP1=0, select bank0
  3107  02E6  1186               	bcf	6,3	;volatile
  3108  02E7                     l40:
  3109                           
  3110                           ;./lcd_16x4.h: 46:  if(a & 2)
  3111  02E7  1CF0               	btfss	Lcd_Port@a,1
  3112  02E8  2AEA               	goto	u661
  3113  02E9  2AEB               	goto	u660
  3114  02EA                     u661:
  3115  02EA  2AED               	goto	l41
  3116  02EB                     u660:
  3117  02EB                     l1237:
  3118                           
  3119                           ;./lcd_16x4.h: 47:   RB4 = 1;
  3120  02EB  1606               	bsf	6,4	;volatile
  3121  02EC  2AEE               	goto	l42
  3122  02ED                     l41:	
  3123                           ;./lcd_16x4.h: 48:  else
  3124                           
  3125                           
  3126                           ;./lcd_16x4.h: 49:   RB4 = 0;
  3127  02ED  1206               	bcf	6,4	;volatile
  3128  02EE                     l42:
  3129                           
  3130                           ;./lcd_16x4.h: 51:  if(a & 4)
  3131  02EE  1D70               	btfss	Lcd_Port@a,2
  3132  02EF  2AF1               	goto	u671
  3133  02F0  2AF2               	goto	u670
  3134  02F1                     u671:
  3135  02F1  2AF4               	goto	l43
  3136  02F2                     u670:
  3137  02F2                     l1239:
  3138                           
  3139                           ;./lcd_16x4.h: 52:   RB5 = 1;
  3140  02F2  1686               	bsf	6,5	;volatile
  3141  02F3  2AF5               	goto	l44
  3142  02F4                     l43:	
  3143                           ;./lcd_16x4.h: 53:  else
  3144                           
  3145                           
  3146                           ;./lcd_16x4.h: 54:   RB5 = 0;
  3147  02F4  1286               	bcf	6,5	;volatile
  3148  02F5                     l44:
  3149                           
  3150                           ;./lcd_16x4.h: 56:  if(a & 8)
  3151  02F5  1DF0               	btfss	Lcd_Port@a,3
  3152  02F6  2AF8               	goto	u681
  3153  02F7  2AF9               	goto	u680
  3154  02F8                     u681:
  3155  02F8  2AFB               	goto	l45
  3156  02F9                     u680:
  3157  02F9                     l1241:
  3158                           
  3159                           ;./lcd_16x4.h: 57:   RB6 = 1;
  3160  02F9  1706               	bsf	6,6	;volatile
  3161  02FA  2AFC               	goto	l47
  3162  02FB                     l45:	
  3163                           ;./lcd_16x4.h: 58:  else
  3164                           
  3165                           
  3166                           ;./lcd_16x4.h: 59:   RB6 = 0;
  3167  02FB  1306               	bcf	6,6	;volatile
  3168  02FC                     l47:
  3169  02FC  0008               	return
  3170  02FD                     __end_of_Lcd_Port:
  3171                           
  3172                           	psect	text14
  3173  02C1                     __ptext14:	
  3174 ;; *************** function _ConfigPorts *****************
  3175 ;; Defined at:
  3176 ;;		line 60 in file "main.c"
  3177 ;; Parameters:    Size  Location     Type
  3178 ;;		None
  3179 ;; Auto vars:     Size  Location     Type
  3180 ;;		None
  3181 ;; Return value:  Size  Location     Type
  3182 ;;                  1    wreg      void 
  3183 ;; Registers used:
  3184 ;;		status,2
  3185 ;; Tracked objects:
  3186 ;;		On entry : 0/0
  3187 ;;		On exit  : 0/0
  3188 ;;		Unchanged: 0/0
  3189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3190 ;;      Params:         0       0       0       0       0
  3191 ;;      Locals:         0       0       0       0       0
  3192 ;;      Temps:          0       0       0       0       0
  3193 ;;      Totals:         0       0       0       0       0
  3194 ;;Total ram usage:        0 bytes
  3195 ;; Hardware stack levels used: 1
  3196 ;; This function calls:
  3197 ;;		Nothing
  3198 ;; This function is called by:
  3199 ;;		_main
  3200 ;; This function uses a non-reentrant model
  3201 ;;
  3202                           
  3203                           
  3204                           ;psect for function _ConfigPorts
  3205  02C1                     _ConfigPorts:
  3206  02C1                     l1409:	
  3207                           ;incstack = 0
  3208                           ; Regs used in _ConfigPorts: [status,2]
  3209                           
  3210                           
  3211                           ;main.c: 62:     ANSEL = 0x00;
  3212  02C1  1683               	bsf	3,5	;RP0=1, select bank1
  3213  02C2  1303               	bcf	3,6	;RP1=0, select bank1
  3214  02C3  019B               	clrf	27	;volatile
  3215                           
  3216                           ;main.c: 63:     PORTA = 0x00;
  3217  02C4  1283               	bcf	3,5	;RP0=0, select bank0
  3218  02C5  1303               	bcf	3,6	;RP1=0, select bank0
  3219  02C6  0185               	clrf	5	;volatile
  3220                           
  3221                           ;main.c: 64:     PORTB = 0x00;
  3222  02C7  0186               	clrf	6	;volatile
  3223  02C8                     l1411:
  3224                           
  3225                           ;main.c: 66:     TRISAbits.TRISA0 = 0b1;
  3226  02C8  1683               	bsf	3,5	;RP0=1, select bank1
  3227  02C9  1303               	bcf	3,6	;RP1=0, select bank1
  3228  02CA  1405               	bsf	5,0	;volatile
  3229  02CB                     l1413:
  3230                           
  3231                           ;main.c: 67:     TRISAbits.TRISA1 = 0b1;
  3232  02CB  1485               	bsf	5,1	;volatile
  3233  02CC                     l1415:
  3234                           
  3235                           ;main.c: 68:     TRISAbits.TRISA2 = 0b0;
  3236  02CC  1105               	bcf	5,2	;volatile
  3237  02CD                     l1417:
  3238                           
  3239                           ;main.c: 69:     TRISAbits.TRISA3 = 0b0;
  3240  02CD  1185               	bcf	5,3	;volatile
  3241  02CE                     l1419:
  3242                           
  3243                           ;main.c: 70:     TRISAbits.TRISA4 = 0b0;
  3244  02CE  1205               	bcf	5,4	;volatile
  3245  02CF                     l1421:
  3246                           
  3247                           ;main.c: 71:     TRISAbits.TRISA5 = 0b1;
  3248  02CF  1685               	bsf	5,5	;volatile
  3249  02D0                     l1423:
  3250                           
  3251                           ;main.c: 72:     TRISAbits.TRISA6 = 0b1;
  3252  02D0  1705               	bsf	5,6	;volatile
  3253  02D1                     l1425:
  3254                           
  3255                           ;main.c: 73:     TRISAbits.TRISA7 = 0b1;
  3256  02D1  1785               	bsf	5,7	;volatile
  3257  02D2                     l1427:
  3258                           
  3259                           ;main.c: 75:     TRISBbits.TRISB0 = 0b1;
  3260  02D2  1406               	bsf	6,0	;volatile
  3261  02D3                     l1429:
  3262                           
  3263                           ;main.c: 76:     TRISBbits.TRISB1 = 0b0;
  3264  02D3  1086               	bcf	6,1	;volatile
  3265  02D4                     l1431:
  3266                           
  3267                           ;main.c: 77:     TRISBbits.TRISB2 = 0b0;
  3268  02D4  1106               	bcf	6,2	;volatile
  3269  02D5                     l1433:
  3270                           
  3271                           ;main.c: 78:     TRISBbits.TRISB3 = 0b0;
  3272  02D5  1186               	bcf	6,3	;volatile
  3273  02D6                     l1435:
  3274                           
  3275                           ;main.c: 79:     TRISBbits.TRISB4 = 0b0;
  3276  02D6  1206               	bcf	6,4	;volatile
  3277  02D7                     l1437:
  3278                           
  3279                           ;main.c: 80:     TRISBbits.TRISB5 = 0b0;
  3280  02D7  1286               	bcf	6,5	;volatile
  3281  02D8                     l1439:
  3282                           
  3283                           ;main.c: 81:     TRISBbits.TRISB6 = 0b0;
  3284  02D8  1306               	bcf	6,6	;volatile
  3285  02D9                     l1441:
  3286                           
  3287                           ;main.c: 82:     TRISBbits.TRISB7 = 0b1;
  3288  02D9  1786               	bsf	6,7	;volatile
  3289  02DA                     l93:
  3290  02DA  0008               	return
  3291  02DB                     __end_of_ConfigPorts:
  3292                           
  3293                           	psect	text15
  3294  027D                     __ptext15:	
  3295 ;; *************** function _ConfigOscillator *****************
  3296 ;; Defined at:
  3297 ;;		line 49 in file "main.c"
  3298 ;; Parameters:    Size  Location     Type
  3299 ;;		None
  3300 ;; Auto vars:     Size  Location     Type
  3301 ;;		None
  3302 ;; Return value:  Size  Location     Type
  3303 ;;                  1    wreg      void 
  3304 ;; Registers used:
  3305 ;;		wreg, status,2, status,0
  3306 ;; Tracked objects:
  3307 ;;		On entry : 0/0
  3308 ;;		On exit  : 0/0
  3309 ;;		Unchanged: 0/0
  3310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3311 ;;      Params:         0       0       0       0       0
  3312 ;;      Locals:         0       0       0       0       0
  3313 ;;      Temps:          0       0       0       0       0
  3314 ;;      Totals:         0       0       0       0       0
  3315 ;;Total ram usage:        0 bytes
  3316 ;; Hardware stack levels used: 1
  3317 ;; This function calls:
  3318 ;;		Nothing
  3319 ;; This function is called by:
  3320 ;;		_main
  3321 ;; This function uses a non-reentrant model
  3322 ;;
  3323                           
  3324                           
  3325                           ;psect for function _ConfigOscillator
  3326  027D                     _ConfigOscillator:
  3327  027D                     l1407:	
  3328                           ;incstack = 0
  3329                           ; Regs used in _ConfigOscillator: [wreg+status,2+status,0]
  3330                           
  3331                           
  3332                           ;main.c: 51:     OSCCONbits.IRCF = 0b111;
  3333  027D  3070               	movlw	112
  3334  027E  1683               	bsf	3,5	;RP0=1, select bank1
  3335  027F  1303               	bcf	3,6	;RP1=0, select bank1
  3336  0280  048F               	iorwf	15,f	;volatile
  3337                           
  3338                           ;main.c: 52:     OSCCONbits.SCS = 0b00;
  3339  0281  30FC               	movlw	-4
  3340  0282  058F               	andwf	15,f	;volatile
  3341  0283                     l90:
  3342  0283  0008               	return
  3343  0284                     __end_of_ConfigOscillator:
  3344  007E                     btemp	set	126	;btemp
  3345  007E                     wtemp0	set	126
  3346                           
  3347                           	psect	config
  3348                           
  3349                           ;Config register CONFIG1 @ 0x2007
  3350                           ;	Oscillator Selection bits
  3351                           ;	FOSC = INTOSCIO, INTRC oscillator; port I/O function on both RA6/OSC2/CLKO pin and RA7
      +                          /OSC1/CLKI pin
  3352                           ;	Watchdog Timer Enable bit
  3353                           ;	WDTE = OFF, WDT disabled
  3354                           ;	Power-up Timer Enable bit
  3355                           ;	PWRTE = ON, PWRT enabled
  3356                           ;	RA5/MCLR/VPP Pin Function Select bit
  3357                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital I/O, MCLR internally tied to VDD
  3358                           ;	Brown-out Reset Enable bit
  3359                           ;	BOREN = ON, BOR enabled
  3360                           ;	Low-Voltage Programming Enable bit
  3361                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  3362                           ;	Data EE Memory Code Protection bit
  3363                           ;	CPD = OFF, Code protection off
  3364                           ;	Flash Program Memory Write Enable bits
  3365                           ;	WRT = OFF, Write protection off
  3366                           ;	In-Circuit Debugger Mode bit
  3367                           ;	DEBUG = 0x1, unprogrammed default
  3368                           ;	CCP1 Pin Selection bit
  3369                           ;	CCPMX = RB0, CCP1 function on RB0
  3370                           ;	Flash Program Memory Code Protection bit
  3371                           ;	CP = OFF, Code protection off
  3372  2007                     	org	8199
  3373  2007  3F50               	dw	16208
  3374                           
  3375                           ;Config register CONFIG2 @ 0x2008
  3376                           ;	Fail-Safe Clock Monitor Enable bit
  3377                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3378                           ;	Internal External Switchover bit
  3379                           ;	IESO = OFF, Internal External Switchover mode disabled
  3380  2008                     	org	8200
  3381  2008  3FFC               	dw	16380

Data Sizes:
    Strings     62
    Constant    10
    Data        0
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     45      50
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_4(CODE[17]), STR_3(CODE[17]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> main@s(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> STR_8(CODE[3]), STR_7(CODE[3]), STR_6(CODE[3]), STR_5(CODE[3]), 
		 -> main@s(BANK0[20]), STR_2(CODE[11]), STR_1(CODE[11]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                32    32      0    4636
                                             15 BANK0     30    30      0
                   _ConfigOscillator
                        _ConfigPorts
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _Retardo
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             23    20      3    1905
                                              0 BANK0     15    12      3
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     244
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Retardo                                              2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     876
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1    1258
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ConfigPorts                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigOscillator                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigOscillator
   _ConfigPorts
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _Retardo
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      40       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     2D      32       5       62.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      40      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Sat Aug 21 08:24:41 2021

                        pc 0002                         l40 02E7                         l41 02ED  
                       l42 02EE                         l50 02C0                         l43 02F4  
                       l44 02F5                         l45 02FB                         l53 028C  
                       l47 02FC                         l39 02E4                         l63 04E9  
                       l90 0283                         l66 0410                         l59 04E9  
                       l75 03CC                         l93 02DA                         l69 0356  
                       fsr 0004        ___wmul@multiplicand 0072                        l101 0296  
                      l112 074C                        l122 07F3                        l123 07C4  
                      l116 075E                        l125 07C5                        l117 077E  
                      l109 0724                        l126 07F1                        l241 05B7  
                      l252 0653                        l256 0309                        l258 0321  
                      l528 0454                        l538 0390                        l709 02A8  
                      _RB1 0031                        _RB2 0032                        _RB3 0033  
                      _RB4 0034                        _RB5 0035                        _RB6 0036  
                      u700 029F                        u701 029E                        u710 02A5  
                      u711 02A4                        u800 043C                        u720 0303  
                      u801 043B                        u721 0302                        u650 02E0  
                      u651 02DF                        u660 02EB                        u820 0450  
                      u661 02EA                        u821 044F                        u805 0438  
                      u670 02F2                        u910 0480                        u830 035D  
                      u750 031D                        u671 02F1                        u911 047F  
                      u815 0444                        u831 035C                        u751 031C  
                      u735 030A                        u680 02F9                        u760 0419  
                      u681 02F8                        u905 0463                        u761 0418  
                      u745 0311                        u930 04A5                        u850 036F  
                      u931 04A4                        u851 036E                        u780 042B  
                      u860 0379                        u925 0488                        u781 042A  
                      u861 0378                        u845 0361                        u950 04CA  
                      u951 04C9                        u695 0333                        u775 041D  
                      u880 038C                        u945 04AD                        u881 038B  
                      u865 0375                        u890 045B                        u970 039E  
                      u891 045A                        u795 042C                        u875 0380  
                      u980 03BC                        u965 04D2                        u990 03CC  
                      u991 03CB                        fsr0 0004                        indf 0000  
                     l1301 0413                       l1311 042B                       l1303 0419  
                     l1241 02F9                       l1233 02DC                       l1401 0394  
                     l1313 043C                       l1305 041C                       l1321 0450  
                     l1411 02C8                       l1235 02E0                       l1251 02BD  
                     l1243 02AA                       l1403 03AC                       l1315 0442  
                     l1307 0423                       l1331 0367                       l1421 02CF  
                     l1413 02CB                       l1237 02EB                       l1245 02AD  
                     l1261 033F                       l1253 0323                       l1405 03B2  
                     l1317 0443                       l1309 0427                       l1341 0386  
                     l1333 036B                       l1325 0357                       l1501 05CE  
                     l1407 027D                       l1431 02D4                       l1423 02D0  
                     l1415 02CC                       l1239 02F2                       l1247 02B1  
                     l1351 045B                       l1271 0353                       l1263 0344  
                     l1255 032D                       l1319 044A                       l1335 036F  
                     l1327 035D                       l1343 038C                       l1511 05EF  
                     l1503 05D2                       l1441 02D9                       l1433 02D5  
                     l1425 02D1                       l1417 02CD                       l1409 02C1  
                     l1249 02B4                       l1361 0480                       l1353 046C  
                     l1265 0347                       l1257 0330                       l1337 0379  
                     l1329 0360                       l1281 02A7                       l1273 0298  
                     l1521 062B                       l1513 05F5                       l1505 05D8  
                     l1601 06F0                       l1435 02D6                       l1427 02D2  
                     l1419 02CE                       l1347 0284                       l1371 04A5  
                     l1363 0491                       l1355 0471                       l1267 034B  
                     l1259 033C                       l1443 028D                       l1339 037F  
                     l1291 0310                       l1275 0299                       l1523 0632  
                     l1515 05FC                       l1507 05DF                       l1451 04FF  
                     l1611 0716                       l1603 06FF                       l1437 02D7  
                     l1429 02D3                       l1381 04CA                       l1373 04B6  
                     l1365 0496                       l1357 0475                       l1349 0456  
                     l1269 034E                       l1293 0317                       l1285 02FD  
                     l1277 029F                       l1525 0636                       l1517 0600  
                     l1509 05E3                       l1461 052A                       l1453 0504  
                     l1445 04ED                       l1613 071C                       l1605 0706  
                     l1621 0745                       l1439 02D8                       l1391 03D1  
                     l1383 04DB                       l1375 04BB                       l1367 049A  
                     l1359 047A                       l1295 031D                       l1287 02FF  
                     l1279 02A5                       l1519 0605                       l1471 0568  
                     l1463 053B                       l1455 0507                       l1447 04F2  
                     l1527 063F                       l1631 075A                       l1615 0726  
                     l1607 0707                       l1623 0749                       l1551 065A  
                     l1393 03DA                       l1385 04E0                       l1377 04BF  
                     l1369 049F                       l1289 0303                       l1481 0581  
                     l1473 0570                       l1529 064F                       l1465 053F  
                     l1457 0513                       l1449 04F8                       l1641 077A  
                     l1633 0762                       l1625 0750                       l1617 072C  
                     l1609 070F                       l1561 0668                       l1553 065E  
                     l1395 03E7                       l1387 04E4                       l1379 04C4  
                     l1299 0411                       l1491 059B                       l1475 0574  
                     l1459 0517                       l1643 0781                       l1635 0765  
                     l1651 0795                       l1627 0754                       l1619 0733  
                     l1571 0689                       l1563 066B                       l1555 065F  
                     l1397 03EB                       l1389 03CD                       l1493 05A5  
                     l1477 0578                       l1469 054B                       l1661 07B0  
                     l1645 078F                       l1637 0773                       l1629 0755  
                     l1653 0797                       l1581 06C0                       l1573 0697  
                     l1565 0671                       l1557 0662                       l1549 0654  
                     l1399 0391                       l1495 05AB                       l1487 0583  
                     l1479 057C                       l1671 07DD                       l1663 07BD  
                     l1655 0799                       l1639 0778                       l1591 06D6  
                     l1583 06CA                       l1575 06A5                       l1567 0678  
                     l1559 0665                       l1497 05B1                       l1673 07EA  
                     l1665 07C1                       l1657 079A                       l1593 06D7  
                     l1585 06D1                       l1577 06AB                       l1569 0682  
                     l1499 05C2                       l1675 07EE                       l1667 07C2  
                     l1659 079E                       l1595 06D8                       l1587 06D2  
                     l1579 06B2                       l1677 07EF                       l1669 07CB  
                     l1597 06D9                       l1589 06D5                       l1599 06DF  
                     l1699 055D                       STR_1 003E                       STR_2 0049  
                     STR_3 001C                       STR_4 002D                       STR_5 0054  
                     STR_6 0057                       STR_7 0054                       STR_8 0057  
                     u1000 04F8                       u1001 04F7                       u1010 0513  
                     u1011 0512                       u1100 05EF                       u1020 054B  
                     u1101 05EE                       u1021 054A                       u1110 05F5  
                     u1030 0578                       u1111 05F4                       u1031 0577  
                     u1120 063F                       u1040 059A                       u1200 075A  
                     u1121 063E                       u1041 0599                       u1201 0759  
                     u1130 064F                       u1050 05A5                       u1210 075E  
                     u1131 064E                       u1051 05A4                       u1211 075D  
                     u1060 05AB                       u1220 0762                       u1061 05AA  
                     u1045 0596                       u1221 0761                       u1070 05B1  
                     u1230 0773                       u1071 05B0                       u1231 0772  
                     u1080 05C2                       u1240 078F                       u1160 06DF  
                     u1081 05C1                       u1241 078E                       u1161 06DE  
                     u1090 05D8                       u1250 079E                       u1170 06FF  
                     u1091 05D7                       u1251 079D                       u1235 076F  
                     u1171 06FE                       u1307 06EB                       u1260 07BD  
                     u1180 0706                       u1085 05BE                       u1261 07BC  
                     u1317 07A4                       u1245 078B                       u1181 0705  
                     u1270 07CB                       u1190 0750                       u1327 07D1  
                     u1271 07CA                       u1191 074F                       u1175 06FB  
                     u1280 07EA                       u1337 0291                       u1281 07E9  
                     u1265 07B9                       u1347 0341                       u1357 0350  
                     u1285 07E6                       u1367 03D5                       u1377 03E2  
                     u1297 0691                       u1387 03ED                       u1397 02B8  
        ?_Lcd_Write_String 0075                       _main 0654                       btemp 007E  
                     start 0000         ??_Lcd_Write_String 0077            __end_of_Lcd_Cmd 02C1  
      __end_of_ConfigPorts 02DB            __end_of_Retardo 0297             main@Count_Menu 0046  
                    ?_main 0070                      _ANSEL 009B            __end_of___lwdiv 0455  
          __end_of___lwmod 0391                      _PORTA 0005                      _PORTB 0006  
  __size_of_Lcd_Set_Cursor 0095            __end_of_dpowers 001C            __end_of_isdigit 02A9  
                    main@s 0032                      pclath 000A                      status 0003  
                    wtemp0 007E            __end_of_sprintf 0654                 _CountSteps 004D  
               _FotoCelula 0051           __end_of_Lcd_Init 0411           __end_of_Lcd_Port 02FD  
          __initialization 07F6               __end_of_main 07F6                     ??_main 002F  
       __size_of_Lcd_Clear 0009                  ??_Lcd_Cmd 0071    __size_of_Lcd_Write_Char 0035  
              _ConfigPorts 02C1                     _AutMan 004F                  ??_Retardo 0070  
 __end_of_ConfigOscillator 0284                     ___wmul 02FD                  ??___lwdiv 0074  
                ??___lwmod 007C                  ??_isdigit 0070                  ??_sprintf 0023  
          Lcd_Set_Cursor@a 0074            Lcd_Set_Cursor@b 0077            Lcd_Set_Cursor@y 0079  
          Lcd_Set_Cursor@z 0078    __end_of__initialization 07FD          __end_of_Lcd_Clear 028D  
           __pcstackCOMMON 0070             _Lcd_Set_Cursor 0455             _OPTION_REGbits 0081  
                ?_Lcd_Init 0070                  ?_Lcd_Port 0070               sprintf@width 002B  
               __pbssBANK0 004D                 __pmaintext 0654                    ?___wmul 0070  
__size_of_Lcd_Write_String 003C     __end_of_Lcd_Set_Cursor 04EA                 ??_Lcd_Init 0074  
               ??_Lcd_Port 0070                 __stringtab 0002             _Lcd_Write_Char 0322  
                  _Lcd_Cmd 02A9                    _Retardo 028D            __size_of___wmul 0025  
                  ___lwdiv 0411                    ___lwmod 0357            ?_Lcd_Set_Cursor 0074  
                  __ptext1 04EA                    __ptext2 0297                    __ptext3 02FD  
                  __ptext4 0357                    __ptext5 0411                    __ptext6 028D  
                  __ptext7 0391                    __ptext8 0322                    __ptext9 0455  
                  _dpowers 0012                    _isdigit 0297                    _sprintf 04EA  
   __end_of_Lcd_Write_Char 0357       end_of_initialization 07FD               ?_ConfigPorts 0070  
        ?_ConfigOscillator 0070                  Lcd_Port@a 0070         ??_ConfigOscillator 0070  
                _PORTAbits 0005                  _PORTBbits 0006                  _TRISAbits 0085  
                _TRISBbits 0086            ?_Lcd_Write_Char 0070          Lcd_Write_String@a 0075  
        Lcd_Write_String@i 007A                  _Lcd_Clear 0284             __end_of___wmul 0322  
         _Lcd_Write_String 0391        start_initialization 07F6          __size_of_Lcd_Init 0044  
        __size_of_Lcd_Port 0022                 ?_Lcd_Clear 0070                   ??___wmul 0074  
          Lcd_Write_Char@a 0074            Lcd_Write_Char@y 0073                  ___latbits 0001  
            __pcstackBANK0 0020                   ?_Lcd_Cmd 0070                sprintf@flag 0028  
              sprintf@prec 0027       __size_of_ConfigPorts 001A           ___lwdiv@dividend 0072  
                 ?_Retardo 0070           ??_Lcd_Set_Cursor 0075                   ?___lwdiv 0070  
                 ?___lwmod 0078                  __pstrings 0002                   ?_isdigit 0070  
         ___lwdiv@quotient 0075                   ?_sprintf 0020             ___wmul@product 0074  
                 Lcd_Cmd@a 0073                ??_Lcd_Clear 0074                  main@Count 0049  
              __stringbase 0011          ___wmul@multiplier 0070                  main@Steps 004B  
         ??_Lcd_Write_Char 0071  __size_of_ConfigOscillator 0007                   _Lcd_Init 03CD  
                 _Lcd_Port 02DB   __end_of_Lcd_Write_String 03CD           __size_of_Lcd_Cmd 0018  
         __size_of_Retardo 000A           __size_of___lwdiv 0044           __size_of___lwmod 003A  
       __end_of__stringtab 0012                _isdigit$780 0070                 sprintf@val 0029  
         __size_of_isdigit 0012            ___lwdiv@divisor 0070            ___lwdiv@counter 0077  
                 __ptext10 03CD                   __ptext11 0284                   __ptext12 02A9  
                 __ptext13 02DB                   __ptext14 02C1                   __ptext15 027D  
         __size_of_sprintf 016A              __size_of_main 01A2                   main@menu 0048  
               _INTCONbits 000B                   isdigit@c 0071         Lcd_Write_Char@temp 0072  
                sprintf@ap 0026                  sprintf@sp 002D           ___lwmod@dividend 007A  
                stringcode 000C                 _OSCCONbits 008F         Lcd_Set_Cursor@temp 007A  
                 sprintf@c 002E                   sprintf@f 0020            ___lwmod@divisor 0078  
          ___lwmod@counter 007D                   stringdir 000C                   stringtab 0002  
         _ConfigOscillator 027D              ??_ConfigPorts 0070  
